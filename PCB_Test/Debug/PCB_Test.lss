
PCB_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a74  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406a74  00406a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00406a7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000cdc  204009b8  00407434  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20401694  00408110  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20403698  0040a114  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ae98  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003799  00000000  00000000  0003b8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000625e  00000000  00000000  0003f070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c70  00000000  00000000  000452ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cd8  00000000  00000000  00045f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023d85  00000000  00000000  00046c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e762  00000000  00000000  0006a99b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00097af3  00000000  00000000  000790fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d40  00000000  00000000  00110bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 36 40 20 e1 0f 40 00 dd 0f 40 00 dd 0f 40 00     .6@ ..@...@...@.
  400010:	dd 0f 40 00 dd 0f 40 00 dd 0f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	dd 0f 40 00 dd 0f 40 00 00 00 00 00 dd 0f 40 00     ..@...@.......@.
  40003c:	dd 0f 40 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ..@...@...@...@.
  40004c:	dd 0f 40 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ..@...@...@...@.
  40005c:	dd 0f 40 00 dd 0f 40 00 00 00 00 00 61 02 40 00     ..@...@.....a.@.
  40006c:	75 02 40 00 00 00 00 00 dd 0f 40 00 dd 0f 40 00     u.@.......@...@.
  40007c:	dd 0f 40 00 89 02 40 00 00 00 00 00 dd 0f 40 00     ..@...@.......@.
  40008c:	dd 0f 40 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ..@...@...@...@.
  40009c:	59 1e 40 00 dd 0f 40 00 dd 0f 40 00 00 00 00 00     Y.@...@...@.....
	...
  4000b4:	dd 0f 40 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ..@...@...@...@.
  4000c4:	dd 0f 40 00 dd 0f 40 00 a1 1b 40 00 dd 0f 40 00     ..@...@...@...@.
  4000d4:	8d 1c 40 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ..@...@...@...@.
  4000e4:	dd 0f 40 00 00 00 00 00 dd 0f 40 00 dd 0f 40 00     ..@.......@...@.
  4000f4:	dd 0f 40 00 dd 0f 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400104:	00 00 00 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ......@...@...@.
  400114:	dd 0f 40 00 00 00 00 00 00 00 00 00 dd 0f 40 00     ..@...........@.
  400124:	dd 0f 40 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ..@...@...@...@.
  400134:	dd 0f 40 00 00 00 00 00 dd 0f 40 00 dd 0f 40 00     ..@.......@...@.
  400144:	dd 0f 40 00 dd 0f 40 00 dd 0f 40 00 dd 0f 40 00     ..@...@...@...@.
  400154:	dd 0f 40 00 00 00 00 00 dd 0f 40 00 dd 0f 40 00     ..@.......@...@.
  400164:	dd 0f 40 00                                         ..@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00406a7c 	.word	0x00406a7c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406a7c 	.word	0x00406a7c
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00406a7c 	.word	0x00406a7c
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20401638 	.word	0x20401638
  40020c:	20401630 	.word	0x20401630

00400210 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400214:	4604      	mov	r4, r0
  400216:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400218:	4b0e      	ldr	r3, [pc, #56]	; (400254 <pio_handler_process+0x44>)
  40021a:	4798      	blx	r3
  40021c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40021e:	4620      	mov	r0, r4
  400220:	4b0d      	ldr	r3, [pc, #52]	; (400258 <pio_handler_process+0x48>)
  400222:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400224:	4005      	ands	r5, r0
  400226:	d013      	beq.n	400250 <pio_handler_process+0x40>
  400228:	4c0c      	ldr	r4, [pc, #48]	; (40025c <pio_handler_process+0x4c>)
  40022a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40022e:	e003      	b.n	400238 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400230:	42b4      	cmp	r4, r6
  400232:	d00d      	beq.n	400250 <pio_handler_process+0x40>
  400234:	3410      	adds	r4, #16
		while (status != 0) {
  400236:	b15d      	cbz	r5, 400250 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400238:	6820      	ldr	r0, [r4, #0]
  40023a:	4540      	cmp	r0, r8
  40023c:	d1f8      	bne.n	400230 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40023e:	6861      	ldr	r1, [r4, #4]
  400240:	4229      	tst	r1, r5
  400242:	d0f5      	beq.n	400230 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400244:	68e3      	ldr	r3, [r4, #12]
  400246:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400248:	6863      	ldr	r3, [r4, #4]
  40024a:	ea25 0503 	bic.w	r5, r5, r3
  40024e:	e7ef      	b.n	400230 <pio_handler_process+0x20>
  400250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400254:	0040097d 	.word	0x0040097d
  400258:	00400981 	.word	0x00400981
  40025c:	204009d4 	.word	0x204009d4

00400260 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400260:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400262:	210a      	movs	r1, #10
  400264:	4801      	ldr	r0, [pc, #4]	; (40026c <PIOA_Handler+0xc>)
  400266:	4b02      	ldr	r3, [pc, #8]	; (400270 <PIOA_Handler+0x10>)
  400268:	4798      	blx	r3
  40026a:	bd08      	pop	{r3, pc}
  40026c:	400e0e00 	.word	0x400e0e00
  400270:	00400211 	.word	0x00400211

00400274 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400274:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400276:	210b      	movs	r1, #11
  400278:	4801      	ldr	r0, [pc, #4]	; (400280 <PIOB_Handler+0xc>)
  40027a:	4b02      	ldr	r3, [pc, #8]	; (400284 <PIOB_Handler+0x10>)
  40027c:	4798      	blx	r3
  40027e:	bd08      	pop	{r3, pc}
  400280:	400e1000 	.word	0x400e1000
  400284:	00400211 	.word	0x00400211

00400288 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400288:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40028a:	2110      	movs	r1, #16
  40028c:	4801      	ldr	r0, [pc, #4]	; (400294 <PIOD_Handler+0xc>)
  40028e:	4b02      	ldr	r3, [pc, #8]	; (400298 <PIOD_Handler+0x10>)
  400290:	4798      	blx	r3
  400292:	bd08      	pop	{r3, pc}
  400294:	400e1400 	.word	0x400e1400
  400298:	00400211 	.word	0x00400211

0040029c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40029c:	6943      	ldr	r3, [r0, #20]
  40029e:	f013 0f02 	tst.w	r3, #2
  4002a2:	d004      	beq.n	4002ae <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4002a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4002a8:	61c1      	str	r1, [r0, #28]
	return 0;
  4002aa:	2000      	movs	r0, #0
  4002ac:	4770      	bx	lr
		return 1;
  4002ae:	2001      	movs	r0, #1
}
  4002b0:	4770      	bx	lr

004002b2 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4002b2:	6943      	ldr	r3, [r0, #20]
  4002b4:	f013 0f01 	tst.w	r3, #1
  4002b8:	d005      	beq.n	4002c6 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4002ba:	6983      	ldr	r3, [r0, #24]
  4002bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4002c0:	600b      	str	r3, [r1, #0]

	return 0;
  4002c2:	2000      	movs	r0, #0
  4002c4:	4770      	bx	lr
		return 1;
  4002c6:	2001      	movs	r0, #1
}
  4002c8:	4770      	bx	lr
	...

004002cc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4002cc:	3801      	subs	r0, #1
  4002ce:	2802      	cmp	r0, #2
  4002d0:	d815      	bhi.n	4002fe <_write+0x32>
{
  4002d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d6:	460e      	mov	r6, r1
  4002d8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4002da:	b19a      	cbz	r2, 400304 <_write+0x38>
  4002dc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002de:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400318 <_write+0x4c>
  4002e2:	4f0c      	ldr	r7, [pc, #48]	; (400314 <_write+0x48>)
  4002e4:	f8d8 0000 	ldr.w	r0, [r8]
  4002e8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002ec:	683b      	ldr	r3, [r7, #0]
  4002ee:	4798      	blx	r3
  4002f0:	2800      	cmp	r0, #0
  4002f2:	db0a      	blt.n	40030a <_write+0x3e>
  4002f4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002f6:	3c01      	subs	r4, #1
  4002f8:	d1f4      	bne.n	4002e4 <_write+0x18>
  4002fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002fe:	f04f 30ff 	mov.w	r0, #4294967295
  400302:	4770      	bx	lr
	for (; len != 0; --len) {
  400304:	4610      	mov	r0, r2
  400306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40030a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40030e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400312:	bf00      	nop
  400314:	20401634 	.word	0x20401634
  400318:	20401638 	.word	0x20401638

0040031c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40031c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  40031e:	4810      	ldr	r0, [pc, #64]	; (400360 <sysclk_init+0x44>)
  400320:	4b10      	ldr	r3, [pc, #64]	; (400364 <sysclk_init+0x48>)
  400322:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400324:	213e      	movs	r1, #62	; 0x3e
  400326:	2000      	movs	r0, #0
  400328:	4b0f      	ldr	r3, [pc, #60]	; (400368 <sysclk_init+0x4c>)
  40032a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40032c:	4c0f      	ldr	r4, [pc, #60]	; (40036c <sysclk_init+0x50>)
  40032e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400330:	2800      	cmp	r0, #0
  400332:	d0fc      	beq.n	40032e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400334:	4b0e      	ldr	r3, [pc, #56]	; (400370 <sysclk_init+0x54>)
  400336:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400338:	4a0e      	ldr	r2, [pc, #56]	; (400374 <sysclk_init+0x58>)
  40033a:	4b0f      	ldr	r3, [pc, #60]	; (400378 <sysclk_init+0x5c>)
  40033c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40033e:	4c0f      	ldr	r4, [pc, #60]	; (40037c <sysclk_init+0x60>)
  400340:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400342:	2800      	cmp	r0, #0
  400344:	d0fc      	beq.n	400340 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400346:	2002      	movs	r0, #2
  400348:	4b0d      	ldr	r3, [pc, #52]	; (400380 <sysclk_init+0x64>)
  40034a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40034c:	2000      	movs	r0, #0
  40034e:	4b0d      	ldr	r3, [pc, #52]	; (400384 <sysclk_init+0x68>)
  400350:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400352:	4b0d      	ldr	r3, [pc, #52]	; (400388 <sysclk_init+0x6c>)
  400354:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400356:	4802      	ldr	r0, [pc, #8]	; (400360 <sysclk_init+0x44>)
  400358:	4b02      	ldr	r3, [pc, #8]	; (400364 <sysclk_init+0x48>)
  40035a:	4798      	blx	r3
  40035c:	bd10      	pop	{r4, pc}
  40035e:	bf00      	nop
  400360:	08f0d180 	.word	0x08f0d180
  400364:	004011b5 	.word	0x004011b5
  400368:	00400a21 	.word	0x00400a21
  40036c:	00400a75 	.word	0x00400a75
  400370:	00400a85 	.word	0x00400a85
  400374:	20183f01 	.word	0x20183f01
  400378:	400e0600 	.word	0x400e0600
  40037c:	00400a95 	.word	0x00400a95
  400380:	00400985 	.word	0x00400985
  400384:	004009bd 	.word	0x004009bd
  400388:	004010a9 	.word	0x004010a9

0040038c <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  40038c:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  40038e:	6803      	ldr	r3, [r0, #0]
  400390:	4a07      	ldr	r2, [pc, #28]	; (4003b0 <_mcan_enable_peripheral_clock+0x24>)
  400392:	4293      	cmp	r3, r2
  400394:	d003      	beq.n	40039e <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400396:	4a07      	ldr	r2, [pc, #28]	; (4003b4 <_mcan_enable_peripheral_clock+0x28>)
  400398:	4293      	cmp	r3, r2
  40039a:	d004      	beq.n	4003a6 <_mcan_enable_peripheral_clock+0x1a>
  40039c:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  40039e:	2023      	movs	r0, #35	; 0x23
  4003a0:	4b05      	ldr	r3, [pc, #20]	; (4003b8 <_mcan_enable_peripheral_clock+0x2c>)
  4003a2:	4798      	blx	r3
  4003a4:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  4003a6:	2025      	movs	r0, #37	; 0x25
  4003a8:	4b03      	ldr	r3, [pc, #12]	; (4003b8 <_mcan_enable_peripheral_clock+0x2c>)
  4003aa:	4798      	blx	r3
	}
}
  4003ac:	e7f6      	b.n	40039c <_mcan_enable_peripheral_clock+0x10>
  4003ae:	bf00      	nop
  4003b0:	40030000 	.word	0x40030000
  4003b4:	40034000 	.word	0x40034000
  4003b8:	00400abd 	.word	0x00400abd

004003bc <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  4003bc:	b570      	push	{r4, r5, r6, lr}
  4003be:	4606      	mov	r6, r0
  4003c0:	460c      	mov	r4, r1
  4003c2:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  4003c4:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  4003c6:	2005      	movs	r0, #5
  4003c8:	4b84      	ldr	r3, [pc, #528]	; (4005dc <mcan_init+0x220>)
  4003ca:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  4003cc:	2190      	movs	r1, #144	; 0x90
  4003ce:	2005      	movs	r0, #5
  4003d0:	4b83      	ldr	r3, [pc, #524]	; (4005e0 <mcan_init+0x224>)
  4003d2:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  4003d4:	2005      	movs	r0, #5
  4003d6:	4b83      	ldr	r3, [pc, #524]	; (4005e4 <mcan_init+0x228>)
  4003d8:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  4003da:	4630      	mov	r0, r6
  4003dc:	4b82      	ldr	r3, [pc, #520]	; (4005e8 <mcan_init+0x22c>)
  4003de:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  4003e0:	69a3      	ldr	r3, [r4, #24]
  4003e2:	f043 0302 	orr.w	r3, r3, #2
  4003e6:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  4003e8:	4b80      	ldr	r3, [pc, #512]	; (4005ec <mcan_init+0x230>)
  4003ea:	429c      	cmp	r4, r3
  4003ec:	f000 809f 	beq.w	40052e <mcan_init+0x172>
	} else if (hw == MCAN1) {
  4003f0:	4b7f      	ldr	r3, [pc, #508]	; (4005f0 <mcan_init+0x234>)
  4003f2:	429c      	cmp	r4, r3
  4003f4:	f000 80c6 	beq.w	400584 <mcan_init+0x1c8>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
  4003f8:	f240 7377 	movw	r3, #1911	; 0x777
  4003fc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
  400400:	2307      	movs	r3, #7
  400402:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400406:	4b7b      	ldr	r3, [pc, #492]	; (4005f4 <mcan_init+0x238>)
  400408:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  40040a:	f640 1333 	movw	r3, #2355	; 0x933
  40040e:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400410:	7beb      	ldrb	r3, [r5, #15]
  400412:	021b      	lsls	r3, r3, #8
  400414:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  400418:	7c2a      	ldrb	r2, [r5, #16]
  40041a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  40041e:	4313      	orrs	r3, r2
  400420:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  400422:	7bab      	ldrb	r3, [r5, #14]
  400424:	b11b      	cbz	r3, 40042e <mcan_init+0x72>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  400426:	68e3      	ldr	r3, [r4, #12]
  400428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40042c:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  40042e:	6962      	ldr	r2, [r4, #20]
  400430:	786b      	ldrb	r3, [r5, #1]
  400432:	4313      	orrs	r3, r2
  400434:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400436:	78ab      	ldrb	r3, [r5, #2]
  400438:	b11b      	cbz	r3, 400442 <mcan_init+0x86>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  40043a:	69a3      	ldr	r3, [r4, #24]
  40043c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400440:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  400442:	796b      	ldrb	r3, [r5, #5]
  400444:	b91b      	cbnz	r3, 40044e <mcan_init+0x92>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400446:	69a3      	ldr	r3, [r4, #24]
  400448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40044c:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  40044e:	79ab      	ldrb	r3, [r5, #6]
  400450:	b11b      	cbz	r3, 40045a <mcan_init+0x9e>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400452:	69a3      	ldr	r3, [r4, #24]
  400454:	f043 0310 	orr.w	r3, r3, #16
  400458:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  40045a:	7a2b      	ldrb	r3, [r5, #8]
  40045c:	041b      	lsls	r3, r3, #16
  40045e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400462:	f043 0301 	orr.w	r3, r3, #1
  400466:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400468:	7b2b      	ldrb	r3, [r5, #12]
  40046a:	7b6a      	ldrb	r2, [r5, #13]
  40046c:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  40046e:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  400470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400474:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400476:	7c6b      	ldrb	r3, [r5, #17]
  400478:	011b      	lsls	r3, r3, #4
  40047a:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  40047e:	7caa      	ldrb	r2, [r5, #18]
  400480:	0092      	lsls	r2, r2, #2
  400482:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400486:	4313      	orrs	r3, r2
  400488:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  40048c:	7ceb      	ldrb	r3, [r5, #19]
  40048e:	b12b      	cbz	r3, 40049c <mcan_init+0xe0>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400490:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400494:	f043 0302 	orr.w	r3, r3, #2
  400498:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  40049c:	7d2b      	ldrb	r3, [r5, #20]
  40049e:	b12b      	cbz	r3, 4004ac <mcan_init+0xf0>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  4004a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  4004a4:	f043 0301 	orr.w	r3, r3, #1
  4004a8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  4004ac:	69ab      	ldr	r3, [r5, #24]
  4004ae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  4004b2:	7f2b      	ldrb	r3, [r5, #28]
  4004b4:	b12b      	cbz	r3, 4004c2 <mcan_init+0x106>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  4004b6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  4004ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4004be:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  4004c2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  4004c6:	7f6b      	ldrb	r3, [r5, #29]
  4004c8:	061b      	lsls	r3, r3, #24
  4004ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  4004ce:	4313      	orrs	r3, r2
  4004d0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  4004d4:	7fab      	ldrb	r3, [r5, #30]
  4004d6:	b12b      	cbz	r3, 4004e4 <mcan_init+0x128>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  4004d8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  4004dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4004e0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  4004e4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  4004e8:	7feb      	ldrb	r3, [r5, #31]
  4004ea:	061b      	lsls	r3, r3, #24
  4004ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  4004f0:	4313      	orrs	r3, r2
  4004f2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  4004f6:	f895 3020 	ldrb.w	r3, [r5, #32]
  4004fa:	b12b      	cbz	r3, 400508 <mcan_init+0x14c>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  4004fc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  400500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400504:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400508:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  40050c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  400510:	061b      	lsls	r3, r3, #24
  400512:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400516:	4313      	orrs	r3, r2
  400518:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  40051c:	2303      	movs	r3, #3
  40051e:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400520:	f04f 33ff 	mov.w	r3, #4294967295
  400524:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400528:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  40052c:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  40052e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400532:	4931      	ldr	r1, [pc, #196]	; (4005f8 <mcan_init+0x23c>)
  400534:	4011      	ands	r1, r2
  400536:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  40053a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  40053e:	492f      	ldr	r1, [pc, #188]	; (4005fc <mcan_init+0x240>)
  400540:	4011      	ands	r1, r2
  400542:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400546:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  40054a:	492d      	ldr	r1, [pc, #180]	; (400600 <mcan_init+0x244>)
  40054c:	4011      	ands	r1, r2
  40054e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400552:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400556:	492b      	ldr	r1, [pc, #172]	; (400604 <mcan_init+0x248>)
  400558:	4011      	ands	r1, r2
  40055a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  40055e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400562:	4929      	ldr	r1, [pc, #164]	; (400608 <mcan_init+0x24c>)
  400564:	4011      	ands	r1, r2
  400566:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  40056a:	4828      	ldr	r0, [pc, #160]	; (40060c <mcan_init+0x250>)
  40056c:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  40056e:	4928      	ldr	r1, [pc, #160]	; (400610 <mcan_init+0x254>)
  400570:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400572:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400576:	4927      	ldr	r1, [pc, #156]	; (400614 <mcan_init+0x258>)
  400578:	400a      	ands	r2, r1
  40057a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  40057e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400582:	e739      	b.n	4003f8 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400584:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400588:	4923      	ldr	r1, [pc, #140]	; (400618 <mcan_init+0x25c>)
  40058a:	4011      	ands	r1, r2
  40058c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  400590:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400594:	4921      	ldr	r1, [pc, #132]	; (40061c <mcan_init+0x260>)
  400596:	4011      	ands	r1, r2
  400598:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  40059c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  4005a0:	491f      	ldr	r1, [pc, #124]	; (400620 <mcan_init+0x264>)
  4005a2:	4011      	ands	r1, r2
  4005a4:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  4005a8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  4005ac:	491d      	ldr	r1, [pc, #116]	; (400624 <mcan_init+0x268>)
  4005ae:	4011      	ands	r1, r2
  4005b0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  4005b4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  4005b8:	491b      	ldr	r1, [pc, #108]	; (400628 <mcan_init+0x26c>)
  4005ba:	4011      	ands	r1, r2
  4005bc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  4005c0:	481a      	ldr	r0, [pc, #104]	; (40062c <mcan_init+0x270>)
  4005c2:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  4005c4:	4912      	ldr	r1, [pc, #72]	; (400610 <mcan_init+0x254>)
  4005c6:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  4005c8:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  4005cc:	4918      	ldr	r1, [pc, #96]	; (400630 <mcan_init+0x274>)
  4005ce:	400a      	ands	r2, r1
  4005d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  4005d4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  4005d8:	e70e      	b.n	4003f8 <mcan_init+0x3c>
  4005da:	bf00      	nop
  4005dc:	00400bb9 	.word	0x00400bb9
  4005e0:	00400add 	.word	0x00400add
  4005e4:	00400ba5 	.word	0x00400ba5
  4005e8:	0040038d 	.word	0x0040038d
  4005ec:	40030000 	.word	0x40030000
  4005f0:	40034000 	.word	0x40034000
  4005f4:	06020a07 	.word	0x06020a07
  4005f8:	20400db4 	.word	0x20400db4
  4005fc:	20400b64 	.word	0x20400b64
  400600:	20400b74 	.word	0x20400b74
  400604:	20400c94 	.word	0x20400c94
  400608:	20400a44 	.word	0x20400a44
  40060c:	20400eb4 	.word	0x20400eb4
  400610:	02020000 	.word	0x02020000
  400614:	20400fd4 	.word	0x20400fd4
  400618:	20401364 	.word	0x20401364
  40061c:	20401114 	.word	0x20401114
  400620:	20401124 	.word	0x20401124
  400624:	20401244 	.word	0x20401244
  400628:	20400ff4 	.word	0x20400ff4
  40062c:	20401464 	.word	0x20401464
  400630:	20401584 	.word	0x20401584

00400634 <mcan_set_baudrate>:
 *
 * \param[in]  hw          Pointer to the MCAN module instance
 * \param[in]  baudrate    MCAN baudrate
 */
void mcan_set_baudrate(Mcan *hw, uint32_t baudrate)
{
  400634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400636:	4605      	mov	r5, r0
  400638:	460f      	mov	r7, r1
//@{
static inline uint32_t genclk_get_frequency_hz(uint32_t ul_id)
{
	uint32_t pck_source,clock_config;
	uint32_t pck_freq = 0;
	pck_source = (PMC->PMC_PCK[ul_id] & PMC_PCK_CSS_Msk) >> PMC_PCK_CSS_Pos;
  40063a:	4b2d      	ldr	r3, [pc, #180]	; (4006f0 <mcan_set_baudrate+0xbc>)
  40063c:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  40063e:	f006 0607 	and.w	r6, r6, #7
	switch(pck_source)
  400642:	2e04      	cmp	r6, #4
  400644:	d84f      	bhi.n	4006e6 <mcan_set_baudrate+0xb2>
  400646:	e8df f006 	tbb	[pc, r6]
  40064a:	2219      	.short	0x2219
  40064c:	4622      	.short	0x4622
  40064e:	03          	.byte	0x03
  40064f:	00          	.byte	0x00
			break;
		case PMC_PCK_CSS_UPLL_CLK:
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
			break;
		case PMC_PCK_CSS_MCK:
			pck_freq = sysclk_get_main_hz();
  400650:	4c28      	ldr	r4, [pc, #160]	; (4006f4 <mcan_set_baudrate+0xc0>)
			break;
		default:
			break;
	}
	pck_freq /= ((PMC->PMC_PCK[ul_id] & PMC_PCK_PRES_Msk) >> PMC_PCK_PRES_Pos)+1;
  400652:	4b27      	ldr	r3, [pc, #156]	; (4006f0 <mcan_set_baudrate+0xbc>)
  400654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400656:	f3c3 1307 	ubfx	r3, r3, #4, #8
  40065a:	3301      	adds	r3, #1
  40065c:	fbb4 f3f3 	udiv	r3, r4, r3
	uint32_t mcan_nbtp_nbrp_value;
	uint32_t mcan_nbtp_nsgw_value = 3, mcan_nbtp_ntseg1_value = 10, mcan_nbtp_ntseg2_value = 7;

	gclk_mcan_value = genclk_get_frequency_hz(PMC_PCK_5);

	mcan_nbtp_nbrp_value = gclk_mcan_value / baudrate / (3 + mcan_nbtp_ntseg1_value + mcan_nbtp_ntseg2_value);
  400660:	fbb3 f3f7 	udiv	r3, r3, r7
  400664:	4a24      	ldr	r2, [pc, #144]	; (4006f8 <mcan_set_baudrate+0xc4>)
  400666:	fba2 2303 	umull	r2, r3, r2, r3
  40066a:	091b      	lsrs	r3, r3, #4
#if (SAMV71B || SAME70B || SAMV70B)
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(mcan_nbtp_nbrp_value - 1) |
  40066c:	3b01      	subs	r3, #1
  40066e:	4a23      	ldr	r2, [pc, #140]	; (4006fc <mcan_set_baudrate+0xc8>)
  400670:	ea02 4303 	and.w	r3, r2, r3, lsl #16
			MCAN_NBTP_NSJW(mcan_nbtp_nsgw_value) |
			MCAN_NBTP_NTSEG1(mcan_nbtp_ntseg1_value) |
  400674:	4a22      	ldr	r2, [pc, #136]	; (400700 <mcan_set_baudrate+0xcc>)
  400676:	431a      	orrs	r2, r3
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(mcan_nbtp_nbrp_value - 1) |
  400678:	61ea      	str	r2, [r5, #28]
  40067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pmc_get_slck_config())
  40067c:	4b21      	ldr	r3, [pc, #132]	; (400704 <mcan_set_baudrate+0xd0>)
  40067e:	4798      	blx	r3
  400680:	2800      	cmp	r0, #0
				pck_freq = OSC_SLCK_32K_XTAL_HZ;
  400682:	bf14      	ite	ne
  400684:	f44f 44fa 	movne.w	r4, #32000	; 0x7d00
  400688:	f44f 4400 	moveq.w	r4, #32768	; 0x8000
  40068c:	e7e1      	b.n	400652 <mcan_set_baudrate+0x1e>
			clock_config = pmc_get_mainck_config();
  40068e:	4b1e      	ldr	r3, [pc, #120]	; (400708 <mcan_set_baudrate+0xd4>)
  400690:	4798      	blx	r3
			if (clock_config & CKGR_MOR_MOSCSEL)
  400692:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  400696:	d00e      	beq.n	4006b6 <mcan_set_baudrate+0x82>
				switch(clock_config & CKGR_MOR_MOSCRCF_Msk)
  400698:	f000 0070 	and.w	r0, r0, #112	; 0x70
  40069c:	2810      	cmp	r0, #16
  40069e:	d006      	beq.n	4006ae <mcan_set_baudrate+0x7a>
  4006a0:	2820      	cmp	r0, #32
  4006a2:	d006      	beq.n	4006b2 <mcan_set_baudrate+0x7e>
	uint32_t pck_freq = 0;
  4006a4:	2800      	cmp	r0, #0
  4006a6:	4c19      	ldr	r4, [pc, #100]	; (40070c <mcan_set_baudrate+0xd8>)
  4006a8:	bf18      	it	ne
  4006aa:	2400      	movne	r4, #0
  4006ac:	e004      	b.n	4006b8 <mcan_set_baudrate+0x84>
						pck_freq = OSC_MAINCK_8M_RC_HZ;
  4006ae:	4c18      	ldr	r4, [pc, #96]	; (400710 <mcan_set_baudrate+0xdc>)
  4006b0:	e002      	b.n	4006b8 <mcan_set_baudrate+0x84>
						pck_freq = OSC_MAINCK_12M_RC_HZ;
  4006b2:	4c18      	ldr	r4, [pc, #96]	; (400714 <mcan_set_baudrate+0xe0>)
  4006b4:	e000      	b.n	4006b8 <mcan_set_baudrate+0x84>
				pck_freq = OSC_MAINCK_XTAL_HZ;
  4006b6:	4c17      	ldr	r4, [pc, #92]	; (400714 <mcan_set_baudrate+0xe0>)
			if (pck_source == PMC_PCK_CSS_PLLA_CLK)
  4006b8:	2e02      	cmp	r6, #2
  4006ba:	d1ca      	bne.n	400652 <mcan_set_baudrate+0x1e>
				clock_config = pmc_get_pllack_config();
  4006bc:	4b16      	ldr	r3, [pc, #88]	; (400718 <mcan_set_baudrate+0xe4>)
  4006be:	4798      	blx	r3
				if ((clock_config & CKGR_PLLAR_DIVA_Msk) == 0)
  4006c0:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
  4006c4:	d011      	beq.n	4006ea <mcan_set_baudrate+0xb6>
				pck_freq *= ((((clock_config & CKGR_PLLAR_MULA_Msk)>>CKGR_PLLAR_MULA_Pos) + 1)/(clock_config & CKGR_PLLAR_DIVA_Msk));
  4006c6:	f3c0 430a 	ubfx	r3, r0, #16, #11
  4006ca:	3301      	adds	r3, #1
  4006cc:	fbb3 f3f2 	udiv	r3, r3, r2
  4006d0:	fb03 f404 	mul.w	r4, r3, r4
  4006d4:	e7bd      	b.n	400652 <mcan_set_baudrate+0x1e>
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
  4006d6:	4b11      	ldr	r3, [pc, #68]	; (40071c <mcan_set_baudrate+0xe8>)
  4006d8:	4798      	blx	r3
  4006da:	4c11      	ldr	r4, [pc, #68]	; (400720 <mcan_set_baudrate+0xec>)
  4006dc:	4b11      	ldr	r3, [pc, #68]	; (400724 <mcan_set_baudrate+0xf0>)
  4006de:	2800      	cmp	r0, #0
  4006e0:	bf18      	it	ne
  4006e2:	461c      	movne	r4, r3
  4006e4:	e7b5      	b.n	400652 <mcan_set_baudrate+0x1e>
	uint32_t pck_freq = 0;
  4006e6:	2400      	movs	r4, #0
  4006e8:	e7b3      	b.n	400652 <mcan_set_baudrate+0x1e>
					return 0;
  4006ea:	2300      	movs	r3, #0
  4006ec:	e7b8      	b.n	400660 <mcan_set_baudrate+0x2c>
  4006ee:	bf00      	nop
  4006f0:	400e0600 	.word	0x400e0600
  4006f4:	11e1a300 	.word	0x11e1a300
  4006f8:	cccccccd 	.word	0xcccccccd
  4006fc:	01ff0000 	.word	0x01ff0000
  400700:	06000a07 	.word	0x06000a07
  400704:	00400b19 	.word	0x00400b19
  400708:	00400b29 	.word	0x00400b29
  40070c:	003d0900 	.word	0x003d0900
  400710:	007a1200 	.word	0x007a1200
  400714:	00b71b00 	.word	0x00b71b00
  400718:	00400b45 	.word	0x00400b45
  40071c:	00400b59 	.word	0x00400b59
  400720:	1c9c3800 	.word	0x1c9c3800
  400724:	0e4e1c00 	.word	0x0e4e1c00

00400728 <mcan_fd_set_baudrate>:
 *
 * \param[in]  hw          Pointer to the MCAN_FD module instance
 * \param[in]  baudrate    MCAN_FD baudrate
 */
void mcan_fd_set_baudrate(Mcan *hw, uint32_t baudrate)
{
  400728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40072a:	4604      	mov	r4, r0
  40072c:	460f      	mov	r7, r1
	pck_source = (PMC->PMC_PCK[ul_id] & PMC_PCK_CSS_Msk) >> PMC_PCK_CSS_Pos;
  40072e:	4b2d      	ldr	r3, [pc, #180]	; (4007e4 <mcan_fd_set_baudrate+0xbc>)
  400730:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  400732:	f006 0607 	and.w	r6, r6, #7
	switch(pck_source)
  400736:	2e04      	cmp	r6, #4
  400738:	d850      	bhi.n	4007dc <mcan_fd_set_baudrate+0xb4>
  40073a:	e8df f006 	tbb	[pc, r6]
  40073e:	231a      	.short	0x231a
  400740:	4723      	.short	0x4723
  400742:	03          	.byte	0x03
  400743:	00          	.byte	0x00
			pck_freq = sysclk_get_main_hz();
  400744:	4d28      	ldr	r5, [pc, #160]	; (4007e8 <mcan_fd_set_baudrate+0xc0>)
	pck_freq /= ((PMC->PMC_PCK[ul_id] & PMC_PCK_PRES_Msk) >> PMC_PCK_PRES_Pos)+1;
  400746:	4b27      	ldr	r3, [pc, #156]	; (4007e4 <mcan_fd_set_baudrate+0xbc>)
  400748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  40074a:	f3c3 1307 	ubfx	r3, r3, #4, #8
  40074e:	3301      	adds	r3, #1
  400750:	fbb5 f3f3 	udiv	r3, r5, r3
	uint32_t mcan_fd_dbtp_dbrp_value;
	uint32_t mcan_fd_dbtp_dsgw_value = 3, mcan_fd_dbtp_dtseg1_value = 9, mcan_fd_dbtp_dtseg2_value = 3;

	gclk_mcan_fd_value = genclk_get_frequency_hz(PMC_PCK_5);
	
	mcan_fd_dbtp_dbrp_value = gclk_mcan_fd_value / baudrate / (3 + mcan_fd_dbtp_dtseg1_value + mcan_fd_dbtp_dtseg2_value);
  400754:	fbb3 f3f7 	udiv	r3, r3, r7
  400758:	4a24      	ldr	r2, [pc, #144]	; (4007ec <mcan_fd_set_baudrate+0xc4>)
  40075a:	fba2 2303 	umull	r2, r3, r2, r3
  40075e:	08db      	lsrs	r3, r3, #3
#if (SAMV71B || SAME70B || SAMV70B)
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(mcan_fd_dbtp_dbrp_value - 1) |
  400760:	3b01      	subs	r3, #1
  400762:	041b      	lsls	r3, r3, #16
  400764:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
			MCAN_DBTP_DSJW(mcan_fd_dbtp_dsgw_value) |
			MCAN_DBTP_DTSEG1(mcan_fd_dbtp_dtseg1_value) |
  400768:	f640 1233 	movw	r2, #2355	; 0x933
  40076c:	431a      	orrs	r2, r3
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(mcan_fd_dbtp_dbrp_value - 1) |
  40076e:	60e2      	str	r2, [r4, #12]
  400770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pmc_get_slck_config())
  400772:	4b1f      	ldr	r3, [pc, #124]	; (4007f0 <mcan_fd_set_baudrate+0xc8>)
  400774:	4798      	blx	r3
  400776:	2800      	cmp	r0, #0
				pck_freq = OSC_SLCK_32K_XTAL_HZ;
  400778:	bf14      	ite	ne
  40077a:	f44f 45fa 	movne.w	r5, #32000	; 0x7d00
  40077e:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
  400782:	e7e0      	b.n	400746 <mcan_fd_set_baudrate+0x1e>
			clock_config = pmc_get_mainck_config();
  400784:	4b1b      	ldr	r3, [pc, #108]	; (4007f4 <mcan_fd_set_baudrate+0xcc>)
  400786:	4798      	blx	r3
			if (clock_config & CKGR_MOR_MOSCSEL)
  400788:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  40078c:	d00e      	beq.n	4007ac <mcan_fd_set_baudrate+0x84>
				switch(clock_config & CKGR_MOR_MOSCRCF_Msk)
  40078e:	f000 0070 	and.w	r0, r0, #112	; 0x70
  400792:	2810      	cmp	r0, #16
  400794:	d006      	beq.n	4007a4 <mcan_fd_set_baudrate+0x7c>
  400796:	2820      	cmp	r0, #32
  400798:	d006      	beq.n	4007a8 <mcan_fd_set_baudrate+0x80>
	uint32_t pck_freq = 0;
  40079a:	2800      	cmp	r0, #0
  40079c:	4d16      	ldr	r5, [pc, #88]	; (4007f8 <mcan_fd_set_baudrate+0xd0>)
  40079e:	bf18      	it	ne
  4007a0:	2500      	movne	r5, #0
  4007a2:	e004      	b.n	4007ae <mcan_fd_set_baudrate+0x86>
						pck_freq = OSC_MAINCK_8M_RC_HZ;
  4007a4:	4d15      	ldr	r5, [pc, #84]	; (4007fc <mcan_fd_set_baudrate+0xd4>)
  4007a6:	e002      	b.n	4007ae <mcan_fd_set_baudrate+0x86>
						pck_freq = OSC_MAINCK_12M_RC_HZ;
  4007a8:	4d15      	ldr	r5, [pc, #84]	; (400800 <mcan_fd_set_baudrate+0xd8>)
  4007aa:	e000      	b.n	4007ae <mcan_fd_set_baudrate+0x86>
				pck_freq = OSC_MAINCK_XTAL_HZ;
  4007ac:	4d14      	ldr	r5, [pc, #80]	; (400800 <mcan_fd_set_baudrate+0xd8>)
			if (pck_source == PMC_PCK_CSS_PLLA_CLK)
  4007ae:	2e02      	cmp	r6, #2
  4007b0:	d1c9      	bne.n	400746 <mcan_fd_set_baudrate+0x1e>
				clock_config = pmc_get_pllack_config();
  4007b2:	4b14      	ldr	r3, [pc, #80]	; (400804 <mcan_fd_set_baudrate+0xdc>)
  4007b4:	4798      	blx	r3
				if ((clock_config & CKGR_PLLAR_DIVA_Msk) == 0)
  4007b6:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
  4007ba:	d011      	beq.n	4007e0 <mcan_fd_set_baudrate+0xb8>
				pck_freq *= ((((clock_config & CKGR_PLLAR_MULA_Msk)>>CKGR_PLLAR_MULA_Pos) + 1)/(clock_config & CKGR_PLLAR_DIVA_Msk));
  4007bc:	f3c0 430a 	ubfx	r3, r0, #16, #11
  4007c0:	3301      	adds	r3, #1
  4007c2:	fbb3 f3f2 	udiv	r3, r3, r2
  4007c6:	fb03 f505 	mul.w	r5, r3, r5
  4007ca:	e7bc      	b.n	400746 <mcan_fd_set_baudrate+0x1e>
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
  4007cc:	4b0e      	ldr	r3, [pc, #56]	; (400808 <mcan_fd_set_baudrate+0xe0>)
  4007ce:	4798      	blx	r3
  4007d0:	4d0e      	ldr	r5, [pc, #56]	; (40080c <mcan_fd_set_baudrate+0xe4>)
  4007d2:	4b0f      	ldr	r3, [pc, #60]	; (400810 <mcan_fd_set_baudrate+0xe8>)
  4007d4:	2800      	cmp	r0, #0
  4007d6:	bf18      	it	ne
  4007d8:	461d      	movne	r5, r3
  4007da:	e7b4      	b.n	400746 <mcan_fd_set_baudrate+0x1e>
	uint32_t pck_freq = 0;
  4007dc:	2500      	movs	r5, #0
  4007de:	e7b2      	b.n	400746 <mcan_fd_set_baudrate+0x1e>
					return 0;
  4007e0:	2300      	movs	r3, #0
  4007e2:	e7b7      	b.n	400754 <mcan_fd_set_baudrate+0x2c>
  4007e4:	400e0600 	.word	0x400e0600
  4007e8:	11e1a300 	.word	0x11e1a300
  4007ec:	88888889 	.word	0x88888889
  4007f0:	00400b19 	.word	0x00400b19
  4007f4:	00400b29 	.word	0x00400b29
  4007f8:	003d0900 	.word	0x003d0900
  4007fc:	007a1200 	.word	0x007a1200
  400800:	00b71b00 	.word	0x00b71b00
  400804:	00400b45 	.word	0x00400b45
  400808:	00400b59 	.word	0x00400b59
  40080c:	1c9c3800 	.word	0x1c9c3800
  400810:	0e4e1c00 	.word	0x0e4e1c00

00400814 <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400814:	6802      	ldr	r2, [r0, #0]
  400816:	6993      	ldr	r3, [r2, #24]
  400818:	f023 0301 	bic.w	r3, r3, #1
  40081c:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  40081e:	6802      	ldr	r2, [r0, #0]
  400820:	6993      	ldr	r3, [r2, #24]
  400822:	f013 0f01 	tst.w	r3, #1
  400826:	d1fb      	bne.n	400820 <mcan_start+0xc>
}
  400828:	4770      	bx	lr

0040082a <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  40082a:	6802      	ldr	r2, [r0, #0]
  40082c:	6993      	ldr	r3, [r2, #24]
  40082e:	f043 0301 	orr.w	r3, r3, #1
  400832:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400834:	6802      	ldr	r2, [r0, #0]
  400836:	6993      	ldr	r3, [r2, #24]
  400838:	f013 0f01 	tst.w	r3, #1
  40083c:	d0fb      	beq.n	400836 <mcan_stop+0xc>
}
  40083e:	4770      	bx	lr

00400840 <mcan_enable_fd_mode>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_enable_fd_mode(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400840:	6802      	ldr	r2, [r0, #0]
  400842:	6993      	ldr	r3, [r2, #24]
  400844:	f043 0301 	orr.w	r3, r3, #1
  400848:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  40084a:	6802      	ldr	r2, [r0, #0]
  40084c:	6993      	ldr	r3, [r2, #24]
  40084e:	f013 0f01 	tst.w	r3, #1
  400852:	d0fb      	beq.n	40084c <mcan_enable_fd_mode+0xc>
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400854:	6993      	ldr	r3, [r2, #24]
  400856:	f043 0302 	orr.w	r3, r3, #2
  40085a:	6193      	str	r3, [r2, #24]
#if (SAMV71B || SAME70B || SAMV70B)
	module_inst->hw->MCAN_CCCR |= (MCAN_CCCR_FDOE | MCAN_CCCR_BRSE);
  40085c:	6802      	ldr	r2, [r0, #0]
  40085e:	6993      	ldr	r3, [r2, #24]
  400860:	f443 7340 	orr.w	r3, r3, #768	; 0x300
  400864:	6193      	str	r3, [r2, #24]
  400866:	4770      	bx	lr

00400868 <mcan_set_rx_standard_filter>:
 */
enum status_code mcan_set_rx_standard_filter(
		struct mcan_module *const module_inst,
		struct mcan_standard_message_filter_element *sd_filter, uint32_t index)
{
	if (module_inst->hw == MCAN0) {
  400868:	6803      	ldr	r3, [r0, #0]
  40086a:	480a      	ldr	r0, [pc, #40]	; (400894 <mcan_set_rx_standard_filter+0x2c>)
  40086c:	4283      	cmp	r3, r0
  40086e:	d008      	beq.n	400882 <mcan_set_rx_standard_filter+0x1a>
		mcan0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400870:	4809      	ldr	r0, [pc, #36]	; (400898 <mcan_set_rx_standard_filter+0x30>)
  400872:	4283      	cmp	r3, r0
  400874:	d10b      	bne.n	40088e <mcan_set_rx_standard_filter+0x26>
		mcan1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  400876:	6809      	ldr	r1, [r1, #0]
  400878:	4b08      	ldr	r3, [pc, #32]	; (40089c <mcan_set_rx_standard_filter+0x34>)
  40087a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return STATUS_OK;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
		mcan0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  400882:	6809      	ldr	r1, [r1, #0]
  400884:	4b06      	ldr	r3, [pc, #24]	; (4008a0 <mcan_set_rx_standard_filter+0x38>)
  400886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return STATUS_OK;
  40088a:	2000      	movs	r0, #0
  40088c:	4770      	bx	lr
	}
	return ERR_INVALID_ARG;
  40088e:	f06f 0007 	mvn.w	r0, #7
}
  400892:	4770      	bx	lr
  400894:	40030000 	.word	0x40030000
  400898:	40034000 	.word	0x40034000
  40089c:	20401364 	.word	0x20401364
  4008a0:	20400db4 	.word	0x20400db4

004008a4 <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  4008a4:	b510      	push	{r4, lr}
  4008a6:	460c      	mov	r4, r1
	if (module_inst->hw == MCAN0) {
  4008a8:	6803      	ldr	r3, [r0, #0]
  4008aa:	490f      	ldr	r1, [pc, #60]	; (4008e8 <mcan_get_rx_fifo_0_element+0x44>)
  4008ac:	428b      	cmp	r3, r1
  4008ae:	d00d      	beq.n	4008cc <mcan_get_rx_fifo_0_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  4008b0:	490e      	ldr	r1, [pc, #56]	; (4008ec <mcan_get_rx_fifo_0_element+0x48>)
  4008b2:	428b      	cmp	r3, r1
  4008b4:	d115      	bne.n	4008e2 <mcan_get_rx_fifo_0_element+0x3e>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  4008b6:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
  4008ba:	2248      	movs	r2, #72	; 0x48
  4008bc:	4b0c      	ldr	r3, [pc, #48]	; (4008f0 <mcan_get_rx_fifo_0_element+0x4c>)
  4008be:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4008c2:	4620      	mov	r0, r4
  4008c4:	4b0b      	ldr	r3, [pc, #44]	; (4008f4 <mcan_get_rx_fifo_0_element+0x50>)
  4008c6:	4798      	blx	r3
		return STATUS_OK;
  4008c8:	2000      	movs	r0, #0
  4008ca:	bd10      	pop	{r4, pc}
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  4008cc:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
  4008d0:	2248      	movs	r2, #72	; 0x48
  4008d2:	4b09      	ldr	r3, [pc, #36]	; (4008f8 <mcan_get_rx_fifo_0_element+0x54>)
  4008d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4008d8:	4620      	mov	r0, r4
  4008da:	4b06      	ldr	r3, [pc, #24]	; (4008f4 <mcan_get_rx_fifo_0_element+0x50>)
  4008dc:	4798      	blx	r3
		return STATUS_OK;
  4008de:	2000      	movs	r0, #0
  4008e0:	bd10      	pop	{r4, pc}
	}
	return ERR_INVALID_ARG;
  4008e2:	f06f 0007 	mvn.w	r0, #7
}
  4008e6:	bd10      	pop	{r4, pc}
  4008e8:	40030000 	.word	0x40030000
  4008ec:	40034000 	.word	0x40034000
  4008f0:	20401124 	.word	0x20401124
  4008f4:	00401f31 	.word	0x00401f31
  4008f8:	20400b74 	.word	0x20400b74

004008fc <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  4008fc:	b470      	push	{r4, r5, r6}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  4008fe:	6803      	ldr	r3, [r0, #0]
  400900:	481a      	ldr	r0, [pc, #104]	; (40096c <mcan_set_tx_buffer_element+0x70>)
  400902:	4283      	cmp	r3, r0
  400904:	d019      	beq.n	40093a <mcan_set_tx_buffer_element+0x3e>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400906:	481a      	ldr	r0, [pc, #104]	; (400970 <mcan_set_tx_buffer_element+0x74>)
  400908:	4283      	cmp	r3, r0
  40090a:	d12c      	bne.n	400966 <mcan_set_tx_buffer_element+0x6a>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  40090c:	680e      	ldr	r6, [r1, #0]
  40090e:	4819      	ldr	r0, [pc, #100]	; (400974 <mcan_set_tx_buffer_element+0x78>)
  400910:	00d4      	lsls	r4, r2, #3
  400912:	18a3      	adds	r3, r4, r2
  400914:	00db      	lsls	r3, r3, #3
  400916:	18c5      	adds	r5, r0, r3
  400918:	50c6      	str	r6, [r0, r3]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  40091a:	684b      	ldr	r3, [r1, #4]
  40091c:	606b      	str	r3, [r5, #4]
  40091e:	1dcb      	adds	r3, r1, #7
  400920:	462a      	mov	r2, r5
  400922:	3207      	adds	r2, #7
  400924:	f101 0047 	add.w	r0, r1, #71	; 0x47
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  400928:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40092c:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400930:	4283      	cmp	r3, r0
  400932:	d1f9      	bne.n	400928 <mcan_set_tx_buffer_element+0x2c>
		}
		return STATUS_OK;
  400934:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400936:	bc70      	pop	{r4, r5, r6}
  400938:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  40093a:	680e      	ldr	r6, [r1, #0]
  40093c:	480e      	ldr	r0, [pc, #56]	; (400978 <mcan_set_tx_buffer_element+0x7c>)
  40093e:	00d4      	lsls	r4, r2, #3
  400940:	18a3      	adds	r3, r4, r2
  400942:	00db      	lsls	r3, r3, #3
  400944:	18c5      	adds	r5, r0, r3
  400946:	50c6      	str	r6, [r0, r3]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400948:	684b      	ldr	r3, [r1, #4]
  40094a:	606b      	str	r3, [r5, #4]
  40094c:	1dcb      	adds	r3, r1, #7
  40094e:	462a      	mov	r2, r5
  400950:	3207      	adds	r2, #7
  400952:	f101 0047 	add.w	r0, r1, #71	; 0x47
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  400956:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40095a:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  40095e:	4283      	cmp	r3, r0
  400960:	d1f9      	bne.n	400956 <mcan_set_tx_buffer_element+0x5a>
		return STATUS_OK;
  400962:	2000      	movs	r0, #0
  400964:	e7e7      	b.n	400936 <mcan_set_tx_buffer_element+0x3a>
	return ERR_INVALID_ARG;
  400966:	f06f 0007 	mvn.w	r0, #7
  40096a:	e7e4      	b.n	400936 <mcan_set_tx_buffer_element+0x3a>
  40096c:	40030000 	.word	0x40030000
  400970:	40034000 	.word	0x40034000
  400974:	20401464 	.word	0x20401464
  400978:	20400eb4 	.word	0x20400eb4

0040097c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40097c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40097e:	4770      	bx	lr

00400980 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400980:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400982:	4770      	bx	lr

00400984 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400984:	2803      	cmp	r0, #3
  400986:	d011      	beq.n	4009ac <pmc_mck_set_division+0x28>
  400988:	2804      	cmp	r0, #4
  40098a:	d012      	beq.n	4009b2 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40098c:	2802      	cmp	r0, #2
  40098e:	bf0c      	ite	eq
  400990:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400994:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400996:	4a08      	ldr	r2, [pc, #32]	; (4009b8 <pmc_mck_set_division+0x34>)
  400998:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40099a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40099e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4009a0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4009a2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009a4:	f013 0f08 	tst.w	r3, #8
  4009a8:	d0fb      	beq.n	4009a2 <pmc_mck_set_division+0x1e>
}
  4009aa:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4009ac:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4009b0:	e7f1      	b.n	400996 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4009b2:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4009b6:	e7ee      	b.n	400996 <pmc_mck_set_division+0x12>
  4009b8:	400e0600 	.word	0x400e0600

004009bc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4009bc:	4a17      	ldr	r2, [pc, #92]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  4009be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4009c4:	4318      	orrs	r0, r3
  4009c6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009ca:	f013 0f08 	tst.w	r3, #8
  4009ce:	d10a      	bne.n	4009e6 <pmc_switch_mck_to_pllack+0x2a>
  4009d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009d4:	4911      	ldr	r1, [pc, #68]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  4009d6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009d8:	f012 0f08 	tst.w	r2, #8
  4009dc:	d103      	bne.n	4009e6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009de:	3b01      	subs	r3, #1
  4009e0:	d1f9      	bne.n	4009d6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4009e2:	2001      	movs	r0, #1
  4009e4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4009e6:	4a0d      	ldr	r2, [pc, #52]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  4009e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009ea:	f023 0303 	bic.w	r3, r3, #3
  4009ee:	f043 0302 	orr.w	r3, r3, #2
  4009f2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009f6:	f013 0f08 	tst.w	r3, #8
  4009fa:	d10a      	bne.n	400a12 <pmc_switch_mck_to_pllack+0x56>
  4009fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a00:	4906      	ldr	r1, [pc, #24]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  400a02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a04:	f012 0f08 	tst.w	r2, #8
  400a08:	d105      	bne.n	400a16 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400a0a:	3b01      	subs	r3, #1
  400a0c:	d1f9      	bne.n	400a02 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400a0e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400a10:	4770      	bx	lr
	return 0;
  400a12:	2000      	movs	r0, #0
  400a14:	4770      	bx	lr
  400a16:	2000      	movs	r0, #0
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	400e0600 	.word	0x400e0600

00400a20 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a20:	b9a0      	cbnz	r0, 400a4c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a22:	480e      	ldr	r0, [pc, #56]	; (400a5c <pmc_switch_mainck_to_xtal+0x3c>)
  400a24:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a26:	0209      	lsls	r1, r1, #8
  400a28:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a2a:	4a0d      	ldr	r2, [pc, #52]	; (400a60 <pmc_switch_mainck_to_xtal+0x40>)
  400a2c:	401a      	ands	r2, r3
  400a2e:	4b0d      	ldr	r3, [pc, #52]	; (400a64 <pmc_switch_mainck_to_xtal+0x44>)
  400a30:	4313      	orrs	r3, r2
  400a32:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a34:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a36:	4602      	mov	r2, r0
  400a38:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a3a:	f013 0f01 	tst.w	r3, #1
  400a3e:	d0fb      	beq.n	400a38 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a40:	4a06      	ldr	r2, [pc, #24]	; (400a5c <pmc_switch_mainck_to_xtal+0x3c>)
  400a42:	6a11      	ldr	r1, [r2, #32]
  400a44:	4b08      	ldr	r3, [pc, #32]	; (400a68 <pmc_switch_mainck_to_xtal+0x48>)
  400a46:	430b      	orrs	r3, r1
  400a48:	6213      	str	r3, [r2, #32]
  400a4a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a4c:	4903      	ldr	r1, [pc, #12]	; (400a5c <pmc_switch_mainck_to_xtal+0x3c>)
  400a4e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a50:	4a06      	ldr	r2, [pc, #24]	; (400a6c <pmc_switch_mainck_to_xtal+0x4c>)
  400a52:	401a      	ands	r2, r3
  400a54:	4b06      	ldr	r3, [pc, #24]	; (400a70 <pmc_switch_mainck_to_xtal+0x50>)
  400a56:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a58:	620b      	str	r3, [r1, #32]
  400a5a:	4770      	bx	lr
  400a5c:	400e0600 	.word	0x400e0600
  400a60:	ffc8fffc 	.word	0xffc8fffc
  400a64:	00370001 	.word	0x00370001
  400a68:	01370000 	.word	0x01370000
  400a6c:	fec8fffc 	.word	0xfec8fffc
  400a70:	01370002 	.word	0x01370002

00400a74 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a74:	4b02      	ldr	r3, [pc, #8]	; (400a80 <pmc_osc_is_ready_mainck+0xc>)
  400a76:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a78:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop
  400a80:	400e0600 	.word	0x400e0600

00400a84 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a88:	4b01      	ldr	r3, [pc, #4]	; (400a90 <pmc_disable_pllack+0xc>)
  400a8a:	629a      	str	r2, [r3, #40]	; 0x28
  400a8c:	4770      	bx	lr
  400a8e:	bf00      	nop
  400a90:	400e0600 	.word	0x400e0600

00400a94 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a94:	4b02      	ldr	r3, [pc, #8]	; (400aa0 <pmc_is_locked_pllack+0xc>)
  400a96:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a98:	f000 0002 	and.w	r0, r0, #2
  400a9c:	4770      	bx	lr
  400a9e:	bf00      	nop
  400aa0:	400e0600 	.word	0x400e0600

00400aa4 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  400aa4:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  400aa8:	4b03      	ldr	r3, [pc, #12]	; (400ab8 <pmc_enable_upll_clock+0x14>)
  400aaa:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  400aac:	461a      	mov	r2, r3
  400aae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ab0:	f013 0f40 	tst.w	r3, #64	; 0x40
  400ab4:	d0fb      	beq.n	400aae <pmc_enable_upll_clock+0xa>
}
  400ab6:	4770      	bx	lr
  400ab8:	400e0600 	.word	0x400e0600

00400abc <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400abc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400ac0:	4b05      	ldr	r3, [pc, #20]	; (400ad8 <pmc_enable_periph_clk+0x1c>)
  400ac2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400ac6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400aca:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400ace:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400ad2:	2000      	movs	r0, #0
  400ad4:	4770      	bx	lr
  400ad6:	bf00      	nop
  400ad8:	400e0600 	.word	0x400e0600

00400adc <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  400adc:	f041 0102 	orr.w	r1, r1, #2
  400ae0:	4b0c      	ldr	r3, [pc, #48]	; (400b14 <pmc_switch_pck_to_pllack+0x38>)
  400ae2:	f100 0210 	add.w	r2, r0, #16
  400ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400aea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400aec:	f44f 7380 	mov.w	r3, #256	; 0x100
  400af0:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  400af4:	4202      	tst	r2, r0
  400af6:	d109      	bne.n	400b0c <pmc_switch_pck_to_pllack+0x30>
  400af8:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400afc:	4905      	ldr	r1, [pc, #20]	; (400b14 <pmc_switch_pck_to_pllack+0x38>)
  400afe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  400b00:	4202      	tst	r2, r0
  400b02:	d105      	bne.n	400b10 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  400b04:	3b01      	subs	r3, #1
  400b06:	d1fa      	bne.n	400afe <pmc_switch_pck_to_pllack+0x22>
			return 1;
  400b08:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b0a:	4770      	bx	lr
	return 0;
  400b0c:	2000      	movs	r0, #0
  400b0e:	4770      	bx	lr
  400b10:	2000      	movs	r0, #0
  400b12:	4770      	bx	lr
  400b14:	400e0600 	.word	0x400e0600

00400b18 <pmc_get_slck_config>:
 *
 * \retval Crystal Oscillator Select value.
 */
uint32_t pmc_get_slck_config(void)
{
	return (SUPC->SUPC_CR & SUPC_CR_XTALSEL);
  400b18:	4b02      	ldr	r3, [pc, #8]	; (400b24 <pmc_get_slck_config+0xc>)
  400b1a:	6818      	ldr	r0, [r3, #0]
}
  400b1c:	f000 0008 	and.w	r0, r0, #8
  400b20:	4770      	bx	lr
  400b22:	bf00      	nop
  400b24:	400e1810 	.word	0x400e1810

00400b28 <pmc_get_mainck_config>:
 *
 * \retval Main Clock Source Oscillator Selection and Main RC Oscillator Frequency Selection values.
 */
uint32_t pmc_get_mainck_config(void)
{
	return (PMC->CKGR_MOR & (CKGR_MOR_MOSCSEL | CKGR_MOR_MOSCRCF_Msk));
  400b28:	4b05      	ldr	r3, [pc, #20]	; (400b40 <pmc_get_mainck_config+0x18>)
  400b2a:	6a18      	ldr	r0, [r3, #32]
}
  400b2c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
  400b30:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
  400b34:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  400b38:	f020 008f 	bic.w	r0, r0, #143	; 0x8f
  400b3c:	4770      	bx	lr
  400b3e:	bf00      	nop
  400b40:	400e0600 	.word	0x400e0600

00400b44 <pmc_get_pllack_config>:
 *
 * \retval PLLA Multiplier and PLLA Front End Divider values.
 */
uint32_t pmc_get_pllack_config(void)
{
	return (PMC->CKGR_PLLAR & (CKGR_PLLAR_DIVA_Msk | CKGR_PLLAR_MULA_Msk));
  400b44:	4b02      	ldr	r3, [pc, #8]	; (400b50 <pmc_get_pllack_config+0xc>)
  400b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
  400b48:	4802      	ldr	r0, [pc, #8]	; (400b54 <pmc_get_pllack_config+0x10>)
  400b4a:	4018      	ands	r0, r3
  400b4c:	4770      	bx	lr
  400b4e:	bf00      	nop
  400b50:	400e0600 	.word	0x400e0600
  400b54:	07ff00ff 	.word	0x07ff00ff

00400b58 <pmc_get_upllckdiv_config>:
 *
 * \retval UPLL Divider by 2 value.
 */
uint32_t pmc_get_upllckdiv_config(void)
{
	return (PMC->PMC_MCKR & PMC_MCKR_UPLLDIV2);
  400b58:	4b02      	ldr	r3, [pc, #8]	; (400b64 <pmc_get_upllckdiv_config+0xc>)
  400b5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
  400b5c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	400e0600 	.word	0x400e0600

00400b68 <pmc_switch_pck_to_upllck>:
 */
uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
  400b68:	f041 0103 	orr.w	r1, r1, #3
  400b6c:	4b0c      	ldr	r3, [pc, #48]	; (400ba0 <pmc_switch_pck_to_upllck+0x38>)
  400b6e:	f100 0210 	add.w	r2, r0, #16
  400b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
  400b76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400b78:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b7c:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  400b80:	4202      	tst	r2, r0
  400b82:	d109      	bne.n	400b98 <pmc_switch_pck_to_upllck+0x30>
  400b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
  400b88:	4905      	ldr	r1, [pc, #20]	; (400ba0 <pmc_switch_pck_to_upllck+0x38>)
  400b8a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  400b8c:	4202      	tst	r2, r0
  400b8e:	d105      	bne.n	400b9c <pmc_switch_pck_to_upllck+0x34>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b90:	3b01      	subs	r3, #1
  400b92:	d1fa      	bne.n	400b8a <pmc_switch_pck_to_upllck+0x22>
			return 1;
  400b94:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b96:	4770      	bx	lr
	return 0;
  400b98:	2000      	movs	r0, #0
  400b9a:	4770      	bx	lr
  400b9c:	2000      	movs	r0, #0
  400b9e:	4770      	bx	lr
  400ba0:	400e0600 	.word	0x400e0600

00400ba4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ba8:	fa03 f000 	lsl.w	r0, r3, r0
  400bac:	4b01      	ldr	r3, [pc, #4]	; (400bb4 <pmc_enable_pck+0x10>)
  400bae:	6018      	str	r0, [r3, #0]
  400bb0:	4770      	bx	lr
  400bb2:	bf00      	nop
  400bb4:	400e0600 	.word	0x400e0600

00400bb8 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  400bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
  400bbc:	fa03 f000 	lsl.w	r0, r3, r0
  400bc0:	4b01      	ldr	r3, [pc, #4]	; (400bc8 <pmc_disable_pck+0x10>)
  400bc2:	6058      	str	r0, [r3, #4]
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	400e0600 	.word	0x400e0600

00400bcc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400bcc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bce:	0189      	lsls	r1, r1, #6
  400bd0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400bd2:	2402      	movs	r4, #2
  400bd4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400bd6:	f04f 31ff 	mov.w	r1, #4294967295
  400bda:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400bdc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400bde:	605a      	str	r2, [r3, #4]
}
  400be0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400be4:	4770      	bx	lr

00400be6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400be6:	0189      	lsls	r1, r1, #6
  400be8:	2305      	movs	r3, #5
  400bea:	5043      	str	r3, [r0, r1]
  400bec:	4770      	bx	lr

00400bee <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400bee:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400bf2:	61ca      	str	r2, [r1, #28]
  400bf4:	4770      	bx	lr

00400bf6 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bf6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400bfa:	624a      	str	r2, [r1, #36]	; 0x24
  400bfc:	4770      	bx	lr

00400bfe <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bfe:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400c02:	6a08      	ldr	r0, [r1, #32]
}
  400c04:	4770      	bx	lr

00400c06 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400c06:	b4f0      	push	{r4, r5, r6, r7}
  400c08:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c0a:	2402      	movs	r4, #2
  400c0c:	9401      	str	r4, [sp, #4]
  400c0e:	2408      	movs	r4, #8
  400c10:	9402      	str	r4, [sp, #8]
  400c12:	2420      	movs	r4, #32
  400c14:	9403      	str	r4, [sp, #12]
  400c16:	2480      	movs	r4, #128	; 0x80
  400c18:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400c1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400c1c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c1e:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400c20:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400c24:	d814      	bhi.n	400c50 <tc_find_mck_divisor+0x4a>
  400c26:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400c28:	42a0      	cmp	r0, r4
  400c2a:	d217      	bcs.n	400c5c <tc_find_mck_divisor+0x56>
  400c2c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400c2e:	af01      	add	r7, sp, #4
  400c30:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400c34:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400c38:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400c3a:	4284      	cmp	r4, r0
  400c3c:	d30a      	bcc.n	400c54 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400c3e:	4286      	cmp	r6, r0
  400c40:	d90d      	bls.n	400c5e <tc_find_mck_divisor+0x58>
			ul_index++) {
  400c42:	3501      	adds	r5, #1
	for (ul_index = 0;
  400c44:	2d05      	cmp	r5, #5
  400c46:	d1f3      	bne.n	400c30 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400c48:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400c4a:	b006      	add	sp, #24
  400c4c:	bcf0      	pop	{r4, r5, r6, r7}
  400c4e:	4770      	bx	lr
			return 0;
  400c50:	2000      	movs	r0, #0
  400c52:	e7fa      	b.n	400c4a <tc_find_mck_divisor+0x44>
  400c54:	2000      	movs	r0, #0
  400c56:	e7f8      	b.n	400c4a <tc_find_mck_divisor+0x44>
	return 1;
  400c58:	2001      	movs	r0, #1
  400c5a:	e7f6      	b.n	400c4a <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400c5c:	2500      	movs	r5, #0
	if (p_uldiv) {
  400c5e:	b12a      	cbz	r2, 400c6c <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400c60:	a906      	add	r1, sp, #24
  400c62:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400c66:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400c6a:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d0f3      	beq.n	400c58 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400c70:	601d      	str	r5, [r3, #0]
	return 1;
  400c72:	2001      	movs	r0, #1
  400c74:	e7e9      	b.n	400c4a <tc_find_mck_divisor+0x44>

00400c76 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400c76:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400c78:	23ac      	movs	r3, #172	; 0xac
  400c7a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400c7c:	680b      	ldr	r3, [r1, #0]
  400c7e:	684a      	ldr	r2, [r1, #4]
  400c80:	fbb3 f3f2 	udiv	r3, r3, r2
  400c84:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400c86:	1e5c      	subs	r4, r3, #1
  400c88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400c8c:	4294      	cmp	r4, r2
  400c8e:	d808      	bhi.n	400ca2 <uart_init+0x2c>
		return 1;

	p_uart->UART_BRGR = cd;
  400c90:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400c92:	688b      	ldr	r3, [r1, #8]
  400c94:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400c96:	2350      	movs	r3, #80	; 0x50
  400c98:	6003      	str	r3, [r0, #0]

	return 0;
  400c9a:	2000      	movs	r0, #0
}
  400c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ca0:	4770      	bx	lr
		return 1;
  400ca2:	2001      	movs	r0, #1
  400ca4:	e7fa      	b.n	400c9c <uart_init+0x26>

00400ca6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ca6:	6943      	ldr	r3, [r0, #20]
  400ca8:	f013 0f02 	tst.w	r3, #2
  400cac:	d002      	beq.n	400cb4 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400cae:	61c1      	str	r1, [r0, #28]
	return 0;
  400cb0:	2000      	movs	r0, #0
  400cb2:	4770      	bx	lr
		return 1;
  400cb4:	2001      	movs	r0, #1
}
  400cb6:	4770      	bx	lr

00400cb8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400cb8:	6943      	ldr	r3, [r0, #20]
  400cba:	f013 0f01 	tst.w	r3, #1
  400cbe:	d003      	beq.n	400cc8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400cc0:	6983      	ldr	r3, [r0, #24]
  400cc2:	700b      	strb	r3, [r1, #0]
	return 0;
  400cc4:	2000      	movs	r0, #0
  400cc6:	4770      	bx	lr
		return 1;
  400cc8:	2001      	movs	r0, #1
}
  400cca:	4770      	bx	lr

00400ccc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
  400cce:	b083      	sub	sp, #12
  400cd0:	4605      	mov	r5, r0
  400cd2:	460c      	mov	r4, r1
	uint32_t val = 0;
  400cd4:	2300      	movs	r3, #0
  400cd6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400cd8:	4b2a      	ldr	r3, [pc, #168]	; (400d84 <usart_serial_getchar+0xb8>)
  400cda:	4298      	cmp	r0, r3
  400cdc:	d013      	beq.n	400d06 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400cde:	4b2a      	ldr	r3, [pc, #168]	; (400d88 <usart_serial_getchar+0xbc>)
  400ce0:	4298      	cmp	r0, r3
  400ce2:	d018      	beq.n	400d16 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400ce4:	4b29      	ldr	r3, [pc, #164]	; (400d8c <usart_serial_getchar+0xc0>)
  400ce6:	4298      	cmp	r0, r3
  400ce8:	d01d      	beq.n	400d26 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400cea:	4b29      	ldr	r3, [pc, #164]	; (400d90 <usart_serial_getchar+0xc4>)
  400cec:	429d      	cmp	r5, r3
  400cee:	d022      	beq.n	400d36 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400cf0:	4b28      	ldr	r3, [pc, #160]	; (400d94 <usart_serial_getchar+0xc8>)
  400cf2:	429d      	cmp	r5, r3
  400cf4:	d027      	beq.n	400d46 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400cf6:	4b28      	ldr	r3, [pc, #160]	; (400d98 <usart_serial_getchar+0xcc>)
  400cf8:	429d      	cmp	r5, r3
  400cfa:	d02e      	beq.n	400d5a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400cfc:	4b27      	ldr	r3, [pc, #156]	; (400d9c <usart_serial_getchar+0xd0>)
  400cfe:	429d      	cmp	r5, r3
  400d00:	d035      	beq.n	400d6e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400d02:	b003      	add	sp, #12
  400d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400d06:	461f      	mov	r7, r3
  400d08:	4e25      	ldr	r6, [pc, #148]	; (400da0 <usart_serial_getchar+0xd4>)
  400d0a:	4621      	mov	r1, r4
  400d0c:	4638      	mov	r0, r7
  400d0e:	47b0      	blx	r6
  400d10:	2800      	cmp	r0, #0
  400d12:	d1fa      	bne.n	400d0a <usart_serial_getchar+0x3e>
  400d14:	e7e9      	b.n	400cea <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400d16:	461f      	mov	r7, r3
  400d18:	4e21      	ldr	r6, [pc, #132]	; (400da0 <usart_serial_getchar+0xd4>)
  400d1a:	4621      	mov	r1, r4
  400d1c:	4638      	mov	r0, r7
  400d1e:	47b0      	blx	r6
  400d20:	2800      	cmp	r0, #0
  400d22:	d1fa      	bne.n	400d1a <usart_serial_getchar+0x4e>
  400d24:	e7e4      	b.n	400cf0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400d26:	461f      	mov	r7, r3
  400d28:	4e1d      	ldr	r6, [pc, #116]	; (400da0 <usart_serial_getchar+0xd4>)
  400d2a:	4621      	mov	r1, r4
  400d2c:	4638      	mov	r0, r7
  400d2e:	47b0      	blx	r6
  400d30:	2800      	cmp	r0, #0
  400d32:	d1fa      	bne.n	400d2a <usart_serial_getchar+0x5e>
  400d34:	e7df      	b.n	400cf6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400d36:	461f      	mov	r7, r3
  400d38:	4e19      	ldr	r6, [pc, #100]	; (400da0 <usart_serial_getchar+0xd4>)
  400d3a:	4621      	mov	r1, r4
  400d3c:	4638      	mov	r0, r7
  400d3e:	47b0      	blx	r6
  400d40:	2800      	cmp	r0, #0
  400d42:	d1fa      	bne.n	400d3a <usart_serial_getchar+0x6e>
  400d44:	e7da      	b.n	400cfc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400d46:	461e      	mov	r6, r3
  400d48:	4d16      	ldr	r5, [pc, #88]	; (400da4 <usart_serial_getchar+0xd8>)
  400d4a:	a901      	add	r1, sp, #4
  400d4c:	4630      	mov	r0, r6
  400d4e:	47a8      	blx	r5
  400d50:	2800      	cmp	r0, #0
  400d52:	d1fa      	bne.n	400d4a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400d54:	9b01      	ldr	r3, [sp, #4]
  400d56:	7023      	strb	r3, [r4, #0]
  400d58:	e7d3      	b.n	400d02 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400d5a:	461e      	mov	r6, r3
  400d5c:	4d11      	ldr	r5, [pc, #68]	; (400da4 <usart_serial_getchar+0xd8>)
  400d5e:	a901      	add	r1, sp, #4
  400d60:	4630      	mov	r0, r6
  400d62:	47a8      	blx	r5
  400d64:	2800      	cmp	r0, #0
  400d66:	d1fa      	bne.n	400d5e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400d68:	9b01      	ldr	r3, [sp, #4]
  400d6a:	7023      	strb	r3, [r4, #0]
  400d6c:	e7c9      	b.n	400d02 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400d6e:	461e      	mov	r6, r3
  400d70:	4d0c      	ldr	r5, [pc, #48]	; (400da4 <usart_serial_getchar+0xd8>)
  400d72:	a901      	add	r1, sp, #4
  400d74:	4630      	mov	r0, r6
  400d76:	47a8      	blx	r5
  400d78:	2800      	cmp	r0, #0
  400d7a:	d1fa      	bne.n	400d72 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400d7c:	9b01      	ldr	r3, [sp, #4]
  400d7e:	7023      	strb	r3, [r4, #0]
}
  400d80:	e7bf      	b.n	400d02 <usart_serial_getchar+0x36>
  400d82:	bf00      	nop
  400d84:	400e0800 	.word	0x400e0800
  400d88:	400e0a00 	.word	0x400e0a00
  400d8c:	400e1a00 	.word	0x400e1a00
  400d90:	400e1c00 	.word	0x400e1c00
  400d94:	40024000 	.word	0x40024000
  400d98:	40028000 	.word	0x40028000
  400d9c:	4002c000 	.word	0x4002c000
  400da0:	00400cb9 	.word	0x00400cb9
  400da4:	004002b3 	.word	0x004002b3

00400da8 <usart_serial_putchar>:
{
  400da8:	b570      	push	{r4, r5, r6, lr}
  400daa:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400dac:	4b2a      	ldr	r3, [pc, #168]	; (400e58 <usart_serial_putchar+0xb0>)
  400dae:	4298      	cmp	r0, r3
  400db0:	d013      	beq.n	400dda <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400db2:	4b2a      	ldr	r3, [pc, #168]	; (400e5c <usart_serial_putchar+0xb4>)
  400db4:	4298      	cmp	r0, r3
  400db6:	d019      	beq.n	400dec <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400db8:	4b29      	ldr	r3, [pc, #164]	; (400e60 <usart_serial_putchar+0xb8>)
  400dba:	4298      	cmp	r0, r3
  400dbc:	d01f      	beq.n	400dfe <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400dbe:	4b29      	ldr	r3, [pc, #164]	; (400e64 <usart_serial_putchar+0xbc>)
  400dc0:	4298      	cmp	r0, r3
  400dc2:	d025      	beq.n	400e10 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400dc4:	4b28      	ldr	r3, [pc, #160]	; (400e68 <usart_serial_putchar+0xc0>)
  400dc6:	4298      	cmp	r0, r3
  400dc8:	d02b      	beq.n	400e22 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400dca:	4b28      	ldr	r3, [pc, #160]	; (400e6c <usart_serial_putchar+0xc4>)
  400dcc:	4298      	cmp	r0, r3
  400dce:	d031      	beq.n	400e34 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400dd0:	4b27      	ldr	r3, [pc, #156]	; (400e70 <usart_serial_putchar+0xc8>)
  400dd2:	4298      	cmp	r0, r3
  400dd4:	d037      	beq.n	400e46 <usart_serial_putchar+0x9e>
	return 0;
  400dd6:	2000      	movs	r0, #0
}
  400dd8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dda:	461e      	mov	r6, r3
  400ddc:	4d25      	ldr	r5, [pc, #148]	; (400e74 <usart_serial_putchar+0xcc>)
  400dde:	4621      	mov	r1, r4
  400de0:	4630      	mov	r0, r6
  400de2:	47a8      	blx	r5
  400de4:	2800      	cmp	r0, #0
  400de6:	d1fa      	bne.n	400dde <usart_serial_putchar+0x36>
		return 1;
  400de8:	2001      	movs	r0, #1
  400dea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dec:	461e      	mov	r6, r3
  400dee:	4d21      	ldr	r5, [pc, #132]	; (400e74 <usart_serial_putchar+0xcc>)
  400df0:	4621      	mov	r1, r4
  400df2:	4630      	mov	r0, r6
  400df4:	47a8      	blx	r5
  400df6:	2800      	cmp	r0, #0
  400df8:	d1fa      	bne.n	400df0 <usart_serial_putchar+0x48>
		return 1;
  400dfa:	2001      	movs	r0, #1
  400dfc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400dfe:	461e      	mov	r6, r3
  400e00:	4d1c      	ldr	r5, [pc, #112]	; (400e74 <usart_serial_putchar+0xcc>)
  400e02:	4621      	mov	r1, r4
  400e04:	4630      	mov	r0, r6
  400e06:	47a8      	blx	r5
  400e08:	2800      	cmp	r0, #0
  400e0a:	d1fa      	bne.n	400e02 <usart_serial_putchar+0x5a>
		return 1;
  400e0c:	2001      	movs	r0, #1
  400e0e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e10:	461e      	mov	r6, r3
  400e12:	4d18      	ldr	r5, [pc, #96]	; (400e74 <usart_serial_putchar+0xcc>)
  400e14:	4621      	mov	r1, r4
  400e16:	4630      	mov	r0, r6
  400e18:	47a8      	blx	r5
  400e1a:	2800      	cmp	r0, #0
  400e1c:	d1fa      	bne.n	400e14 <usart_serial_putchar+0x6c>
		return 1;
  400e1e:	2001      	movs	r0, #1
  400e20:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e22:	461e      	mov	r6, r3
  400e24:	4d14      	ldr	r5, [pc, #80]	; (400e78 <usart_serial_putchar+0xd0>)
  400e26:	4621      	mov	r1, r4
  400e28:	4630      	mov	r0, r6
  400e2a:	47a8      	blx	r5
  400e2c:	2800      	cmp	r0, #0
  400e2e:	d1fa      	bne.n	400e26 <usart_serial_putchar+0x7e>
		return 1;
  400e30:	2001      	movs	r0, #1
  400e32:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e34:	461e      	mov	r6, r3
  400e36:	4d10      	ldr	r5, [pc, #64]	; (400e78 <usart_serial_putchar+0xd0>)
  400e38:	4621      	mov	r1, r4
  400e3a:	4630      	mov	r0, r6
  400e3c:	47a8      	blx	r5
  400e3e:	2800      	cmp	r0, #0
  400e40:	d1fa      	bne.n	400e38 <usart_serial_putchar+0x90>
		return 1;
  400e42:	2001      	movs	r0, #1
  400e44:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e46:	461e      	mov	r6, r3
  400e48:	4d0b      	ldr	r5, [pc, #44]	; (400e78 <usart_serial_putchar+0xd0>)
  400e4a:	4621      	mov	r1, r4
  400e4c:	4630      	mov	r0, r6
  400e4e:	47a8      	blx	r5
  400e50:	2800      	cmp	r0, #0
  400e52:	d1fa      	bne.n	400e4a <usart_serial_putchar+0xa2>
		return 1;
  400e54:	2001      	movs	r0, #1
  400e56:	bd70      	pop	{r4, r5, r6, pc}
  400e58:	400e0800 	.word	0x400e0800
  400e5c:	400e0a00 	.word	0x400e0a00
  400e60:	400e1a00 	.word	0x400e1a00
  400e64:	400e1c00 	.word	0x400e1c00
  400e68:	40024000 	.word	0x40024000
  400e6c:	40028000 	.word	0x40028000
  400e70:	4002c000 	.word	0x4002c000
  400e74:	00400ca7 	.word	0x00400ca7
  400e78:	0040029d 	.word	0x0040029d

00400e7c <board_init>:
	stdio_serial_init(UART0, &uart_serial_options);
}


void board_init(void)
{
  400e7c:	b530      	push	{r4, r5, lr}
  400e7e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400e80:	200a      	movs	r0, #10
  400e82:	4c48      	ldr	r4, [pc, #288]	; (400fa4 <board_init+0x128>)
  400e84:	47a0      	blx	r4
  400e86:	200b      	movs	r0, #11
  400e88:	47a0      	blx	r4
  400e8a:	2010      	movs	r0, #16
  400e8c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e8e:	4b46      	ldr	r3, [pc, #280]	; (400fa8 <board_init+0x12c>)
  400e90:	2202      	movs	r2, #2
  400e92:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e98:	2104      	movs	r1, #4
  400e9a:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e9c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ea0:	2210      	movs	r2, #16
  400ea2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ea4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
  400eac:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400eae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400eb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400eb6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400eb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ebc:	4a3b      	ldr	r2, [pc, #236]	; (400fac <board_init+0x130>)
  400ebe:	2001      	movs	r0, #1
  400ec0:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ec2:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400ec6:	2008      	movs	r0, #8
  400ec8:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400eca:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ece:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ed0:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ed2:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ed6:	6f15      	ldr	r5, [r2, #112]	; 0x70
  400ed8:	f025 0508 	bic.w	r5, r5, #8
  400edc:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ede:	6f55      	ldr	r5, [r2, #116]	; 0x74
  400ee0:	f025 0508 	bic.w	r5, r5, #8
  400ee4:	6755      	str	r5, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ee6:	6050      	str	r0, [r2, #4]
		base->PIO_PUDR = mask;
  400ee8:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400eea:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400eee:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ef0:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ef2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ef6:	6f10      	ldr	r0, [r2, #112]	; 0x70
  400ef8:	f020 0004 	bic.w	r0, r0, #4
  400efc:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400efe:	6f50      	ldr	r0, [r2, #116]	; 0x74
  400f00:	f020 0004 	bic.w	r0, r0, #4
  400f04:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f06:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  400f08:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f0c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f12:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f14:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f1c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400f20:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f22:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f24:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400f28:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f2a:	605a      	str	r2, [r3, #4]
	ioport_set_pin_peripheral_mode(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
	
	// UART Flags
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400f2c:	4920      	ldr	r1, [pc, #128]	; (400fb0 <board_init+0x134>)
  400f2e:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  400f32:	f042 0210 	orr.w	r2, r2, #16
  400f36:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400f3e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f44:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f46:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400f4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f4e:	4311      	orrs	r1, r2
  400f50:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400f52:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f54:	4311      	orrs	r1, r2
  400f56:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f58:	605a      	str	r2, [r3, #4]
  400f5a:	2007      	movs	r0, #7
  400f5c:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400f5e:	4d15      	ldr	r5, [pc, #84]	; (400fb4 <board_init+0x138>)
  400f60:	4b15      	ldr	r3, [pc, #84]	; (400fb8 <board_init+0x13c>)
  400f62:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400f64:	4a15      	ldr	r2, [pc, #84]	; (400fbc <board_init+0x140>)
  400f66:	4b16      	ldr	r3, [pc, #88]	; (400fc0 <board_init+0x144>)
  400f68:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400f6a:	4a16      	ldr	r2, [pc, #88]	; (400fc4 <board_init+0x148>)
  400f6c:	4b16      	ldr	r3, [pc, #88]	; (400fc8 <board_init+0x14c>)
  400f6e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400f70:	4b16      	ldr	r3, [pc, #88]	; (400fcc <board_init+0x150>)
  400f72:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400f74:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400f78:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f7e:	9303      	str	r3, [sp, #12]
  400f80:	2007      	movs	r0, #7
  400f82:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  400f84:	a901      	add	r1, sp, #4
  400f86:	4628      	mov	r0, r5
  400f88:	4b11      	ldr	r3, [pc, #68]	; (400fd0 <board_init+0x154>)
  400f8a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400f8c:	4d11      	ldr	r5, [pc, #68]	; (400fd4 <board_init+0x158>)
  400f8e:	682b      	ldr	r3, [r5, #0]
  400f90:	2100      	movs	r1, #0
  400f92:	6898      	ldr	r0, [r3, #8]
  400f94:	4c10      	ldr	r4, [pc, #64]	; (400fd8 <board_init+0x15c>)
  400f96:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400f98:	682b      	ldr	r3, [r5, #0]
  400f9a:	2100      	movs	r1, #0
  400f9c:	6858      	ldr	r0, [r3, #4]
  400f9e:	47a0      	blx	r4
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
	
	configure_console();
}
  400fa0:	b005      	add	sp, #20
  400fa2:	bd30      	pop	{r4, r5, pc}
  400fa4:	00400abd 	.word	0x00400abd
  400fa8:	400e0e00 	.word	0x400e0e00
  400fac:	400e1000 	.word	0x400e1000
  400fb0:	40088000 	.word	0x40088000
  400fb4:	400e0800 	.word	0x400e0800
  400fb8:	20401638 	.word	0x20401638
  400fbc:	00400da9 	.word	0x00400da9
  400fc0:	20401634 	.word	0x20401634
  400fc4:	00400ccd 	.word	0x00400ccd
  400fc8:	20401630 	.word	0x20401630
  400fcc:	08f0d180 	.word	0x08f0d180
  400fd0:	00400c77 	.word	0x00400c77
  400fd4:	20400008 	.word	0x20400008
  400fd8:	00402101 	.word	0x00402101

00400fdc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400fdc:	e7fe      	b.n	400fdc <Dummy_Handler>
	...

00400fe0 <Reset_Handler>:
{
  400fe0:	b500      	push	{lr}
  400fe2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400fe4:	4b25      	ldr	r3, [pc, #148]	; (40107c <Reset_Handler+0x9c>)
  400fe6:	4a26      	ldr	r2, [pc, #152]	; (401080 <Reset_Handler+0xa0>)
  400fe8:	429a      	cmp	r2, r3
  400fea:	d010      	beq.n	40100e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400fec:	4b25      	ldr	r3, [pc, #148]	; (401084 <Reset_Handler+0xa4>)
  400fee:	4a23      	ldr	r2, [pc, #140]	; (40107c <Reset_Handler+0x9c>)
  400ff0:	429a      	cmp	r2, r3
  400ff2:	d20c      	bcs.n	40100e <Reset_Handler+0x2e>
  400ff4:	3b01      	subs	r3, #1
  400ff6:	1a9b      	subs	r3, r3, r2
  400ff8:	f023 0303 	bic.w	r3, r3, #3
  400ffc:	3304      	adds	r3, #4
  400ffe:	4413      	add	r3, r2
  401000:	491f      	ldr	r1, [pc, #124]	; (401080 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401002:	f851 0b04 	ldr.w	r0, [r1], #4
  401006:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40100a:	429a      	cmp	r2, r3
  40100c:	d1f9      	bne.n	401002 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40100e:	4b1e      	ldr	r3, [pc, #120]	; (401088 <Reset_Handler+0xa8>)
  401010:	4a1e      	ldr	r2, [pc, #120]	; (40108c <Reset_Handler+0xac>)
  401012:	429a      	cmp	r2, r3
  401014:	d20a      	bcs.n	40102c <Reset_Handler+0x4c>
  401016:	3b01      	subs	r3, #1
  401018:	1a9b      	subs	r3, r3, r2
  40101a:	f023 0303 	bic.w	r3, r3, #3
  40101e:	3304      	adds	r3, #4
  401020:	4413      	add	r3, r2
                *pDest++ = 0;
  401022:	2100      	movs	r1, #0
  401024:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401028:	4293      	cmp	r3, r2
  40102a:	d1fb      	bne.n	401024 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40102c:	4a18      	ldr	r2, [pc, #96]	; (401090 <Reset_Handler+0xb0>)
  40102e:	4b19      	ldr	r3, [pc, #100]	; (401094 <Reset_Handler+0xb4>)
  401030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401034:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401036:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40103a:	fab3 f383 	clz	r3, r3
  40103e:	095b      	lsrs	r3, r3, #5
  401040:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401042:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401044:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401048:	2200      	movs	r2, #0
  40104a:	4b13      	ldr	r3, [pc, #76]	; (401098 <Reset_Handler+0xb8>)
  40104c:	701a      	strb	r2, [r3, #0]
	return flags;
  40104e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401050:	4a12      	ldr	r2, [pc, #72]	; (40109c <Reset_Handler+0xbc>)
  401052:	6813      	ldr	r3, [r2, #0]
  401054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401058:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40105a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40105e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401062:	b129      	cbz	r1, 401070 <Reset_Handler+0x90>
		cpu_irq_enable();
  401064:	2201      	movs	r2, #1
  401066:	4b0c      	ldr	r3, [pc, #48]	; (401098 <Reset_Handler+0xb8>)
  401068:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40106a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40106e:	b662      	cpsie	i
        __libc_init_array();
  401070:	4b0b      	ldr	r3, [pc, #44]	; (4010a0 <Reset_Handler+0xc0>)
  401072:	4798      	blx	r3
        main();
  401074:	4b0b      	ldr	r3, [pc, #44]	; (4010a4 <Reset_Handler+0xc4>)
  401076:	4798      	blx	r3
  401078:	e7fe      	b.n	401078 <Reset_Handler+0x98>
  40107a:	bf00      	nop
  40107c:	20400000 	.word	0x20400000
  401080:	00406a7c 	.word	0x00406a7c
  401084:	204009b8 	.word	0x204009b8
  401088:	20401694 	.word	0x20401694
  40108c:	204009b8 	.word	0x204009b8
  401090:	e000ed00 	.word	0xe000ed00
  401094:	00400000 	.word	0x00400000
  401098:	20400000 	.word	0x20400000
  40109c:	e000ed88 	.word	0xe000ed88
  4010a0:	00401e91 	.word	0x00401e91
  4010a4:	00401291 	.word	0x00401291

004010a8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4010a8:	4b3b      	ldr	r3, [pc, #236]	; (401198 <SystemCoreClockUpdate+0xf0>)
  4010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010ac:	f003 0303 	and.w	r3, r3, #3
  4010b0:	2b01      	cmp	r3, #1
  4010b2:	d01d      	beq.n	4010f0 <SystemCoreClockUpdate+0x48>
  4010b4:	b183      	cbz	r3, 4010d8 <SystemCoreClockUpdate+0x30>
  4010b6:	2b02      	cmp	r3, #2
  4010b8:	d036      	beq.n	401128 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4010ba:	4b37      	ldr	r3, [pc, #220]	; (401198 <SystemCoreClockUpdate+0xf0>)
  4010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010c2:	2b70      	cmp	r3, #112	; 0x70
  4010c4:	d05f      	beq.n	401186 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010c6:	4b34      	ldr	r3, [pc, #208]	; (401198 <SystemCoreClockUpdate+0xf0>)
  4010c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4010ca:	4934      	ldr	r1, [pc, #208]	; (40119c <SystemCoreClockUpdate+0xf4>)
  4010cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4010d0:	680b      	ldr	r3, [r1, #0]
  4010d2:	40d3      	lsrs	r3, r2
  4010d4:	600b      	str	r3, [r1, #0]
  4010d6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4010d8:	4b31      	ldr	r3, [pc, #196]	; (4011a0 <SystemCoreClockUpdate+0xf8>)
  4010da:	695b      	ldr	r3, [r3, #20]
  4010dc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4010e0:	bf14      	ite	ne
  4010e2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4010e6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4010ea:	4b2c      	ldr	r3, [pc, #176]	; (40119c <SystemCoreClockUpdate+0xf4>)
  4010ec:	601a      	str	r2, [r3, #0]
  4010ee:	e7e4      	b.n	4010ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4010f0:	4b29      	ldr	r3, [pc, #164]	; (401198 <SystemCoreClockUpdate+0xf0>)
  4010f2:	6a1b      	ldr	r3, [r3, #32]
  4010f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010f8:	d003      	beq.n	401102 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4010fa:	4a2a      	ldr	r2, [pc, #168]	; (4011a4 <SystemCoreClockUpdate+0xfc>)
  4010fc:	4b27      	ldr	r3, [pc, #156]	; (40119c <SystemCoreClockUpdate+0xf4>)
  4010fe:	601a      	str	r2, [r3, #0]
  401100:	e7db      	b.n	4010ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401102:	4a29      	ldr	r2, [pc, #164]	; (4011a8 <SystemCoreClockUpdate+0x100>)
  401104:	4b25      	ldr	r3, [pc, #148]	; (40119c <SystemCoreClockUpdate+0xf4>)
  401106:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401108:	4b23      	ldr	r3, [pc, #140]	; (401198 <SystemCoreClockUpdate+0xf0>)
  40110a:	6a1b      	ldr	r3, [r3, #32]
  40110c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401110:	2b10      	cmp	r3, #16
  401112:	d005      	beq.n	401120 <SystemCoreClockUpdate+0x78>
  401114:	2b20      	cmp	r3, #32
  401116:	d1d0      	bne.n	4010ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401118:	4a22      	ldr	r2, [pc, #136]	; (4011a4 <SystemCoreClockUpdate+0xfc>)
  40111a:	4b20      	ldr	r3, [pc, #128]	; (40119c <SystemCoreClockUpdate+0xf4>)
  40111c:	601a      	str	r2, [r3, #0]
          break;
  40111e:	e7cc      	b.n	4010ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401120:	4a22      	ldr	r2, [pc, #136]	; (4011ac <SystemCoreClockUpdate+0x104>)
  401122:	4b1e      	ldr	r3, [pc, #120]	; (40119c <SystemCoreClockUpdate+0xf4>)
  401124:	601a      	str	r2, [r3, #0]
          break;
  401126:	e7c8      	b.n	4010ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401128:	4b1b      	ldr	r3, [pc, #108]	; (401198 <SystemCoreClockUpdate+0xf0>)
  40112a:	6a1b      	ldr	r3, [r3, #32]
  40112c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401130:	d016      	beq.n	401160 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401132:	4a1c      	ldr	r2, [pc, #112]	; (4011a4 <SystemCoreClockUpdate+0xfc>)
  401134:	4b19      	ldr	r3, [pc, #100]	; (40119c <SystemCoreClockUpdate+0xf4>)
  401136:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401138:	4b17      	ldr	r3, [pc, #92]	; (401198 <SystemCoreClockUpdate+0xf0>)
  40113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40113c:	f003 0303 	and.w	r3, r3, #3
  401140:	2b02      	cmp	r3, #2
  401142:	d1ba      	bne.n	4010ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401144:	4a14      	ldr	r2, [pc, #80]	; (401198 <SystemCoreClockUpdate+0xf0>)
  401146:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401148:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40114a:	4814      	ldr	r0, [pc, #80]	; (40119c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40114c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401150:	6803      	ldr	r3, [r0, #0]
  401152:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401156:	b2d2      	uxtb	r2, r2
  401158:	fbb3 f3f2 	udiv	r3, r3, r2
  40115c:	6003      	str	r3, [r0, #0]
  40115e:	e7ac      	b.n	4010ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401160:	4a11      	ldr	r2, [pc, #68]	; (4011a8 <SystemCoreClockUpdate+0x100>)
  401162:	4b0e      	ldr	r3, [pc, #56]	; (40119c <SystemCoreClockUpdate+0xf4>)
  401164:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401166:	4b0c      	ldr	r3, [pc, #48]	; (401198 <SystemCoreClockUpdate+0xf0>)
  401168:	6a1b      	ldr	r3, [r3, #32]
  40116a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40116e:	2b10      	cmp	r3, #16
  401170:	d005      	beq.n	40117e <SystemCoreClockUpdate+0xd6>
  401172:	2b20      	cmp	r3, #32
  401174:	d1e0      	bne.n	401138 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401176:	4a0b      	ldr	r2, [pc, #44]	; (4011a4 <SystemCoreClockUpdate+0xfc>)
  401178:	4b08      	ldr	r3, [pc, #32]	; (40119c <SystemCoreClockUpdate+0xf4>)
  40117a:	601a      	str	r2, [r3, #0]
          break;
  40117c:	e7dc      	b.n	401138 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40117e:	4a0b      	ldr	r2, [pc, #44]	; (4011ac <SystemCoreClockUpdate+0x104>)
  401180:	4b06      	ldr	r3, [pc, #24]	; (40119c <SystemCoreClockUpdate+0xf4>)
  401182:	601a      	str	r2, [r3, #0]
          break;
  401184:	e7d8      	b.n	401138 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401186:	4a05      	ldr	r2, [pc, #20]	; (40119c <SystemCoreClockUpdate+0xf4>)
  401188:	6813      	ldr	r3, [r2, #0]
  40118a:	4909      	ldr	r1, [pc, #36]	; (4011b0 <SystemCoreClockUpdate+0x108>)
  40118c:	fba1 1303 	umull	r1, r3, r1, r3
  401190:	085b      	lsrs	r3, r3, #1
  401192:	6013      	str	r3, [r2, #0]
  401194:	4770      	bx	lr
  401196:	bf00      	nop
  401198:	400e0600 	.word	0x400e0600
  40119c:	20400004 	.word	0x20400004
  4011a0:	400e1810 	.word	0x400e1810
  4011a4:	00b71b00 	.word	0x00b71b00
  4011a8:	003d0900 	.word	0x003d0900
  4011ac:	007a1200 	.word	0x007a1200
  4011b0:	aaaaaaab 	.word	0xaaaaaaab

004011b4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4011b4:	4b16      	ldr	r3, [pc, #88]	; (401210 <system_init_flash+0x5c>)
  4011b6:	4298      	cmp	r0, r3
  4011b8:	d913      	bls.n	4011e2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4011ba:	4b16      	ldr	r3, [pc, #88]	; (401214 <system_init_flash+0x60>)
  4011bc:	4298      	cmp	r0, r3
  4011be:	d915      	bls.n	4011ec <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4011c0:	4b15      	ldr	r3, [pc, #84]	; (401218 <system_init_flash+0x64>)
  4011c2:	4298      	cmp	r0, r3
  4011c4:	d916      	bls.n	4011f4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4011c6:	4b15      	ldr	r3, [pc, #84]	; (40121c <system_init_flash+0x68>)
  4011c8:	4298      	cmp	r0, r3
  4011ca:	d917      	bls.n	4011fc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4011cc:	4b14      	ldr	r3, [pc, #80]	; (401220 <system_init_flash+0x6c>)
  4011ce:	4298      	cmp	r0, r3
  4011d0:	d918      	bls.n	401204 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4011d2:	4b14      	ldr	r3, [pc, #80]	; (401224 <system_init_flash+0x70>)
  4011d4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4011d6:	bf94      	ite	ls
  4011d8:	4a13      	ldrls	r2, [pc, #76]	; (401228 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4011da:	4a14      	ldrhi	r2, [pc, #80]	; (40122c <system_init_flash+0x78>)
  4011dc:	4b14      	ldr	r3, [pc, #80]	; (401230 <system_init_flash+0x7c>)
  4011de:	601a      	str	r2, [r3, #0]
  4011e0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4011e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4011e6:	4b12      	ldr	r3, [pc, #72]	; (401230 <system_init_flash+0x7c>)
  4011e8:	601a      	str	r2, [r3, #0]
  4011ea:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4011ec:	4a11      	ldr	r2, [pc, #68]	; (401234 <system_init_flash+0x80>)
  4011ee:	4b10      	ldr	r3, [pc, #64]	; (401230 <system_init_flash+0x7c>)
  4011f0:	601a      	str	r2, [r3, #0]
  4011f2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4011f4:	4a10      	ldr	r2, [pc, #64]	; (401238 <system_init_flash+0x84>)
  4011f6:	4b0e      	ldr	r3, [pc, #56]	; (401230 <system_init_flash+0x7c>)
  4011f8:	601a      	str	r2, [r3, #0]
  4011fa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4011fc:	4a0f      	ldr	r2, [pc, #60]	; (40123c <system_init_flash+0x88>)
  4011fe:	4b0c      	ldr	r3, [pc, #48]	; (401230 <system_init_flash+0x7c>)
  401200:	601a      	str	r2, [r3, #0]
  401202:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401204:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401208:	4b09      	ldr	r3, [pc, #36]	; (401230 <system_init_flash+0x7c>)
  40120a:	601a      	str	r2, [r3, #0]
  40120c:	4770      	bx	lr
  40120e:	bf00      	nop
  401210:	015ef3bf 	.word	0x015ef3bf
  401214:	02bde77f 	.word	0x02bde77f
  401218:	041cdb3f 	.word	0x041cdb3f
  40121c:	057bceff 	.word	0x057bceff
  401220:	06dac2bf 	.word	0x06dac2bf
  401224:	0839b67f 	.word	0x0839b67f
  401228:	04000500 	.word	0x04000500
  40122c:	04000600 	.word	0x04000600
  401230:	400e0c00 	.word	0x400e0c00
  401234:	04000100 	.word	0x04000100
  401238:	04000200 	.word	0x04000200
  40123c:	04000300 	.word	0x04000300

00401240 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401240:	4b0a      	ldr	r3, [pc, #40]	; (40126c <_sbrk+0x2c>)
  401242:	681b      	ldr	r3, [r3, #0]
  401244:	b153      	cbz	r3, 40125c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401246:	4b09      	ldr	r3, [pc, #36]	; (40126c <_sbrk+0x2c>)
  401248:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40124a:	181a      	adds	r2, r3, r0
  40124c:	4908      	ldr	r1, [pc, #32]	; (401270 <_sbrk+0x30>)
  40124e:	4291      	cmp	r1, r2
  401250:	db08      	blt.n	401264 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401252:	4610      	mov	r0, r2
  401254:	4a05      	ldr	r2, [pc, #20]	; (40126c <_sbrk+0x2c>)
  401256:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401258:	4618      	mov	r0, r3
  40125a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40125c:	4a05      	ldr	r2, [pc, #20]	; (401274 <_sbrk+0x34>)
  40125e:	4b03      	ldr	r3, [pc, #12]	; (40126c <_sbrk+0x2c>)
  401260:	601a      	str	r2, [r3, #0]
  401262:	e7f0      	b.n	401246 <_sbrk+0x6>
		return (caddr_t) -1;	
  401264:	f04f 30ff 	mov.w	r0, #4294967295
}
  401268:	4770      	bx	lr
  40126a:	bf00      	nop
  40126c:	204015a4 	.word	0x204015a4
  401270:	2045fffc 	.word	0x2045fffc
  401274:	20403898 	.word	0x20403898

00401278 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401278:	f04f 30ff 	mov.w	r0, #4294967295
  40127c:	4770      	bx	lr

0040127e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40127e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401282:	604b      	str	r3, [r1, #4]

	return 0;
}
  401284:	2000      	movs	r0, #0
  401286:	4770      	bx	lr

00401288 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401288:	2001      	movs	r0, #1
  40128a:	4770      	bx	lr

0040128c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40128c:	2000      	movs	r0, #0
  40128e:	4770      	bx	lr

00401290 <main>:
	"  8: Test custom filter \r\n"
	"  h: Display menu \r\n\r\n");
}

int main (void)
{
  401290:	b580      	push	{r7, lr}
  401292:	b098      	sub	sp, #96	; 0x60
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401294:	4b7c      	ldr	r3, [pc, #496]	; (401488 <main+0x1f8>)
  401296:	4798      	blx	r3

	board_init();
  401298:	4b7c      	ldr	r3, [pc, #496]	; (40148c <main+0x1fc>)
  40129a:	4798      	blx	r3
	
	uint8_t key;
	
	blink_led(LEDA_PIN, 2);
  40129c:	2102      	movs	r1, #2
  40129e:	2001      	movs	r0, #1
  4012a0:	4b7b      	ldr	r3, [pc, #492]	; (401490 <main+0x200>)
  4012a2:	4798      	blx	r3
		
	while (1) {
		scanf("%c", (char *)&key);
  4012a4:	4d7b      	ldr	r5, [pc, #492]	; (401494 <main+0x204>)
  4012a6:	4c7c      	ldr	r4, [pc, #496]	; (401498 <main+0x208>)
			send_message_module_0(&customMsg);
			printf("Sent message with id: %d \r\n", customId);
			break;
			
			case '8':
			printf("  8: Test custom filter \r\n");
  4012a8:	f8df 8258 	ldr.w	r8, [pc, #600]	; 401504 <main+0x274>
  4012ac:	e002      	b.n	4012b4 <main+0x24>
	printf("Menu :\r\n"
  4012ae:	487b      	ldr	r0, [pc, #492]	; (40149c <main+0x20c>)
  4012b0:	4b7b      	ldr	r3, [pc, #492]	; (4014a0 <main+0x210>)
  4012b2:	4798      	blx	r3
		scanf("%c", (char *)&key);
  4012b4:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
  4012b8:	4628      	mov	r0, r5
  4012ba:	47a0      	blx	r4
		switch (key) {
  4012bc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
  4012c0:	3b30      	subs	r3, #48	; 0x30
  4012c2:	2b38      	cmp	r3, #56	; 0x38
  4012c4:	d8f6      	bhi.n	4012b4 <main+0x24>
  4012c6:	a201      	add	r2, pc, #4	; (adr r2, 4012cc <main+0x3c>)
  4012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4012cc:	004013b1 	.word	0x004013b1
  4012d0:	004013e5 	.word	0x004013e5
  4012d4:	004013f1 	.word	0x004013f1
  4012d8:	004013fd 	.word	0x004013fd
  4012dc:	00401409 	.word	0x00401409
  4012e0:	00401415 	.word	0x00401415
  4012e4:	00401421 	.word	0x00401421
  4012e8:	0040142d 	.word	0x0040142d
  4012ec:	0040146d 	.word	0x0040146d
  4012f0:	004012b5 	.word	0x004012b5
  4012f4:	004012b5 	.word	0x004012b5
  4012f8:	004012b5 	.word	0x004012b5
  4012fc:	004012b5 	.word	0x004012b5
  401300:	004012b5 	.word	0x004012b5
  401304:	004012b5 	.word	0x004012b5
  401308:	004012b5 	.word	0x004012b5
  40130c:	004012b5 	.word	0x004012b5
  401310:	004012b5 	.word	0x004012b5
  401314:	004012b5 	.word	0x004012b5
  401318:	004012b5 	.word	0x004012b5
  40131c:	004012b5 	.word	0x004012b5
  401320:	004012b5 	.word	0x004012b5
  401324:	004012b5 	.word	0x004012b5
  401328:	004012b5 	.word	0x004012b5
  40132c:	004012b5 	.word	0x004012b5
  401330:	004012b5 	.word	0x004012b5
  401334:	004012b5 	.word	0x004012b5
  401338:	004012b5 	.word	0x004012b5
  40133c:	004012b5 	.word	0x004012b5
  401340:	004012b5 	.word	0x004012b5
  401344:	004012b5 	.word	0x004012b5
  401348:	004012b5 	.word	0x004012b5
  40134c:	004012b5 	.word	0x004012b5
  401350:	004012b5 	.word	0x004012b5
  401354:	004012b5 	.word	0x004012b5
  401358:	004012b5 	.word	0x004012b5
  40135c:	004012b5 	.word	0x004012b5
  401360:	004012b5 	.word	0x004012b5
  401364:	004012b5 	.word	0x004012b5
  401368:	004012b5 	.word	0x004012b5
  40136c:	004012b5 	.word	0x004012b5
  401370:	004012b5 	.word	0x004012b5
  401374:	004012b5 	.word	0x004012b5
  401378:	004012b5 	.word	0x004012b5
  40137c:	004012b5 	.word	0x004012b5
  401380:	004012b5 	.word	0x004012b5
  401384:	004012b5 	.word	0x004012b5
  401388:	004012b5 	.word	0x004012b5
  40138c:	004012b5 	.word	0x004012b5
  401390:	004012b5 	.word	0x004012b5
  401394:	004012b5 	.word	0x004012b5
  401398:	004012b5 	.word	0x004012b5
  40139c:	004012b5 	.word	0x004012b5
  4013a0:	004012b5 	.word	0x004012b5
  4013a4:	004012b5 	.word	0x004012b5
  4013a8:	004012b5 	.word	0x004012b5
  4013ac:	004012af 	.word	0x004012af
			printf("  0: Test mcan init. \r\n");
  4013b0:	483c      	ldr	r0, [pc, #240]	; (4014a4 <main+0x214>)
  4013b2:	4b3b      	ldr	r3, [pc, #236]	; (4014a0 <main+0x210>)
  4013b4:	4798      	blx	r3
			init_can_module();
  4013b6:	4b3c      	ldr	r3, [pc, #240]	; (4014a8 <main+0x218>)
  4013b8:	4798      	blx	r3
			add_range_filter_module_0(0, 0x00, 0x7FF);
  4013ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4013be:	2100      	movs	r1, #0
  4013c0:	4608      	mov	r0, r1
  4013c2:	4b3a      	ldr	r3, [pc, #232]	; (4014ac <main+0x21c>)
  4013c4:	4798      	blx	r3
			add_single_filter_module_0(0x15, 1);
  4013c6:	2101      	movs	r1, #1
  4013c8:	2015      	movs	r0, #21
  4013ca:	4b39      	ldr	r3, [pc, #228]	; (4014b0 <main+0x220>)
  4013cc:	4798      	blx	r3
			add_range_filter_module_1(2, 0x00, 0x7FF);
  4013ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4013d2:	2100      	movs	r1, #0
  4013d4:	2002      	movs	r0, #2
  4013d6:	4b37      	ldr	r3, [pc, #220]	; (4014b4 <main+0x224>)
  4013d8:	4798      	blx	r3
			add_single_filter_module_1(0x15, 3);
  4013da:	2103      	movs	r1, #3
  4013dc:	2015      	movs	r0, #21
  4013de:	4b36      	ldr	r3, [pc, #216]	; (4014b8 <main+0x228>)
  4013e0:	4798      	blx	r3
			break;
  4013e2:	e767      	b.n	4012b4 <main+0x24>
			printf("  1: Test simple message. \r\n");
  4013e4:	4835      	ldr	r0, [pc, #212]	; (4014bc <main+0x22c>)
  4013e6:	4b2e      	ldr	r3, [pc, #184]	; (4014a0 <main+0x210>)
  4013e8:	4798      	blx	r3
			test_send_message_simple();
  4013ea:	4b35      	ldr	r3, [pc, #212]	; (4014c0 <main+0x230>)
  4013ec:	4798      	blx	r3
			break;
  4013ee:	e761      	b.n	4012b4 <main+0x24>
			printf("  2: Test add single filters. \r\n");
  4013f0:	4834      	ldr	r0, [pc, #208]	; (4014c4 <main+0x234>)
  4013f2:	4b2b      	ldr	r3, [pc, #172]	; (4014a0 <main+0x210>)
  4013f4:	4798      	blx	r3
			test_add_single_filters();
  4013f6:	4b34      	ldr	r3, [pc, #208]	; (4014c8 <main+0x238>)
  4013f8:	4798      	blx	r3
			break;
  4013fa:	e75b      	b.n	4012b4 <main+0x24>
			printf("  3: Test add range filters. \r\n");
  4013fc:	4833      	ldr	r0, [pc, #204]	; (4014cc <main+0x23c>)
  4013fe:	4b28      	ldr	r3, [pc, #160]	; (4014a0 <main+0x210>)
  401400:	4798      	blx	r3
			test_add_range_filters();
  401402:	4b33      	ldr	r3, [pc, #204]	; (4014d0 <main+0x240>)
  401404:	4798      	blx	r3
			break;
  401406:	e755      	b.n	4012b4 <main+0x24>
			printf("  4: Test send too large message. \r\n");
  401408:	4832      	ldr	r0, [pc, #200]	; (4014d4 <main+0x244>)
  40140a:	4b25      	ldr	r3, [pc, #148]	; (4014a0 <main+0x210>)
  40140c:	4798      	blx	r3
			test_send_too_big_message();
  40140e:	4b32      	ldr	r3, [pc, #200]	; (4014d8 <main+0x248>)
  401410:	4798      	blx	r3
			break;
  401412:	e74f      	b.n	4012b4 <main+0x24>
			printf("  5: Test send message with no data. \r\n");
  401414:	4831      	ldr	r0, [pc, #196]	; (4014dc <main+0x24c>)
  401416:	4b22      	ldr	r3, [pc, #136]	; (4014a0 <main+0x210>)
  401418:	4798      	blx	r3
			test_send_message_no_data();
  40141a:	4b31      	ldr	r3, [pc, #196]	; (4014e0 <main+0x250>)
  40141c:	4798      	blx	r3
			break;
  40141e:	e749      	b.n	4012b4 <main+0x24>
			printf("  6: Test send message with no ID. \r\n");
  401420:	4830      	ldr	r0, [pc, #192]	; (4014e4 <main+0x254>)
  401422:	4b1f      	ldr	r3, [pc, #124]	; (4014a0 <main+0x210>)
  401424:	4798      	blx	r3
			test_send_message_no_id();
  401426:	4b30      	ldr	r3, [pc, #192]	; (4014e8 <main+0x258>)
  401428:	4798      	blx	r3
			break;
  40142a:	e743      	b.n	4012b4 <main+0x24>
			printf("  7: Test send custom message \r\n");
  40142c:	482f      	ldr	r0, [pc, #188]	; (4014ec <main+0x25c>)
  40142e:	4e1c      	ldr	r6, [pc, #112]	; (4014a0 <main+0x210>)
  401430:	47b0      	blx	r6
			scanf("%d\r\n", (uint32_t*) &customId);
  401432:	4669      	mov	r1, sp
  401434:	482e      	ldr	r0, [pc, #184]	; (4014f0 <main+0x260>)
  401436:	47a0      	blx	r4
			test_struct.x = 26;
  401438:	231a      	movs	r3, #26
  40143a:	9304      	str	r3, [sp, #16]
			test_struct.y = 200;
  40143c:	23c8      	movs	r3, #200	; 0xc8
  40143e:	9305      	str	r3, [sp, #20]
			test_struct.z = 120;
  401440:	2378      	movs	r3, #120	; 0x78
  401442:	9306      	str	r3, [sp, #24]
			serialize_data(&test_struct, sizeof(test_struct), buffer);
  401444:	af07      	add	r7, sp, #28
  401446:	463a      	mov	r2, r7
  401448:	210c      	movs	r1, #12
  40144a:	a804      	add	r0, sp, #16
  40144c:	4b29      	ldr	r3, [pc, #164]	; (4014f4 <main+0x264>)
  40144e:	4798      	blx	r3
			customMsg.data = buffer;
  401450:	9702      	str	r7, [sp, #8]
			customMsg.dataSize = sizeof(test_struct);
  401452:	230c      	movs	r3, #12
  401454:	f88d 300c 	strb.w	r3, [sp, #12]
			customMsg.id = customId;
  401458:	a818      	add	r0, sp, #96	; 0x60
  40145a:	9b00      	ldr	r3, [sp, #0]
  40145c:	f840 3d5c 	str.w	r3, [r0, #-92]!
			send_message_module_0(&customMsg);
  401460:	4b25      	ldr	r3, [pc, #148]	; (4014f8 <main+0x268>)
  401462:	4798      	blx	r3
			printf("Sent message with id: %d \r\n", customId);
  401464:	9900      	ldr	r1, [sp, #0]
  401466:	4825      	ldr	r0, [pc, #148]	; (4014fc <main+0x26c>)
  401468:	47b0      	blx	r6
			break;
  40146a:	e723      	b.n	4012b4 <main+0x24>
			printf("  8: Test custom filter \r\n");
  40146c:	4640      	mov	r0, r8
  40146e:	4e0c      	ldr	r6, [pc, #48]	; (4014a0 <main+0x210>)
  401470:	47b0      	blx	r6
			uint32_t filterId;
			scanf("%d\r\n", (uint32_t*) &filterId);
  401472:	a907      	add	r1, sp, #28
  401474:	481e      	ldr	r0, [pc, #120]	; (4014f0 <main+0x260>)
  401476:	47a0      	blx	r4
			
			add_single_filter_module_1(filterId, 6);
  401478:	2106      	movs	r1, #6
  40147a:	9807      	ldr	r0, [sp, #28]
  40147c:	4b0e      	ldr	r3, [pc, #56]	; (4014b8 <main+0x228>)
  40147e:	4798      	blx	r3
			printf("Added filter with ID: %d \r\n", filterId);
  401480:	9907      	ldr	r1, [sp, #28]
  401482:	481f      	ldr	r0, [pc, #124]	; (401500 <main+0x270>)
  401484:	47b0      	blx	r6
		scanf("%c", (char *)&key);
  401486:	e715      	b.n	4012b4 <main+0x24>
  401488:	0040031d 	.word	0x0040031d
  40148c:	00400e7d 	.word	0x00400e7d
  401490:	00401d9d 	.word	0x00401d9d
  401494:	004064d0 	.word	0x004064d0
  401498:	00401f09 	.word	0x00401f09
  40149c:	004064d4 	.word	0x004064d4
  4014a0:	00401ee1 	.word	0x00401ee1
  4014a4:	0040662c 	.word	0x0040662c
  4014a8:	0040174d 	.word	0x0040174d
  4014ac:	00401ad9 	.word	0x00401ad9
  4014b0:	00401a0d 	.word	0x00401a0d
  4014b4:	00401b3d 	.word	0x00401b3d
  4014b8:	00401a81 	.word	0x00401a81
  4014bc:	00406644 	.word	0x00406644
  4014c0:	00401619 	.word	0x00401619
  4014c4:	00406664 	.word	0x00406664
  4014c8:	00401529 	.word	0x00401529
  4014cc:	00406688 	.word	0x00406688
  4014d0:	0040154d 	.word	0x0040154d
  4014d4:	004066a8 	.word	0x004066a8
  4014d8:	00401579 	.word	0x00401579
  4014dc:	004066d0 	.word	0x004066d0
  4014e0:	004015fd 	.word	0x004015fd
  4014e4:	004066f8 	.word	0x004066f8
  4014e8:	004015c5 	.word	0x004015c5
  4014ec:	00406720 	.word	0x00406720
  4014f0:	00406744 	.word	0x00406744
  4014f4:	00401739 	.word	0x00401739
  4014f8:	00401875 	.word	0x00401875
  4014fc:	0040674c 	.word	0x0040674c
  401500:	00406784 	.word	0x00406784
  401504:	00406768 	.word	0x00406768

00401508 <message_received>:
		}
	};
}

void message_received(shift_can_message_t* message)
{
  401508:	b510      	push	{r4, lr}
  40150a:	4604      	mov	r4, r0
	printf("Message received in main!\n");
  40150c:	4803      	ldr	r0, [pc, #12]	; (40151c <message_received+0x14>)
  40150e:	4b04      	ldr	r3, [pc, #16]	; (401520 <message_received+0x18>)
  401510:	4798      	blx	r3
	test_message_received(message);
  401512:	4620      	mov	r0, r4
  401514:	4b03      	ldr	r3, [pc, #12]	; (401524 <message_received+0x1c>)
  401516:	4798      	blx	r3
  401518:	bd10      	pop	{r4, pc}
  40151a:	bf00      	nop
  40151c:	004067a0 	.word	0x004067a0
  401520:	00401ee1 	.word	0x00401ee1
  401524:	00401659 	.word	0x00401659

00401528 <test_add_single_filters>:
{
	add_range_filter_module_1(2, 0, 2048);
}

void test_add_single_filters()
{
  401528:	b570      	push	{r4, r5, r6, lr}
	for(int i = 0; i < 63; i++)
  40152a:	2400      	movs	r4, #0
	{
		add_single_filter_module_1(SENSOR_ACCELLEROMETER_ORIENTATION, i);
  40152c:	f240 460c 	movw	r6, #1036	; 0x40c
  401530:	4d05      	ldr	r5, [pc, #20]	; (401548 <test_add_single_filters+0x20>)
  401532:	b2e1      	uxtb	r1, r4
  401534:	4630      	mov	r0, r6
  401536:	47a8      	blx	r5
	for(int i = 0; i < 63; i++)
  401538:	3401      	adds	r4, #1
  40153a:	2c3f      	cmp	r4, #63	; 0x3f
  40153c:	d1f9      	bne.n	401532 <test_add_single_filters+0xa>
	}
	add_single_filter_module_1(VCU_ERROR_FATAL, 67);
  40153e:	2143      	movs	r1, #67	; 0x43
  401540:	2000      	movs	r0, #0
  401542:	4b01      	ldr	r3, [pc, #4]	; (401548 <test_add_single_filters+0x20>)
  401544:	4798      	blx	r3
  401546:	bd70      	pop	{r4, r5, r6, pc}
  401548:	00401a81 	.word	0x00401a81

0040154c <test_add_range_filters>:
}

void test_add_range_filters()
{
  40154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i = 0; i < 63; i++)
  40154e:	2400      	movs	r4, #0
	{
		add_range_filter_module_1(i, VCU_SHUT_OFF_PLS, 0x200);
  401550:	f44f 7700 	mov.w	r7, #512	; 0x200
  401554:	2601      	movs	r6, #1
  401556:	4d07      	ldr	r5, [pc, #28]	; (401574 <test_add_range_filters+0x28>)
  401558:	463a      	mov	r2, r7
  40155a:	4631      	mov	r1, r6
  40155c:	b2e0      	uxtb	r0, r4
  40155e:	47a8      	blx	r5
	for(int i = 0; i < 63; i++)
  401560:	3401      	adds	r4, #1
  401562:	2c3f      	cmp	r4, #63	; 0x3f
  401564:	d1f8      	bne.n	401558 <test_add_range_filters+0xc>
	}
	add_range_filter_module_1(65, VCU_SHUT_OFF_PLS, 0x100);
  401566:	f44f 7280 	mov.w	r2, #256	; 0x100
  40156a:	2101      	movs	r1, #1
  40156c:	2041      	movs	r0, #65	; 0x41
  40156e:	4b01      	ldr	r3, [pc, #4]	; (401574 <test_add_range_filters+0x28>)
  401570:	4798      	blx	r3
  401572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401574:	00401b3d 	.word	0x00401b3d

00401578 <test_send_too_big_message>:
}

void test_send_too_big_message()
{
  401578:	b500      	push	{lr}
  40157a:	b097      	sub	sp, #92	; 0x5c
  40157c:	f10d 33ff 	add.w	r3, sp, #4294967295
  401580:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
	shift_can_message_t message;
	
	testing_large_struct_t too_large_struct;
	for(int i = 0; i < 63; i++)
	{
		too_large_struct.large_array[i] = 1;
  401584:	2201      	movs	r2, #1
  401586:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(int i = 0; i < 63; i++)
  40158a:	428b      	cmp	r3, r1
  40158c:	d1fb      	bne.n	401586 <test_send_too_big_message+0xe>
	}
	too_large_struct.x = 20;
  40158e:	2314      	movs	r3, #20
  401590:	9310      	str	r3, [sp, #64]	; 0x40
	too_large_struct.y = 50;
  401592:	2332      	movs	r3, #50	; 0x32
  401594:	9311      	str	r3, [sp, #68]	; 0x44
	too_large_struct.z = 100;
  401596:	2364      	movs	r3, #100	; 0x64
  401598:	9312      	str	r3, [sp, #72]	; 0x48
	
	serialize_data(&too_large_struct, sizeof(too_large_struct), message.data);
  40159a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40159c:	214c      	movs	r1, #76	; 0x4c
  40159e:	4668      	mov	r0, sp
  4015a0:	4b06      	ldr	r3, [pc, #24]	; (4015bc <test_send_too_big_message+0x44>)
  4015a2:	4798      	blx	r3
	message.id = 0x000;
  4015a4:	2300      	movs	r3, #0
  4015a6:	9313      	str	r3, [sp, #76]	; 0x4c
	message.dataSize = sizeof(too_large_struct);
  4015a8:	234c      	movs	r3, #76	; 0x4c
  4015aa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	
	send_message_module_1(&message);
  4015ae:	eb0d 0003 	add.w	r0, sp, r3
  4015b2:	4b03      	ldr	r3, [pc, #12]	; (4015c0 <test_send_too_big_message+0x48>)
  4015b4:	4798      	blx	r3
}
  4015b6:	b017      	add	sp, #92	; 0x5c
  4015b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4015bc:	00401739 	.word	0x00401739
  4015c0:	00401941 	.word	0x00401941

004015c4 <test_send_message_no_id>:

void test_send_message_no_id()
{
  4015c4:	b500      	push	{lr}
  4015c6:	b087      	sub	sp, #28
	shift_can_message_t message;
	
	simple_struct_t test_struct;
	test_struct.x = 26;
  4015c8:	231a      	movs	r3, #26
  4015ca:	9300      	str	r3, [sp, #0]
	test_struct.y = 200;
  4015cc:	23c8      	movs	r3, #200	; 0xc8
  4015ce:	9301      	str	r3, [sp, #4]
	test_struct.z = 120;
  4015d0:	2378      	movs	r3, #120	; 0x78
  4015d2:	9302      	str	r3, [sp, #8]
	
	serialize_data(&test_struct, sizeof(test_struct), message.data);
  4015d4:	9a04      	ldr	r2, [sp, #16]
  4015d6:	210c      	movs	r1, #12
  4015d8:	4668      	mov	r0, sp
  4015da:	4b06      	ldr	r3, [pc, #24]	; (4015f4 <test_send_message_no_id+0x30>)
  4015dc:	4798      	blx	r3
	message.dataSize = sizeof(test_struct);
  4015de:	230c      	movs	r3, #12
  4015e0:	f88d 3014 	strb.w	r3, [sp, #20]
	
	send_message_module_1(&message);
  4015e4:	eb0d 0003 	add.w	r0, sp, r3
  4015e8:	4b03      	ldr	r3, [pc, #12]	; (4015f8 <test_send_message_no_id+0x34>)
  4015ea:	4798      	blx	r3
}
  4015ec:	b007      	add	sp, #28
  4015ee:	f85d fb04 	ldr.w	pc, [sp], #4
  4015f2:	bf00      	nop
  4015f4:	00401739 	.word	0x00401739
  4015f8:	00401941 	.word	0x00401941

004015fc <test_send_message_no_data>:

void test_send_message_no_data()
{
  4015fc:	b500      	push	{lr}
  4015fe:	b085      	sub	sp, #20
	shift_can_message_t message;
	
	message.id = 0x0F0;
  401600:	a804      	add	r0, sp, #16
  401602:	23f0      	movs	r3, #240	; 0xf0
  401604:	f840 3d0c 	str.w	r3, [r0, #-12]!
	send_message_module_1(&message);
  401608:	4b02      	ldr	r3, [pc, #8]	; (401614 <test_send_message_no_data+0x18>)
  40160a:	4798      	blx	r3
}
  40160c:	b005      	add	sp, #20
  40160e:	f85d fb04 	ldr.w	pc, [sp], #4
  401612:	bf00      	nop
  401614:	00401941 	.word	0x00401941

00401618 <test_send_message_simple>:
	message.id = 0x100;
	message.dataSize = sizeof(test_struct);
}*/

void test_send_message_simple()
{
  401618:	b500      	push	{lr}
  40161a:	b097      	sub	sp, #92	; 0x5c
	shift_can_message_t message;
	
	simple_struct_t test_struct;
	test_struct.x = 26;
  40161c:	231a      	movs	r3, #26
  40161e:	9310      	str	r3, [sp, #64]	; 0x40
	test_struct.y = 200;
  401620:	23c8      	movs	r3, #200	; 0xc8
  401622:	9311      	str	r3, [sp, #68]	; 0x44
	test_struct.z = 120;
  401624:	2378      	movs	r3, #120	; 0x78
  401626:	9312      	str	r3, [sp, #72]	; 0x48
	
	uint8_t buffer[64];

	serialize_data(&test_struct, sizeof(test_struct), buffer);
  401628:	466a      	mov	r2, sp
  40162a:	210c      	movs	r1, #12
  40162c:	a810      	add	r0, sp, #64	; 0x40
  40162e:	4b08      	ldr	r3, [pc, #32]	; (401650 <test_send_message_simple+0x38>)
  401630:	4798      	blx	r3
	message.data = buffer;
  401632:	f8cd d050 	str.w	sp, [sp, #80]	; 0x50
	message.dataSize = sizeof(test_struct);
  401636:	230c      	movs	r3, #12
  401638:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	message.id = 0x15;
  40163c:	a816      	add	r0, sp, #88	; 0x58
  40163e:	2315      	movs	r3, #21
  401640:	f840 3d0c 	str.w	r3, [r0, #-12]!
	
	send_message_module_1(&message);
  401644:	4b03      	ldr	r3, [pc, #12]	; (401654 <test_send_message_simple+0x3c>)
  401646:	4798      	blx	r3
}
  401648:	b017      	add	sp, #92	; 0x5c
  40164a:	f85d fb04 	ldr.w	pc, [sp], #4
  40164e:	bf00      	nop
  401650:	00401739 	.word	0x00401739
  401654:	00401941 	.word	0x00401941

00401658 <test_message_received>:
#define VCU_FATAL_ERROR 0x100;



void test_message_received(shift_can_message_t* message)
{
  401658:	b570      	push	{r4, r5, r6, lr}
	simple_struct_t* test_struct = (simple_struct_t*) message->data;
  40165a:	6841      	ldr	r1, [r0, #4]
	uint32_t id = message->id;
  40165c:	6806      	ldr	r6, [r0, #0]
	uint32_t dataSize = message->dataSize;
  40165e:	7a05      	ldrb	r5, [r0, #8]
	
	printf("X: %d, Y: %d, Z: %d\n", (int) test_struct->x, (int) test_struct->y,  (int) test_struct->z);
  401660:	688b      	ldr	r3, [r1, #8]
  401662:	684a      	ldr	r2, [r1, #4]
  401664:	6809      	ldr	r1, [r1, #0]
  401666:	4805      	ldr	r0, [pc, #20]	; (40167c <test_message_received+0x24>)
  401668:	4c05      	ldr	r4, [pc, #20]	; (401680 <test_message_received+0x28>)
  40166a:	47a0      	blx	r4
	printf("ID: %x\n", (int) id);
  40166c:	4631      	mov	r1, r6
  40166e:	4805      	ldr	r0, [pc, #20]	; (401684 <test_message_received+0x2c>)
  401670:	47a0      	blx	r4
	printf("Data size after: %d", (int) dataSize);
  401672:	4629      	mov	r1, r5
  401674:	4804      	ldr	r0, [pc, #16]	; (401688 <test_message_received+0x30>)
  401676:	47a0      	blx	r4
  401678:	bd70      	pop	{r4, r5, r6, pc}
  40167a:	bf00      	nop
  40167c:	004067bc 	.word	0x004067bc
  401680:	00401ee1 	.word	0x00401ee1
  401684:	004067d4 	.word	0x004067d4
  401688:	004067dc 	.word	0x004067dc

0040168c <data_size_to_dlc>:
static struct mcan_module module_0;

/* RX FIFO struct and index for receival
 * of messages. 
 */
static volatile uint32_t fifo_receive_index = 0;
  40168c:	2808      	cmp	r0, #8
  40168e:	d916      	bls.n	4016be <data_size_to_dlc+0x32>
static struct mcan_rx_element_fifo_0 rx_element_fifo;

uint32_t data_size_to_dlc(uint32_t data_size)
  401690:	280c      	cmp	r0, #12
  401692:	d801      	bhi.n	401698 <data_size_to_dlc+0xc>
{
  401694:	2009      	movs	r0, #9
  401696:	4770      	bx	lr
	/* If 8 or below, same value */
	if (data_size <= 8) {
  401698:	2810      	cmp	r0, #16
  40169a:	d801      	bhi.n	4016a0 <data_size_to_dlc+0x14>
		return data_size;
  40169c:	200a      	movs	r0, #10
  40169e:	4770      	bx	lr
	/* 0001100 -> 1001 */
	} else if (data_size <= 12) {
  4016a0:	2814      	cmp	r0, #20
  4016a2:	d801      	bhi.n	4016a8 <data_size_to_dlc+0x1c>
		return 0x9ul;
  4016a4:	200b      	movs	r0, #11
  4016a6:	4770      	bx	lr
	/* 0010000 -> 1010 */
	} else if (data_size <= 16) {
  4016a8:	2818      	cmp	r0, #24
  4016aa:	d801      	bhi.n	4016b0 <data_size_to_dlc+0x24>
		return 0xAul;
  4016ac:	200c      	movs	r0, #12
  4016ae:	4770      	bx	lr
	/* 0010100 -> 1011 */
	} else if (data_size <= 20) {
  4016b0:	2820      	cmp	r0, #32
  4016b2:	d801      	bhi.n	4016b8 <data_size_to_dlc+0x2c>
		return 0xBul;
  4016b4:	200d      	movs	r0, #13
  4016b6:	4770      	bx	lr
	/* 0011000 -> 1100 */
	} else if (data_size <= 24) {
  4016b8:	2830      	cmp	r0, #48	; 0x30
  4016ba:	d801      	bhi.n	4016c0 <data_size_to_dlc+0x34>
		return 0xCul;
  4016bc:	200e      	movs	r0, #14
	/* 0100000 -> 1101 */
	} else if (data_size <= 32) {
		return 0xDul;
	/* 0110010 -> 1110 */
	} else if (data_size <= 48) {
		return 0xEul;
  4016be:	4770      	bx	lr
	} else if (data_size <= 48) {
  4016c0:	2841      	cmp	r0, #65	; 0x41
  4016c2:	bf34      	ite	cc
  4016c4:	200f      	movcc	r0, #15
  4016c6:	2000      	movcs	r0, #0
  4016c8:	4770      	bx	lr

004016ca <dlc_to_data_size>:
	/* 1000000 -> 1111 */
	} else if (data_size <= 64) {
		return 0xFul;
	}
	return 0;
  4016ca:	f1a0 0309 	sub.w	r3, r0, #9
  4016ce:	2b06      	cmp	r3, #6
  4016d0:	d812      	bhi.n	4016f8 <dlc_to_data_size+0x2e>
  4016d2:	e8df f003 	tbb	[pc, r3]
  4016d6:	0410      	.short	0x0410
  4016d8:	0c0a0806 	.word	0x0c0a0806
  4016dc:	0e          	.byte	0x0e
  4016dd:	00          	.byte	0x00
}

uint32_t dlc_to_data_size(uint32_t dlc)
{
	/* Opposite of data_size_to_dlc() */
  4016de:	2010      	movs	r0, #16
  4016e0:	4770      	bx	lr
	switch(dlc)
	{
  4016e2:	2014      	movs	r0, #20
  4016e4:	4770      	bx	lr
		case MCAN_TX_ELEMENT_T1_DLC_DATA12_Val:
			return 12;
  4016e6:	2018      	movs	r0, #24
  4016e8:	4770      	bx	lr
		case MCAN_TX_ELEMENT_T1_DLC_DATA16_Val:
			return 16;
  4016ea:	2020      	movs	r0, #32
  4016ec:	4770      	bx	lr
		case MCAN_TX_ELEMENT_T1_DLC_DATA20_Val:
			return 20;
  4016ee:	2030      	movs	r0, #48	; 0x30
  4016f0:	4770      	bx	lr
		case MCAN_TX_ELEMENT_T1_DLC_DATA24_Val:
			return 24;
  4016f2:	2040      	movs	r0, #64	; 0x40
  4016f4:	4770      	bx	lr
uint32_t dlc_to_data_size(uint32_t dlc)
  4016f6:	200c      	movs	r0, #12
		case MCAN_TX_ELEMENT_T1_DLC_DATA32_Val:
			return 32;
		case MCAN_TX_ELEMENT_T1_DLC_DATA48_Val:
			return 48;
  4016f8:	4770      	bx	lr
	...

004016fc <configure_upll>:
		case MCAN_TX_ELEMENT_T1_DLC_DATA64_Val:
			return 64;
		default:
			return dlc;
	}
  4016fc:	b510      	push	{r4, lr}
}
  4016fe:	2005      	movs	r0, #5
  401700:	4b08      	ldr	r3, [pc, #32]	; (401724 <configure_upll+0x28>)
  401702:	4798      	blx	r3

  401704:	2160      	movs	r1, #96	; 0x60
  401706:	2005      	movs	r0, #5
  401708:	4b07      	ldr	r3, [pc, #28]	; (401728 <configure_upll+0x2c>)
  40170a:	4798      	blx	r3
void configure_upll(void);
  40170c:	2005      	movs	r0, #5
  40170e:	4b07      	ldr	r3, [pc, #28]	; (40172c <configure_upll+0x30>)
  401710:	4798      	blx	r3

  401712:	4b07      	ldr	r3, [pc, #28]	; (401730 <configure_upll+0x34>)
  401714:	4798      	blx	r3
/* Change the mcan modules to be driven 
  401716:	2023      	movs	r0, #35	; 0x23
  401718:	4c06      	ldr	r4, [pc, #24]	; (401734 <configure_upll+0x38>)
  40171a:	47a0      	blx	r4
 * by the UPLL clock with a frequency 
  40171c:	2025      	movs	r0, #37	; 0x25
  40171e:	47a0      	blx	r4
  401720:	bd10      	pop	{r4, pc}
  401722:	bf00      	nop
  401724:	00400bb9 	.word	0x00400bb9
  401728:	00400b69 	.word	0x00400b69
  40172c:	00400ba5 	.word	0x00400ba5
  401730:	00400aa5 	.word	0x00400aa5
  401734:	00400abd 	.word	0x00400abd

00401738 <serialize_data>:
 * of 480MHz, and 6 prescalar
 */
void configure_upll()
{
  401738:	b508      	push	{r3, lr}
  40173a:	4613      	mov	r3, r2
	pmc_disable_pck(PMC_PCK_5);
	pmc_switch_pck_to_upllck(PMC_PCK_5, PMC_PCK_PRES(6));
	pmc_enable_pck(PMC_PCK_5);
	pmc_enable_upll_clock();
  40173c:	460a      	mov	r2, r1
  40173e:	4601      	mov	r1, r0
  401740:	4618      	mov	r0, r3
  401742:	4b01      	ldr	r3, [pc, #4]	; (401748 <serialize_data+0x10>)
  401744:	4798      	blx	r3
  401746:	bd08      	pop	{r3, pc}
  401748:	00401f31 	.word	0x00401f31

0040174c <init_can_module>:
	pmc_enable_periph_clk(ID_MCAN0);
	pmc_enable_periph_clk(ID_MCAN1);
}

  40174c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40174e:	b08b      	sub	sp, #44	; 0x2c
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  401750:	2300      	movs	r3, #0
  401752:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  401756:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  40175a:	2201      	movs	r2, #1
  40175c:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  401760:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  401764:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  401768:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  40176c:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  401770:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  401774:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  401778:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40177c:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  401780:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  401784:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  401788:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  40178c:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  401790:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  401794:	2102      	movs	r1, #2
  401796:	f88d 1015 	strb.w	r1, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  40179a:	f88d 1016 	strb.w	r1, [sp, #22]
	config->remote_frames_standard_reject = true;
  40179e:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  4017a2:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  4017a6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  4017aa:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  4017ac:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  4017b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  4017b4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  4017b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  4017bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  4017c0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
void serialize_data(void* data_struct, uint8_t data_size, uint8_t* buffer)
{
	/*  Create a 64 byte array and copy contents of struct directly.
		This assumes endianness and bit stuffing is identical on all 
		connected devices. */
	memcpy(buffer, data_struct, data_size);
  4017c4:	4e1f      	ldr	r6, [pc, #124]	; (401844 <init_can_module+0xf8>)
  4017c6:	4d20      	ldr	r5, [pc, #128]	; (401848 <init_can_module+0xfc>)
  4017c8:	4631      	mov	r1, r6
  4017ca:	4628      	mov	r0, r5
  4017cc:	4f1f      	ldr	r7, [pc, #124]	; (40184c <init_can_module+0x100>)
  4017ce:	47b8      	blx	r7
}
  4017d0:	4c1f      	ldr	r4, [pc, #124]	; (401850 <init_can_module+0x104>)
  4017d2:	4631      	mov	r1, r6
  4017d4:	4620      	mov	r0, r4
  4017d6:	47b8      	blx	r7

  4017d8:	4631      	mov	r1, r6
  4017da:	4628      	mov	r0, r5
  4017dc:	4f1d      	ldr	r7, [pc, #116]	; (401854 <init_can_module+0x108>)
  4017de:	47b8      	blx	r7
void init_can_module()
  4017e0:	4631      	mov	r1, r6
  4017e2:	4620      	mov	r0, r4
  4017e4:	47b8      	blx	r7
{		
 	/* Get the default mcan configuration */
 	struct mcan_config config_mcan;
  4017e6:	aa01      	add	r2, sp, #4
  4017e8:	491b      	ldr	r1, [pc, #108]	; (401858 <init_can_module+0x10c>)
  4017ea:	4628      	mov	r0, r5
  4017ec:	4f1b      	ldr	r7, [pc, #108]	; (40185c <init_can_module+0x110>)
  4017ee:	47b8      	blx	r7
 	mcan_get_config_defaults(&config_mcan);
  4017f0:	4628      	mov	r0, r5
  4017f2:	4e1b      	ldr	r6, [pc, #108]	; (401860 <init_can_module+0x114>)
  4017f4:	47b0      	blx	r6
 	
  4017f6:	aa01      	add	r2, sp, #4
  4017f8:	491a      	ldr	r1, [pc, #104]	; (401864 <init_can_module+0x118>)
  4017fa:	4620      	mov	r0, r4
  4017fc:	47b8      	blx	r7
 	/* Init and configure modules */
  4017fe:	4620      	mov	r0, r4
  401800:	47b0      	blx	r6
 	mcan_init(&module_0, MCAN0, &config_mcan);
 	mcan_enable_fd_mode(&module_0);
 	mcan_init(&module_1, MCAN1, &config_mcan);
 	mcan_enable_fd_mode(&module_1);
  401802:	4b19      	ldr	r3, [pc, #100]	; (401868 <init_can_module+0x11c>)
  401804:	4798      	blx	r3
	 
	/* Configure modules to use UPLL clock with 
	   480MHz, 6 prescaler meaning 80 MHz */
  401806:	4628      	mov	r0, r5
  401808:	4e18      	ldr	r6, [pc, #96]	; (40186c <init_can_module+0x120>)
  40180a:	47b0      	blx	r6
	configure_upll();
  40180c:	4620      	mov	r0, r4
  40180e:	47b0      	blx	r6
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401810:	4b17      	ldr	r3, [pc, #92]	; (401870 <init_can_module+0x124>)
  401812:	2108      	movs	r1, #8
  401814:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401818:	2220      	movs	r2, #32
  40181a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40181e:	6059      	str	r1, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  401820:	6828      	ldr	r0, [r5, #0]
  401822:	6d41      	ldr	r1, [r0, #84]	; 0x54
  401824:	f041 41c4 	orr.w	r1, r1, #1644167168	; 0x62000000
  401828:	6541      	str	r1, [r0, #84]	; 0x54
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40182a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40182e:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401832:	605a      	str	r2, [r3, #4]
  401834:	6822      	ldr	r2, [r4, #0]
  401836:	6d53      	ldr	r3, [r2, #84]	; 0x54
  401838:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  40183c:	6553      	str	r3, [r2, #84]	; 0x54
 	mcan_start(&module_1);	
	 	
 	/* Enable interrupts for  MCAN modules */
 	irq_register_handler(MCAN0_INT0_IRQn, 1);
 	mcan_enable_interrupt(&module_0, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);
	 
  40183e:	b00b      	add	sp, #44	; 0x2c
  401840:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401842:	bf00      	nop
  401844:	001e8480 	.word	0x001e8480
  401848:	204015ac 	.word	0x204015ac
  40184c:	00400635 	.word	0x00400635
  401850:	204015b0 	.word	0x204015b0
  401854:	00400729 	.word	0x00400729
  401858:	40030000 	.word	0x40030000
  40185c:	004003bd 	.word	0x004003bd
  401860:	00400841 	.word	0x00400841
  401864:	40034000 	.word	0x40034000
  401868:	004016fd 	.word	0x004016fd
  40186c:	00400815 	.word	0x00400815
  401870:	e000e100 	.word	0xe000e100

00401874 <send_message_module_0>:
	irq_register_handler(MCAN1_INT0_IRQn, 1);
	mcan_enable_interrupt(&module_1, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);
	
  401874:	b530      	push	{r4, r5, lr}
  401876:	b093      	sub	sp, #76	; 0x4c
}

void send_message_module_0(shift_can_message_t* message)
{
  401878:	6803      	ldr	r3, [r0, #0]
	/* Tx element struct containing information
  40187a:	6844      	ldr	r4, [r0, #4]
	   for message transmission */
  40187c:	7a05      	ldrb	r5, [r0, #8]
	uint32_t i;
	struct mcan_tx_element tx_element;
  40187e:	1e59      	subs	r1, r3, #1
  401880:	f240 72fd 	movw	r2, #2045	; 0x7fd
  401884:	4291      	cmp	r1, r2
  401886:	d835      	bhi.n	4018f4 <send_message_module_0+0x80>
  401888:	2c00      	cmp	r4, #0
  40188a:	d033      	beq.n	4018f4 <send_message_module_0+0x80>
  40188c:	1e6a      	subs	r2, r5, #1
  40188e:	b2d2      	uxtb	r2, r2
  401890:	2a3f      	cmp	r2, #63	; 0x3f
  401892:	d82f      	bhi.n	4018f4 <send_message_module_0+0x80>
	tx_element->T0.reg = 0;
  401894:	2200      	movs	r2, #0
  401896:	9200      	str	r2, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  401898:	f44f 0208 	mov.w	r2, #8912896	; 0x880000
  40189c:	9201      	str	r2, [sp, #4]
	
	/* Get message struct information */
	uint32_t id = message->id;
	uint8_t* data = message->data;
  40189e:	9900      	ldr	r1, [sp, #0]
  4018a0:	4a1e      	ldr	r2, [pc, #120]	; (40191c <send_message_module_0+0xa8>)
  4018a2:	ea02 4383 	and.w	r3, r2, r3, lsl #18
  4018a6:	430b      	orrs	r3, r1
  4018a8:	9300      	str	r3, [sp, #0]
	uint8_t data_size = message->dataSize;
	
  4018aa:	4628      	mov	r0, r5
  4018ac:	4b1c      	ldr	r3, [pc, #112]	; (401920 <send_message_module_0+0xac>)
  4018ae:	4798      	blx	r3
  4018b0:	0403      	lsls	r3, r0, #16
  4018b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	if(id && data && data_size && data_size <= 64 && id < 0x7FF)
  4018b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
	
  4018ba:	9301      	str	r3, [sp, #4]
	{	
		/* Setup tx_element for sending */
  4018bc:	b15d      	cbz	r5, 4018d6 <send_message_module_0+0x62>
  4018be:	1e62      	subs	r2, r4, #1
  4018c0:	f10d 0307 	add.w	r3, sp, #7
  4018c4:	a912      	add	r1, sp, #72	; 0x48
  4018c6:	1948      	adds	r0, r1, r5
  4018c8:	3841      	subs	r0, #65	; 0x41
		mcan_get_tx_buffer_element_defaults(&tx_element);
		tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id);
  4018ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4018ce:	f803 1f01 	strb.w	r1, [r3, #1]!
		/* Setup tx_element for sending */
  4018d2:	4283      	cmp	r3, r0
  4018d4:	d1f9      	bne.n	4018ca <send_message_module_0+0x56>
		
		tx_element.T1.reg = (MCAN_TX_ELEMENT_T1_DLC(data_size_to_dlc(data_size)) |
		MCAN_TX_ELEMENT_T1_FDF | MCAN_TX_ELEMENT_T1_BRS);
		/* Setup data for sending */
		for(i = 0; i < data_size; i++)
  4018d6:	4c13      	ldr	r4, [pc, #76]	; (401924 <send_message_module_0+0xb0>)
  4018d8:	2200      	movs	r2, #0
  4018da:	4669      	mov	r1, sp
  4018dc:	4620      	mov	r0, r4
  4018de:	4b12      	ldr	r3, [pc, #72]	; (401928 <send_message_module_0+0xb4>)
  4018e0:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  4018e2:	6823      	ldr	r3, [r4, #0]
  4018e4:	699a      	ldr	r2, [r3, #24]
  4018e6:	f012 0f02 	tst.w	r2, #2
  4018ea:	d10b      	bne.n	401904 <send_message_module_0+0x90>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  4018ec:	2201      	movs	r2, #1
  4018ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4018f2:	e007      	b.n	401904 <send_message_module_0+0x90>
			tx_element.data[i] = *data;
			data++;
		}
		
		/* Send message on CAN bus */
		mcan_set_tx_buffer_element(&module_0, &tx_element,
  4018f4:	b144      	cbz	r4, 401908 <send_message_module_0+0x94>
		TRANSFER_BUFFER_INDEX);
  4018f6:	b165      	cbz	r5, 401912 <send_message_module_0+0x9e>
		
  4018f8:	2d40      	cmp	r5, #64	; 0x40
  4018fa:	d903      	bls.n	401904 <send_message_module_0+0x90>
  4018fc:	490b      	ldr	r1, [pc, #44]	; (40192c <send_message_module_0+0xb8>)
  4018fe:	480c      	ldr	r0, [pc, #48]	; (401930 <send_message_module_0+0xbc>)
  401900:	4b0c      	ldr	r3, [pc, #48]	; (401934 <send_message_module_0+0xc0>)
  401902:	4798      	blx	r3
		mcan_tx_transfer_request(&module_0, 1 << TRANSFER_BUFFER_INDEX);
	}
	else
  401904:	b013      	add	sp, #76	; 0x4c
  401906:	bd30      	pop	{r4, r5, pc}
		mcan_set_tx_buffer_element(&module_0, &tx_element,
  401908:	490b      	ldr	r1, [pc, #44]	; (401938 <send_message_module_0+0xc4>)
  40190a:	4809      	ldr	r0, [pc, #36]	; (401930 <send_message_module_0+0xbc>)
  40190c:	4b09      	ldr	r3, [pc, #36]	; (401934 <send_message_module_0+0xc0>)
  40190e:	4798      	blx	r3
  401910:	e7f1      	b.n	4018f6 <send_message_module_0+0x82>
		TRANSFER_BUFFER_INDEX);
  401912:	490a      	ldr	r1, [pc, #40]	; (40193c <send_message_module_0+0xc8>)
  401914:	4806      	ldr	r0, [pc, #24]	; (401930 <send_message_module_0+0xbc>)
  401916:	4b07      	ldr	r3, [pc, #28]	; (401934 <send_message_module_0+0xc0>)
  401918:	4798      	blx	r3
  40191a:	e7f3      	b.n	401904 <send_message_module_0+0x90>
  40191c:	1ffc0000 	.word	0x1ffc0000
  401920:	0040168d 	.word	0x0040168d
  401924:	204015ac 	.word	0x204015ac
  401928:	004008fd 	.word	0x004008fd
  40192c:	004068ac 	.word	0x004068ac
  401930:	00406878 	.word	0x00406878
  401934:	00401ee1 	.word	0x00401ee1
  401938:	00406860 	.word	0x00406860
  40193c:	00406890 	.word	0x00406890

00401940 <send_message_module_1>:
	{
		if(!data) LOG_ERROR("Struct is missing data!");
		if(!data_size) LOG_ERROR("Struct is missing dataSize!");
  401940:	b530      	push	{r4, r5, lr}
  401942:	b093      	sub	sp, #76	; 0x4c
		if(data_size > 64) LOG_ERROR("Data size is too large!");
		if(id << 0x7FF) LOG_ERROR("ID is too large!");
	}
}
  401944:	6803      	ldr	r3, [r0, #0]

  401946:	6844      	ldr	r4, [r0, #4]
void send_message_module_1(shift_can_message_t* message)
  401948:	7a05      	ldrb	r5, [r0, #8]
{	
	/* Tx element struct containing information
  40194a:	1e59      	subs	r1, r3, #1
  40194c:	f240 72fd 	movw	r2, #2045	; 0x7fd
  401950:	4291      	cmp	r1, r2
  401952:	d835      	bhi.n	4019c0 <send_message_module_1+0x80>
  401954:	2c00      	cmp	r4, #0
  401956:	d033      	beq.n	4019c0 <send_message_module_1+0x80>
  401958:	1e6a      	subs	r2, r5, #1
  40195a:	b2d2      	uxtb	r2, r2
  40195c:	2a3f      	cmp	r2, #63	; 0x3f
  40195e:	d82f      	bhi.n	4019c0 <send_message_module_1+0x80>
	tx_element->T0.reg = 0;
  401960:	2200      	movs	r2, #0
  401962:	9200      	str	r2, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  401964:	f44f 0208 	mov.w	r2, #8912896	; 0x880000
  401968:	9201      	str	r2, [sp, #4]
	   for message transmission */
	uint32_t i;
 	struct mcan_tx_element tx_element;
	 
  40196a:	9900      	ldr	r1, [sp, #0]
  40196c:	4a1e      	ldr	r2, [pc, #120]	; (4019e8 <send_message_module_1+0xa8>)
  40196e:	ea02 4383 	and.w	r3, r2, r3, lsl #18
  401972:	430b      	orrs	r3, r1
  401974:	9300      	str	r3, [sp, #0]
	/* Get message struct information */
 	uint32_t id = message->id;
  401976:	4628      	mov	r0, r5
  401978:	4b1c      	ldr	r3, [pc, #112]	; (4019ec <send_message_module_1+0xac>)
  40197a:	4798      	blx	r3
  40197c:	0403      	lsls	r3, r0, #16
  40197e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 	uint8_t* data = message->data;
  401982:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 	uint32_t id = message->id;
  401986:	9301      	str	r3, [sp, #4]
 	uint8_t data_size = message->dataSize;
 	
  401988:	b15d      	cbz	r5, 4019a2 <send_message_module_1+0x62>
  40198a:	1e62      	subs	r2, r4, #1
  40198c:	f10d 0307 	add.w	r3, sp, #7
  401990:	a912      	add	r1, sp, #72	; 0x48
  401992:	1948      	adds	r0, r1, r5
  401994:	3841      	subs	r0, #65	; 0x41
 	if(id && data && data_size && data_size <= 64 && id < 0x7FF)
 	{
  401996:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40199a:	f803 1f01 	strb.w	r1, [r3, #1]!
 	
  40199e:	4283      	cmp	r3, r0
  4019a0:	d1f9      	bne.n	401996 <send_message_module_1+0x56>
		 /* Setup tx_element for sending */
		 mcan_get_tx_buffer_element_defaults(&tx_element);
 		 tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id);
		  
 		 tx_element.T1.reg = (MCAN_TX_ELEMENT_T1_DLC(data_size_to_dlc(data_size)) |
  4019a2:	4c13      	ldr	r4, [pc, #76]	; (4019f0 <send_message_module_1+0xb0>)
  4019a4:	2200      	movs	r2, #0
  4019a6:	4669      	mov	r1, sp
  4019a8:	4620      	mov	r0, r4
  4019aa:	4b12      	ldr	r3, [pc, #72]	; (4019f4 <send_message_module_1+0xb4>)
  4019ac:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  4019ae:	6823      	ldr	r3, [r4, #0]
  4019b0:	699a      	ldr	r2, [r3, #24]
  4019b2:	f012 0f02 	tst.w	r2, #2
  4019b6:	d10b      	bne.n	4019d0 <send_message_module_1+0x90>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  4019b8:	2201      	movs	r2, #1
  4019ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4019be:	e007      	b.n	4019d0 <send_message_module_1+0x90>
		 /* Setup data for sending */
 		 for(i = 0; i < data_size; i++)
 		 {
 			 tx_element.data[i] = *data;
 		 	 data++;
 		 }
  4019c0:	b144      	cbz	r4, 4019d4 <send_message_module_1+0x94>
 	
  4019c2:	b165      	cbz	r5, 4019de <send_message_module_1+0x9e>
 		 /* Send message on CAN bus */
  4019c4:	2d40      	cmp	r5, #64	; 0x40
  4019c6:	d903      	bls.n	4019d0 <send_message_module_1+0x90>
  4019c8:	490b      	ldr	r1, [pc, #44]	; (4019f8 <send_message_module_1+0xb8>)
  4019ca:	480c      	ldr	r0, [pc, #48]	; (4019fc <send_message_module_1+0xbc>)
  4019cc:	4b0c      	ldr	r3, [pc, #48]	; (401a00 <send_message_module_1+0xc0>)
  4019ce:	4798      	blx	r3
 		 mcan_set_tx_buffer_element(&module_1, &tx_element,
 			 TRANSFER_BUFFER_INDEX);
 		
  4019d0:	b013      	add	sp, #76	; 0x4c
  4019d2:	bd30      	pop	{r4, r5, pc}
 		 }
  4019d4:	490b      	ldr	r1, [pc, #44]	; (401a04 <send_message_module_1+0xc4>)
  4019d6:	4809      	ldr	r0, [pc, #36]	; (4019fc <send_message_module_1+0xbc>)
  4019d8:	4b09      	ldr	r3, [pc, #36]	; (401a00 <send_message_module_1+0xc0>)
  4019da:	4798      	blx	r3
  4019dc:	e7f1      	b.n	4019c2 <send_message_module_1+0x82>
 	
  4019de:	490a      	ldr	r1, [pc, #40]	; (401a08 <send_message_module_1+0xc8>)
  4019e0:	4806      	ldr	r0, [pc, #24]	; (4019fc <send_message_module_1+0xbc>)
  4019e2:	4b07      	ldr	r3, [pc, #28]	; (401a00 <send_message_module_1+0xc0>)
  4019e4:	4798      	blx	r3
  4019e6:	e7f3      	b.n	4019d0 <send_message_module_1+0x90>
  4019e8:	1ffc0000 	.word	0x1ffc0000
  4019ec:	0040168d 	.word	0x0040168d
  4019f0:	204015b0 	.word	0x204015b0
  4019f4:	004008fd 	.word	0x004008fd
  4019f8:	004068ac 	.word	0x004068ac
  4019fc:	00406878 	.word	0x00406878
  401a00:	00401ee1 	.word	0x00401ee1
  401a04:	00406860 	.word	0x00406860
  401a08:	00406890 	.word	0x00406890

00401a0c <add_single_filter_module_0>:
 		 mcan_tx_transfer_request(&module_1, 1 << TRANSFER_BUFFER_INDEX);
 	}
 	else
  401a0c:	b510      	push	{r4, lr}
  401a0e:	b082      	sub	sp, #8
 	{
  401a10:	293f      	cmp	r1, #63	; 0x3f
  401a12:	d905      	bls.n	401a20 <add_single_filter_module_0+0x14>
	
		/* Set filter element bits (See chip datasheet 49.5.7.5 for further info) */
		sd_filter.S0.bit.SFID1 = id;
		sd_filter.S0.bit.SFID2 = id;
		sd_filter.S0.bit.SFEC =
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val;
  401a14:	4914      	ldr	r1, [pc, #80]	; (401a68 <add_single_filter_module_0+0x5c>)
  401a16:	4815      	ldr	r0, [pc, #84]	; (401a6c <add_single_filter_module_0+0x60>)
  401a18:	4b15      	ldr	r3, [pc, #84]	; (401a70 <add_single_filter_module_0+0x64>)
  401a1a:	4798      	blx	r3
		sd_filter.S0.bit.SFT = FILTER_TYPE_DUAL;
		
  401a1c:	b002      	add	sp, #8
  401a1e:	bd10      	pop	{r4, pc}
	sd_filter->S0.reg = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
  401a20:	4b14      	ldr	r3, [pc, #80]	; (401a74 <add_single_filter_module_0+0x68>)
  401a22:	9301      	str	r3, [sp, #4]

  401a24:	f3c0 000a 	ubfx	r0, r0, #0, #11
  401a28:	9b01      	ldr	r3, [sp, #4]
  401a2a:	f360 431a 	bfi	r3, r0, #16, #11
  401a2e:	9301      	str	r3, [sp, #4]
void add_single_filter_module_0(uint32_t id, uint8_t index)
  401a30:	9b01      	ldr	r3, [sp, #4]
  401a32:	f360 030a 	bfi	r3, r0, #0, #11
  401a36:	9301      	str	r3, [sp, #4]
{
  401a38:	9a01      	ldr	r2, [sp, #4]
  401a3a:	2301      	movs	r3, #1
  401a3c:	f363 62dd 	bfi	r2, r3, #27, #3
  401a40:	9201      	str	r2, [sp, #4]
	{
  401a42:	9a01      	ldr	r2, [sp, #4]
  401a44:	f363 729f 	bfi	r2, r3, #30, #2
  401a48:	ab02      	add	r3, sp, #8
  401a4a:	f843 2d04 	str.w	r2, [r3, #-4]!
		mcan_get_standard_message_filter_element_default(&sd_filter);
  401a4e:	4c0a      	ldr	r4, [pc, #40]	; (401a78 <add_single_filter_module_0+0x6c>)
  401a50:	460a      	mov	r2, r1
  401a52:	4619      	mov	r1, r3
  401a54:	4620      	mov	r0, r4
  401a56:	4b09      	ldr	r3, [pc, #36]	; (401a7c <add_single_filter_module_0+0x70>)
  401a58:	4798      	blx	r3
	module_inst->hw->MCAN_IE |= source;
  401a5a:	6822      	ldr	r2, [r4, #0]
  401a5c:	6d53      	ldr	r3, [r2, #84]	; 0x54
  401a5e:	f043 0301 	orr.w	r3, r3, #1
  401a62:	6553      	str	r3, [r2, #84]	; 0x54
  401a64:	e7da      	b.n	401a1c <add_single_filter_module_0+0x10>
  401a66:	bf00      	nop
  401a68:	00406840 	.word	0x00406840
  401a6c:	00406878 	.word	0x00406878
  401a70:	00401ee1 	.word	0x00401ee1
  401a74:	880007ff 	.word	0x880007ff
  401a78:	204015ac 	.word	0x204015ac
  401a7c:	00400869 	.word	0x00400869

00401a80 <add_single_filter_module_1>:
		/* Set filter and enable interrupt on new message */
		mcan_set_rx_standard_filter(&module_0, &sd_filter,
  401a80:	b510      	push	{r4, lr}
  401a82:	b082      	sub	sp, #8
	sd_filter->S0.reg = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
  401a84:	4b11      	ldr	r3, [pc, #68]	; (401acc <add_single_filter_module_1+0x4c>)
  401a86:	9301      	str	r3, [sp, #4]
			index);
		mcan_enable_interrupt(&module_0, MCAN_RX_FIFO_0_NEW_MESSAGE);
	}
	else
	{
		LOG_ERROR("Index needs to be between 0-63!");
  401a88:	9b01      	ldr	r3, [sp, #4]
  401a8a:	f360 431a 	bfi	r3, r0, #16, #11
  401a8e:	9301      	str	r3, [sp, #4]
	}
  401a90:	9b01      	ldr	r3, [sp, #4]
  401a92:	f36f 030a 	bfc	r3, #0, #11
  401a96:	9301      	str	r3, [sp, #4]
}
  401a98:	9b01      	ldr	r3, [sp, #4]
  401a9a:	2201      	movs	r2, #1
  401a9c:	f362 63dd 	bfi	r3, r2, #27, #3
  401aa0:	9301      	str	r3, [sp, #4]
void add_single_filter_module_1(uint32_t id, uint8_t index)
{
  401aa2:	9a01      	ldr	r2, [sp, #4]
  401aa4:	2302      	movs	r3, #2
  401aa6:	f363 729f 	bfi	r2, r3, #30, #2
  401aaa:	ab02      	add	r3, sp, #8
  401aac:	f843 2d04 	str.w	r2, [r3, #-4]!
	struct mcan_standard_message_filter_element sd_filter;
	
	mcan_get_standard_message_filter_element_default(&sd_filter);
  401ab0:	4c07      	ldr	r4, [pc, #28]	; (401ad0 <add_single_filter_module_1+0x50>)
  401ab2:	460a      	mov	r2, r1
  401ab4:	4619      	mov	r1, r3
  401ab6:	4620      	mov	r0, r4
  401ab8:	4b06      	ldr	r3, [pc, #24]	; (401ad4 <add_single_filter_module_1+0x54>)
  401aba:	4798      	blx	r3
	module_inst->hw->MCAN_IE |= source;
  401abc:	6822      	ldr	r2, [r4, #0]
  401abe:	6d53      	ldr	r3, [r2, #84]	; 0x54
  401ac0:	f043 0301 	orr.w	r3, r3, #1
  401ac4:	6553      	str	r3, [r2, #84]	; 0x54
	
	/* Set filter element bits (See chip datasheet 49.5.7.5 for further info) */
	sd_filter.S0.bit.SFID1 = id;
  401ac6:	b002      	add	sp, #8
  401ac8:	bd10      	pop	{r4, pc}
  401aca:	bf00      	nop
  401acc:	880007ff 	.word	0x880007ff
  401ad0:	204015b0 	.word	0x204015b0
  401ad4:	00400869 	.word	0x00400869

00401ad8 <add_range_filter_module_0>:
	sd_filter.S0.bit.SFID2 = 0;
	sd_filter.S0.bit.SFEC =
		MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val;
  401ad8:	b510      	push	{r4, lr}
  401ada:	b082      	sub	sp, #8
	sd_filter.S0.bit.SFT = FILTER_TYPE_SINGLE;
  401adc:	283f      	cmp	r0, #63	; 0x3f
  401ade:	d905      	bls.n	401aec <add_range_filter_module_0+0x14>
	
		/* Set filter element bits (See chip datasheet 49.5.7.5 for further info) */
		sd_filter.S0.bit.SFID1 = id_start;
		sd_filter.S0.bit.SFID2 = id_end;
		sd_filter.S0.bit.SFEC =
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val;
  401ae0:	4911      	ldr	r1, [pc, #68]	; (401b28 <add_range_filter_module_0+0x50>)
  401ae2:	4812      	ldr	r0, [pc, #72]	; (401b2c <add_range_filter_module_0+0x54>)
  401ae4:	4b12      	ldr	r3, [pc, #72]	; (401b30 <add_range_filter_module_0+0x58>)
  401ae6:	4798      	blx	r3
		sd_filter.S0.bit.SFT = FILTER_TYPE_RANGE;
	
  401ae8:	b002      	add	sp, #8
  401aea:	bd10      	pop	{r4, pc}
	mcan_enable_interrupt(&module_1, MCAN_RX_FIFO_0_NEW_MESSAGE);
  401aec:	9b01      	ldr	r3, [sp, #4]
  401aee:	f361 431a 	bfi	r3, r1, #16, #11
  401af2:	9301      	str	r3, [sp, #4]
}
  401af4:	9b01      	ldr	r3, [sp, #4]
  401af6:	f362 030a 	bfi	r3, r2, #0, #11
  401afa:	9301      	str	r3, [sp, #4]

  401afc:	9b01      	ldr	r3, [sp, #4]
  401afe:	2201      	movs	r2, #1
  401b00:	f362 63dd 	bfi	r3, r2, #27, #3
  401b04:	9301      	str	r3, [sp, #4]
{
  401b06:	9b01      	ldr	r3, [sp, #4]
  401b08:	f36f 739f 	bfc	r3, #30, #2
  401b0c:	a902      	add	r1, sp, #8
  401b0e:	f841 3d04 	str.w	r3, [r1, #-4]!
		struct mcan_standard_message_filter_element sd_filter;
  401b12:	4c08      	ldr	r4, [pc, #32]	; (401b34 <add_range_filter_module_0+0x5c>)
  401b14:	4602      	mov	r2, r0
  401b16:	4620      	mov	r0, r4
  401b18:	4b07      	ldr	r3, [pc, #28]	; (401b38 <add_range_filter_module_0+0x60>)
  401b1a:	4798      	blx	r3
  401b1c:	6822      	ldr	r2, [r4, #0]
  401b1e:	6d53      	ldr	r3, [r2, #84]	; 0x54
  401b20:	f043 0301 	orr.w	r3, r3, #1
  401b24:	6553      	str	r3, [r2, #84]	; 0x54
  401b26:	e7df      	b.n	401ae8 <add_range_filter_module_0+0x10>
  401b28:	00406840 	.word	0x00406840
  401b2c:	00406878 	.word	0x00406878
  401b30:	00401ee1 	.word	0x00401ee1
  401b34:	204015ac 	.word	0x204015ac
  401b38:	00400869 	.word	0x00400869

00401b3c <add_range_filter_module_1>:
		/* Set filter and enable interrupt on new message */
		mcan_set_rx_standard_filter(&module_0, &sd_filter,
		index);
  401b3c:	b510      	push	{r4, lr}
  401b3e:	b082      	sub	sp, #8
		mcan_enable_interrupt(&module_0, MCAN_RX_FIFO_0_NEW_MESSAGE);
  401b40:	283f      	cmp	r0, #63	; 0x3f
  401b42:	d905      	bls.n	401b50 <add_range_filter_module_1+0x14>
	
		/* Set filter element bits (See chip datasheet 49.5.7.5 for further info) */
		sd_filter.S0.bit.SFID1 = id_start;
		sd_filter.S0.bit.SFID2 = id_end;
		sd_filter.S0.bit.SFEC =
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val;
  401b44:	4911      	ldr	r1, [pc, #68]	; (401b8c <add_range_filter_module_1+0x50>)
  401b46:	4812      	ldr	r0, [pc, #72]	; (401b90 <add_range_filter_module_1+0x54>)
  401b48:	4b12      	ldr	r3, [pc, #72]	; (401b94 <add_range_filter_module_1+0x58>)
  401b4a:	4798      	blx	r3
		sd_filter.S0.bit.SFT = FILTER_TYPE_RANGE;
	
  401b4c:	b002      	add	sp, #8
  401b4e:	bd10      	pop	{r4, pc}
	}
  401b50:	9b01      	ldr	r3, [sp, #4]
  401b52:	f361 431a 	bfi	r3, r1, #16, #11
  401b56:	9301      	str	r3, [sp, #4]
}
  401b58:	9b01      	ldr	r3, [sp, #4]
  401b5a:	f362 030a 	bfi	r3, r2, #0, #11
  401b5e:	9301      	str	r3, [sp, #4]

  401b60:	9b01      	ldr	r3, [sp, #4]
  401b62:	2201      	movs	r2, #1
  401b64:	f362 63dd 	bfi	r3, r2, #27, #3
  401b68:	9301      	str	r3, [sp, #4]
{
  401b6a:	9b01      	ldr	r3, [sp, #4]
  401b6c:	f36f 739f 	bfc	r3, #30, #2
  401b70:	a902      	add	r1, sp, #8
  401b72:	f841 3d04 	str.w	r3, [r1, #-4]!
		struct mcan_standard_message_filter_element sd_filter;
  401b76:	4c08      	ldr	r4, [pc, #32]	; (401b98 <add_range_filter_module_1+0x5c>)
  401b78:	4602      	mov	r2, r0
  401b7a:	4620      	mov	r0, r4
  401b7c:	4b07      	ldr	r3, [pc, #28]	; (401b9c <add_range_filter_module_1+0x60>)
  401b7e:	4798      	blx	r3
  401b80:	6822      	ldr	r2, [r4, #0]
  401b82:	6d53      	ldr	r3, [r2, #84]	; 0x54
  401b84:	f043 0301 	orr.w	r3, r3, #1
  401b88:	6553      	str	r3, [r2, #84]	; 0x54
  401b8a:	e7df      	b.n	401b4c <add_range_filter_module_1+0x10>
  401b8c:	00406840 	.word	0x00406840
  401b90:	00406878 	.word	0x00406878
  401b94:	00401ee1 	.word	0x00401ee1
  401b98:	204015b0 	.word	0x204015b0
  401b9c:	00400869 	.word	0x00400869

00401ba0 <MCAN0_INT0_Handler>:
		/* Set filter and enable interrupt on new message */
		mcan_set_rx_standard_filter(&module_1, &sd_filter,
		index);
  401ba0:	b530      	push	{r4, r5, lr}
  401ba2:	b095      	sub	sp, #84	; 0x54
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  401ba4:	4b2e      	ldr	r3, [pc, #184]	; (401c60 <MCAN0_INT0_Handler+0xc0>)
  401ba6:	681b      	ldr	r3, [r3, #0]
  401ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
		mcan_enable_interrupt(&module_1, MCAN_RX_FIFO_0_NEW_MESSAGE);
	}
  401baa:	9213      	str	r2, [sp, #76]	; 0x4c
	else
	{
		LOG_ERROR("Index needs to be between 0-63!");
	}
}

  401bac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  401bae:	f012 0f01 	tst.w	r2, #1
  401bb2:	d105      	bne.n	401bc0 <MCAN0_INT0_Handler+0x20>
			fifo_receive_index = 0;
		}
		
		/* No extended IDs supported */
		if(!rx_element_fifo.R0.bit.XTD)
		{
  401bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401bb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401bba:	d143      	bne.n	401c44 <MCAN0_INT0_Handler+0xa4>
			received_message.dataSize = dataSize;
			
			/* Put data from message into buffer */
			for(uint32_t i = 0; i < dataSize; i++)
			{
				data[i] = rx_element_fifo.data[i];
  401bbc:	b015      	add	sp, #84	; 0x54
  401bbe:	bd30      	pop	{r4, r5, pc}
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  401bc0:	2201      	movs	r2, #1
  401bc2:	651a      	str	r2, [r3, #80]	; 0x50
	/* Read interrupt status of mcan module */
  401bc4:	4c27      	ldr	r4, [pc, #156]	; (401c64 <MCAN0_INT0_Handler+0xc4>)
  401bc6:	6822      	ldr	r2, [r4, #0]
  401bc8:	4d25      	ldr	r5, [pc, #148]	; (401c60 <MCAN0_INT0_Handler+0xc0>)
  401bca:	4927      	ldr	r1, [pc, #156]	; (401c68 <MCAN0_INT0_Handler+0xc8>)
  401bcc:	4628      	mov	r0, r5
  401bce:	4b27      	ldr	r3, [pc, #156]	; (401c6c <MCAN0_INT0_Handler+0xcc>)
  401bd0:	4798      	blx	r3
	volatile uint32_t status;
  401bd2:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  401bd4:	682a      	ldr	r2, [r5, #0]
  401bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  401bda:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	status = mcan_read_interrupt_status(&module_0);
  401bde:	6823      	ldr	r3, [r4, #0]
  401be0:	3301      	adds	r3, #1
  401be2:	6023      	str	r3, [r4, #0]
	
  401be4:	6823      	ldr	r3, [r4, #0]
  401be6:	2b01      	cmp	r3, #1
  401be8:	d025      	beq.n	401c36 <MCAN0_INT0_Handler+0x96>
	shift_can_message_t received_message;
  401bea:	4b1f      	ldr	r3, [pc, #124]	; (401c68 <MCAN0_INT0_Handler+0xc8>)
  401bec:	681b      	ldr	r3, [r3, #0]
  401bee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  401bf2:	d123      	bne.n	401c3c <MCAN0_INT0_Handler+0x9c>
	/* If message is received in RX FIFO 0 */
  401bf4:	4b1c      	ldr	r3, [pc, #112]	; (401c68 <MCAN0_INT0_Handler+0xc8>)
  401bf6:	6858      	ldr	r0, [r3, #4]
  401bf8:	f3c0 4003 	ubfx	r0, r0, #16, #4
  401bfc:	4b1c      	ldr	r3, [pc, #112]	; (401c70 <MCAN0_INT0_Handler+0xd0>)
  401bfe:	4798      	blx	r3
	if(status & MCAN_RX_FIFO_0_NEW_MESSAGE)
  401c00:	f88d 0008 	strb.w	r0, [sp, #8]
	{
  401c04:	b158      	cbz	r0, 401c1e <MCAN0_INT0_Handler+0x7e>
  401c06:	4918      	ldr	r1, [pc, #96]	; (401c68 <MCAN0_INT0_Handler+0xc8>)
  401c08:	1dcb      	adds	r3, r1, #7
  401c0a:	f10d 020b 	add.w	r2, sp, #11
  401c0e:	3007      	adds	r0, #7
  401c10:	4408      	add	r0, r1
		mcan_get_rx_fifo_0_element(&module_0, &rx_element_fifo, fifo_receive_index); 
  401c12:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401c16:	f802 1f01 	strb.w	r1, [r2, #1]!
	{
  401c1a:	4283      	cmp	r3, r0
  401c1c:	d1f9      	bne.n	401c12 <MCAN0_INT0_Handler+0x72>
		fifo_receive_index++;
  401c1e:	4b12      	ldr	r3, [pc, #72]	; (401c68 <MCAN0_INT0_Handler+0xc8>)
  401c20:	681b      	ldr	r3, [r3, #0]
		
  401c22:	aa03      	add	r2, sp, #12
  401c24:	9201      	str	r2, [sp, #4]
		/* Find correct fifo index */
  401c26:	f3c3 0349 	ubfx	r3, r3, #1, #10
  401c2a:	a814      	add	r0, sp, #80	; 0x50
  401c2c:	f840 3d50 	str.w	r3, [r0, #-80]!
		if(fifo_receive_index == CONF_MCAN0_RX_FIFO_0_NUM)
  401c30:	4b10      	ldr	r3, [pc, #64]	; (401c74 <MCAN0_INT0_Handler+0xd4>)
  401c32:	4798      	blx	r3
  401c34:	e7be      	b.n	401bb4 <MCAN0_INT0_Handler+0x14>
	uint8_t data[64];
  401c36:	2200      	movs	r2, #0
  401c38:	6022      	str	r2, [r4, #0]
  401c3a:	e7d6      	b.n	401bea <MCAN0_INT0_Handler+0x4a>
		
  401c3c:	480e      	ldr	r0, [pc, #56]	; (401c78 <MCAN0_INT0_Handler+0xd8>)
  401c3e:	4b0f      	ldr	r3, [pc, #60]	; (401c7c <MCAN0_INT0_Handler+0xdc>)
  401c40:	4798      	blx	r3
  401c42:	e7b7      	b.n	401bb4 <MCAN0_INT0_Handler+0x14>
	module_inst->hw->MCAN_IR = source;
  401c44:	4806      	ldr	r0, [pc, #24]	; (401c60 <MCAN0_INT0_Handler+0xc0>)
  401c46:	6803      	ldr	r3, [r0, #0]
  401c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401c4c:	651a      	str	r2, [r3, #80]	; 0x50
			received_message.dataSize = dataSize;
  401c4e:	4b0c      	ldr	r3, [pc, #48]	; (401c80 <MCAN0_INT0_Handler+0xe0>)
  401c50:	4798      	blx	r3
			
  401c52:	480c      	ldr	r0, [pc, #48]	; (401c84 <MCAN0_INT0_Handler+0xe4>)
  401c54:	4b09      	ldr	r3, [pc, #36]	; (401c7c <MCAN0_INT0_Handler+0xdc>)
  401c56:	4798      	blx	r3
			/* Put data from message into buffer */
  401c58:	4b0b      	ldr	r3, [pc, #44]	; (401c88 <MCAN0_INT0_Handler+0xe8>)
  401c5a:	4798      	blx	r3
				data[i] = rx_element_fifo.data[i];
  401c5c:	e7ae      	b.n	401bbc <MCAN0_INT0_Handler+0x1c>
  401c5e:	bf00      	nop
  401c60:	204015ac 	.word	0x204015ac
  401c64:	204015a8 	.word	0x204015a8
  401c68:	204015b4 	.word	0x204015b4
  401c6c:	004008a5 	.word	0x004008a5
  401c70:	004016cb 	.word	0x004016cb
  401c74:	00401509 	.word	0x00401509
  401c78:	004067f0 	.word	0x004067f0
  401c7c:	00401ee1 	.word	0x00401ee1
  401c80:	0040082b 	.word	0x0040082b
  401c84:	00406810 	.word	0x00406810
  401c88:	0040174d 	.word	0x0040174d

00401c8c <MCAN1_INT0_Handler>:
			}
			id = rx_element_fifo.R0.bit.ID;
			received_message.data = data;
			/* Filter out only the 11 first bits of ID */
  401c8c:	b530      	push	{r4, r5, lr}
  401c8e:	b095      	sub	sp, #84	; 0x54
	return module_inst->hw->MCAN_IR;
  401c90:	4b2e      	ldr	r3, [pc, #184]	; (401d4c <MCAN1_INT0_Handler+0xc0>)
  401c92:	681b      	ldr	r3, [r3, #0]
  401c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
			received_message.id = (id & 0x7FF) >> 1;
			/* Call method to be implemented in MCU code */
  401c96:	9213      	str	r2, [sp, #76]	; 0x4c
			message_received(&received_message);
		}
		else
		{
			printf("Extended ID not supported!\r\n");
		}
  401c98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  401c9a:	f012 0f01 	tst.w	r2, #1
  401c9e:	d105      	bne.n	401cac <MCAN1_INT0_Handler+0x20>
		mcan_clear_interrupt_status(&module_1, MCAN_RX_FIFO_0_NEW_MESSAGE);
		mcan_get_rx_fifo_0_element(&module_1, &rx_element_fifo, fifo_receive_index);
		mcan_rx_fifo_acknowledge(&module_1, 0, fifo_receive_index);
		fifo_receive_index++;
		if(fifo_receive_index == CONF_MCAN1_RX_FIFO_0_NUM)
		{
  401ca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401ca2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401ca6:	d143      	bne.n	401d30 <MCAN1_INT0_Handler+0xa4>
			fifo_receive_index = 0;
		}
		if(!rx_element_fifo.R0.bit.XTD)
		{
			uint32_t dataSize = dlc_to_data_size(rx_element_fifo.R1.bit.DLC);
			received_message.dataSize = dataSize;
  401ca8:	b015      	add	sp, #84	; 0x54
  401caa:	bd30      	pop	{r4, r5, pc}
	module_inst->hw->MCAN_IR = source;
  401cac:	2201      	movs	r2, #1
  401cae:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_clear_interrupt_status(&module_0, MCAN_BUS_OFF);
  401cb0:	4c27      	ldr	r4, [pc, #156]	; (401d50 <MCAN1_INT0_Handler+0xc4>)
  401cb2:	6822      	ldr	r2, [r4, #0]
  401cb4:	4d25      	ldr	r5, [pc, #148]	; (401d4c <MCAN1_INT0_Handler+0xc0>)
  401cb6:	4927      	ldr	r1, [pc, #156]	; (401d54 <MCAN1_INT0_Handler+0xc8>)
  401cb8:	4628      	mov	r0, r5
  401cba:	4b27      	ldr	r3, [pc, #156]	; (401d58 <MCAN1_INT0_Handler+0xcc>)
  401cbc:	4798      	blx	r3
		mcan_stop(&module_0);
  401cbe:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  401cc0:	682a      	ldr	r2, [r5, #0]
  401cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  401cc6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  401cca:	6823      	ldr	r3, [r4, #0]
  401ccc:	3301      	adds	r3, #1
  401cce:	6023      	str	r3, [r4, #0]
		init_can_module();
  401cd0:	6823      	ldr	r3, [r4, #0]
  401cd2:	2b01      	cmp	r3, #1
  401cd4:	d025      	beq.n	401d22 <MCAN1_INT0_Handler+0x96>

  401cd6:	4b1f      	ldr	r3, [pc, #124]	; (401d54 <MCAN1_INT0_Handler+0xc8>)
  401cd8:	681b      	ldr	r3, [r3, #0]
  401cda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  401cde:	d123      	bne.n	401d28 <MCAN1_INT0_Handler+0x9c>
void MCAN1_INT0_Handler(void)
  401ce0:	4b1c      	ldr	r3, [pc, #112]	; (401d54 <MCAN1_INT0_Handler+0xc8>)
  401ce2:	6858      	ldr	r0, [r3, #4]
  401ce4:	f3c0 4003 	ubfx	r0, r0, #16, #4
  401ce8:	4b1c      	ldr	r3, [pc, #112]	; (401d5c <MCAN1_INT0_Handler+0xd0>)
  401cea:	4798      	blx	r3
{
  401cec:	f88d 0008 	strb.w	r0, [sp, #8]
	volatile uint32_t status;
  401cf0:	b158      	cbz	r0, 401d0a <MCAN1_INT0_Handler+0x7e>
  401cf2:	4918      	ldr	r1, [pc, #96]	; (401d54 <MCAN1_INT0_Handler+0xc8>)
  401cf4:	1dcb      	adds	r3, r1, #7
  401cf6:	f10d 020b 	add.w	r2, sp, #11
  401cfa:	3007      	adds	r0, #7
  401cfc:	4408      	add	r0, r1
	
  401cfe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401d02:	f802 1f01 	strb.w	r1, [r2, #1]!
	volatile uint32_t status;
  401d06:	4283      	cmp	r3, r0
  401d08:	d1f9      	bne.n	401cfe <MCAN1_INT0_Handler+0x72>
	uint32_t id;
  401d0a:	4b12      	ldr	r3, [pc, #72]	; (401d54 <MCAN1_INT0_Handler+0xc8>)
  401d0c:	681b      	ldr	r3, [r3, #0]
	shift_can_message_t received_message;
  401d0e:	aa03      	add	r2, sp, #12
  401d10:	9201      	str	r2, [sp, #4]
	
  401d12:	f3c3 0349 	ubfx	r3, r3, #1, #10
  401d16:	a814      	add	r0, sp, #80	; 0x50
  401d18:	f840 3d50 	str.w	r3, [r0, #-80]!
	if(status & MCAN_RX_FIFO_0_NEW_MESSAGE)
  401d1c:	4b10      	ldr	r3, [pc, #64]	; (401d60 <MCAN1_INT0_Handler+0xd4>)
  401d1e:	4798      	blx	r3
  401d20:	e7be      	b.n	401ca0 <MCAN1_INT0_Handler+0x14>

  401d22:	2200      	movs	r2, #0
  401d24:	6022      	str	r2, [r4, #0]
  401d26:	e7d6      	b.n	401cd6 <MCAN1_INT0_Handler+0x4a>
		mcan_rx_fifo_acknowledge(&module_1, 0, fifo_receive_index);
  401d28:	480e      	ldr	r0, [pc, #56]	; (401d64 <MCAN1_INT0_Handler+0xd8>)
  401d2a:	4b0f      	ldr	r3, [pc, #60]	; (401d68 <MCAN1_INT0_Handler+0xdc>)
  401d2c:	4798      	blx	r3
  401d2e:	e7b7      	b.n	401ca0 <MCAN1_INT0_Handler+0x14>
	module_inst->hw->MCAN_IR = source;
  401d30:	4806      	ldr	r0, [pc, #24]	; (401d4c <MCAN1_INT0_Handler+0xc0>)
  401d32:	6803      	ldr	r3, [r0, #0]
  401d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401d38:	651a      	str	r2, [r3, #80]	; 0x50
		}
  401d3a:	4b0c      	ldr	r3, [pc, #48]	; (401d6c <MCAN1_INT0_Handler+0xe0>)
  401d3c:	4798      	blx	r3
		if(!rx_element_fifo.R0.bit.XTD)
  401d3e:	480c      	ldr	r0, [pc, #48]	; (401d70 <MCAN1_INT0_Handler+0xe4>)
  401d40:	4b09      	ldr	r3, [pc, #36]	; (401d68 <MCAN1_INT0_Handler+0xdc>)
  401d42:	4798      	blx	r3
		{
  401d44:	4b0b      	ldr	r3, [pc, #44]	; (401d74 <MCAN1_INT0_Handler+0xe8>)
  401d46:	4798      	blx	r3
			received_message.dataSize = dataSize;
  401d48:	e7ae      	b.n	401ca8 <MCAN1_INT0_Handler+0x1c>
  401d4a:	bf00      	nop
  401d4c:	204015b0 	.word	0x204015b0
  401d50:	204015a8 	.word	0x204015a8
  401d54:	204015b4 	.word	0x204015b4
  401d58:	004008a5 	.word	0x004008a5
  401d5c:	004016cb 	.word	0x004016cb
  401d60:	00401509 	.word	0x00401509
  401d64:	004067f0 	.word	0x004067f0
  401d68:	00401ee1 	.word	0x00401ee1
  401d6c:	0040082b 	.word	0x0040082b
  401d70:	00406810 	.word	0x00406810
  401d74:	0040174d 	.word	0x0040174d

00401d78 <toggle_led>:
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d78:	4b07      	ldr	r3, [pc, #28]	; (401d98 <toggle_led+0x20>)
  401d7a:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401d7e:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401d80:	f000 021f 	and.w	r2, r0, #31
  401d84:	2001      	movs	r0, #1
  401d86:	4090      	lsls	r0, r2
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401d8a:	4210      	tst	r0, r2
  401d8c:	d101      	bne.n	401d92 <toggle_led+0x1a>
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  401d8e:	6318      	str	r0, [r3, #48]	; 0x30
  401d90:	4770      	bx	lr
		port->PIO_CODR = mask;
  401d92:	6358      	str	r0, [r3, #52]	; 0x34
  401d94:	4770      	bx	lr
  401d96:	bf00      	nop
  401d98:	00200707 	.word	0x00200707

00401d9c <blink_led>:
{
	ioport_set_pin_level(pin, LED_INACTIVE_LEVEL);
}

void blink_led(uint32_t pin, uint32_t frequency)
{
  401d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d9e:	b085      	sub	sp, #20
  401da0:	4606      	mov	r6, r0
	tc_config(frequency*2);
  401da2:	004f      	lsls	r7, r1, #1
	pmc_enable_periph_clk(ID_TC0);
  401da4:	2017      	movs	r0, #23
  401da6:	4b22      	ldr	r3, [pc, #136]	; (401e30 <blink_led+0x94>)
  401da8:	4798      	blx	r3
	tc_find_mck_divisor(
  401daa:	4c22      	ldr	r4, [pc, #136]	; (401e34 <blink_led+0x98>)
  401dac:	9400      	str	r4, [sp, #0]
  401dae:	ab03      	add	r3, sp, #12
  401db0:	aa02      	add	r2, sp, #8
  401db2:	4621      	mov	r1, r4
  401db4:	4638      	mov	r0, r7
  401db6:	4d20      	ldr	r5, [pc, #128]	; (401e38 <blink_led+0x9c>)
  401db8:	47a8      	blx	r5
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  401dba:	4d20      	ldr	r5, [pc, #128]	; (401e3c <blink_led+0xa0>)
  401dbc:	9a03      	ldr	r2, [sp, #12]
  401dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401dc2:	2100      	movs	r1, #0
  401dc4:	4628      	mov	r0, r5
  401dc6:	4b1e      	ldr	r3, [pc, #120]	; (401e40 <blink_led+0xa4>)
  401dc8:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/frequency;
  401dca:	9a02      	ldr	r2, [sp, #8]
  401dcc:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(TC0, 0, counts);
  401dd0:	fbb2 f2f7 	udiv	r2, r2, r7
  401dd4:	2100      	movs	r1, #0
  401dd6:	4628      	mov	r0, r5
  401dd8:	4b1a      	ldr	r3, [pc, #104]	; (401e44 <blink_led+0xa8>)
  401dda:	4798      	blx	r3
	tc_enable_interrupt(TC0,
  401ddc:	2210      	movs	r2, #16
  401dde:	2100      	movs	r1, #0
  401de0:	4628      	mov	r0, r5
  401de2:	4b19      	ldr	r3, [pc, #100]	; (401e48 <blink_led+0xac>)
  401de4:	4798      	blx	r3
	tc_start(TC0,0);	
  401de6:	2100      	movs	r1, #0
  401de8:	4628      	mov	r0, r5
  401dea:	4b18      	ldr	r3, [pc, #96]	; (401e4c <blink_led+0xb0>)
  401dec:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401dee:	4b18      	ldr	r3, [pc, #96]	; (401e50 <blink_led+0xb4>)
  401df0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  401df8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401dfc:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401e00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401e04:	2100      	movs	r1, #0
  401e06:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401e0a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++)
	{
		if(blinking_leds[i] == 0)
  401e0c:	4b11      	ldr	r3, [pc, #68]	; (401e54 <blink_led+0xb8>)
  401e0e:	681b      	ldr	r3, [r3, #0]
  401e10:	b14b      	cbz	r3, 401e26 <blink_led+0x8a>
  401e12:	4a10      	ldr	r2, [pc, #64]	; (401e54 <blink_led+0xb8>)
	for(int i = 0; i < NUM_LEDS; i++)
  401e14:	2301      	movs	r3, #1
		if(blinking_leds[i] == 0)
  401e16:	f852 1f04 	ldr.w	r1, [r2, #4]!
  401e1a:	b129      	cbz	r1, 401e28 <blink_led+0x8c>
	for(int i = 0; i < NUM_LEDS; i++)
  401e1c:	3301      	adds	r3, #1
  401e1e:	2b0c      	cmp	r3, #12
  401e20:	d1f9      	bne.n	401e16 <blink_led+0x7a>
		{
			blinking_leds[i] = pin;
			break;
		}
	}
}
  401e22:	b005      	add	sp, #20
  401e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i = 0; i < NUM_LEDS; i++)
  401e26:	2300      	movs	r3, #0
			blinking_leds[i] = pin;
  401e28:	4a0a      	ldr	r2, [pc, #40]	; (401e54 <blink_led+0xb8>)
  401e2a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
			break;
  401e2e:	e7f8      	b.n	401e22 <blink_led+0x86>
  401e30:	00400abd 	.word	0x00400abd
  401e34:	11e1a300 	.word	0x11e1a300
  401e38:	00400c07 	.word	0x00400c07
  401e3c:	4000c000 	.word	0x4000c000
  401e40:	00400bcd 	.word	0x00400bcd
  401e44:	00400bef 	.word	0x00400bef
  401e48:	00400bf7 	.word	0x00400bf7
  401e4c:	00400be7 	.word	0x00400be7
  401e50:	e000e100 	.word	0xe000e100
  401e54:	2040163c 	.word	0x2040163c

00401e58 <TC0_Handler>:
		}
	}
}

void TC0_Handler(void)
{
  401e58:	b570      	push	{r4, r5, r6, lr}
	uint32_t dummy;
	dummy = tc_get_status(TC0,0);
  401e5a:	2100      	movs	r1, #0
  401e5c:	4808      	ldr	r0, [pc, #32]	; (401e80 <TC0_Handler+0x28>)
  401e5e:	4b09      	ldr	r3, [pc, #36]	; (401e84 <TC0_Handler+0x2c>)
  401e60:	4798      	blx	r3
  401e62:	4c09      	ldr	r4, [pc, #36]	; (401e88 <TC0_Handler+0x30>)
  401e64:	f104 0530 	add.w	r5, r4, #48	; 0x30
	UNUSED(dummy);
	for(int i = 0; i < NUM_LEDS; i++)
	{
		if(blinking_leds[i])
		{
			toggle_led(blinking_leds[i]);	
  401e68:	4e08      	ldr	r6, [pc, #32]	; (401e8c <TC0_Handler+0x34>)
  401e6a:	e001      	b.n	401e70 <TC0_Handler+0x18>
	for(int i = 0; i < NUM_LEDS; i++)
  401e6c:	42ac      	cmp	r4, r5
  401e6e:	d005      	beq.n	401e7c <TC0_Handler+0x24>
		if(blinking_leds[i])
  401e70:	f854 0b04 	ldr.w	r0, [r4], #4
  401e74:	2800      	cmp	r0, #0
  401e76:	d0f9      	beq.n	401e6c <TC0_Handler+0x14>
			toggle_led(blinking_leds[i]);	
  401e78:	47b0      	blx	r6
  401e7a:	e7f7      	b.n	401e6c <TC0_Handler+0x14>
		}	
	}
}
  401e7c:	bd70      	pop	{r4, r5, r6, pc}
  401e7e:	bf00      	nop
  401e80:	4000c000 	.word	0x4000c000
  401e84:	00400bff 	.word	0x00400bff
  401e88:	2040163c 	.word	0x2040163c
  401e8c:	00401d79 	.word	0x00401d79

00401e90 <__libc_init_array>:
  401e90:	b570      	push	{r4, r5, r6, lr}
  401e92:	4e0f      	ldr	r6, [pc, #60]	; (401ed0 <__libc_init_array+0x40>)
  401e94:	4d0f      	ldr	r5, [pc, #60]	; (401ed4 <__libc_init_array+0x44>)
  401e96:	1b76      	subs	r6, r6, r5
  401e98:	10b6      	asrs	r6, r6, #2
  401e9a:	bf18      	it	ne
  401e9c:	2400      	movne	r4, #0
  401e9e:	d005      	beq.n	401eac <__libc_init_array+0x1c>
  401ea0:	3401      	adds	r4, #1
  401ea2:	f855 3b04 	ldr.w	r3, [r5], #4
  401ea6:	4798      	blx	r3
  401ea8:	42a6      	cmp	r6, r4
  401eaa:	d1f9      	bne.n	401ea0 <__libc_init_array+0x10>
  401eac:	4e0a      	ldr	r6, [pc, #40]	; (401ed8 <__libc_init_array+0x48>)
  401eae:	4d0b      	ldr	r5, [pc, #44]	; (401edc <__libc_init_array+0x4c>)
  401eb0:	1b76      	subs	r6, r6, r5
  401eb2:	f004 fdcd 	bl	406a50 <_init>
  401eb6:	10b6      	asrs	r6, r6, #2
  401eb8:	bf18      	it	ne
  401eba:	2400      	movne	r4, #0
  401ebc:	d006      	beq.n	401ecc <__libc_init_array+0x3c>
  401ebe:	3401      	adds	r4, #1
  401ec0:	f855 3b04 	ldr.w	r3, [r5], #4
  401ec4:	4798      	blx	r3
  401ec6:	42a6      	cmp	r6, r4
  401ec8:	d1f9      	bne.n	401ebe <__libc_init_array+0x2e>
  401eca:	bd70      	pop	{r4, r5, r6, pc}
  401ecc:	bd70      	pop	{r4, r5, r6, pc}
  401ece:	bf00      	nop
  401ed0:	00406a5c 	.word	0x00406a5c
  401ed4:	00406a5c 	.word	0x00406a5c
  401ed8:	00406a64 	.word	0x00406a64
  401edc:	00406a5c 	.word	0x00406a5c

00401ee0 <iprintf>:
  401ee0:	b40f      	push	{r0, r1, r2, r3}
  401ee2:	b500      	push	{lr}
  401ee4:	4907      	ldr	r1, [pc, #28]	; (401f04 <iprintf+0x24>)
  401ee6:	b083      	sub	sp, #12
  401ee8:	ab04      	add	r3, sp, #16
  401eea:	6808      	ldr	r0, [r1, #0]
  401eec:	f853 2b04 	ldr.w	r2, [r3], #4
  401ef0:	6881      	ldr	r1, [r0, #8]
  401ef2:	9301      	str	r3, [sp, #4]
  401ef4:	f000 fa14 	bl	402320 <_vfiprintf_r>
  401ef8:	b003      	add	sp, #12
  401efa:	f85d eb04 	ldr.w	lr, [sp], #4
  401efe:	b004      	add	sp, #16
  401f00:	4770      	bx	lr
  401f02:	bf00      	nop
  401f04:	20400008 	.word	0x20400008

00401f08 <iscanf>:
  401f08:	b40f      	push	{r0, r1, r2, r3}
  401f0a:	b500      	push	{lr}
  401f0c:	4907      	ldr	r1, [pc, #28]	; (401f2c <iscanf+0x24>)
  401f0e:	b083      	sub	sp, #12
  401f10:	ab04      	add	r3, sp, #16
  401f12:	6808      	ldr	r0, [r1, #0]
  401f14:	f853 2b04 	ldr.w	r2, [r3], #4
  401f18:	6841      	ldr	r1, [r0, #4]
  401f1a:	9301      	str	r3, [sp, #4]
  401f1c:	f001 f88a 	bl	403034 <__svfiscanf_r>
  401f20:	b003      	add	sp, #12
  401f22:	f85d eb04 	ldr.w	lr, [sp], #4
  401f26:	b004      	add	sp, #16
  401f28:	4770      	bx	lr
  401f2a:	bf00      	nop
  401f2c:	20400008 	.word	0x20400008

00401f30 <memcpy>:
  401f30:	4684      	mov	ip, r0
  401f32:	ea41 0300 	orr.w	r3, r1, r0
  401f36:	f013 0303 	ands.w	r3, r3, #3
  401f3a:	d16d      	bne.n	402018 <memcpy+0xe8>
  401f3c:	3a40      	subs	r2, #64	; 0x40
  401f3e:	d341      	bcc.n	401fc4 <memcpy+0x94>
  401f40:	f851 3b04 	ldr.w	r3, [r1], #4
  401f44:	f840 3b04 	str.w	r3, [r0], #4
  401f48:	f851 3b04 	ldr.w	r3, [r1], #4
  401f4c:	f840 3b04 	str.w	r3, [r0], #4
  401f50:	f851 3b04 	ldr.w	r3, [r1], #4
  401f54:	f840 3b04 	str.w	r3, [r0], #4
  401f58:	f851 3b04 	ldr.w	r3, [r1], #4
  401f5c:	f840 3b04 	str.w	r3, [r0], #4
  401f60:	f851 3b04 	ldr.w	r3, [r1], #4
  401f64:	f840 3b04 	str.w	r3, [r0], #4
  401f68:	f851 3b04 	ldr.w	r3, [r1], #4
  401f6c:	f840 3b04 	str.w	r3, [r0], #4
  401f70:	f851 3b04 	ldr.w	r3, [r1], #4
  401f74:	f840 3b04 	str.w	r3, [r0], #4
  401f78:	f851 3b04 	ldr.w	r3, [r1], #4
  401f7c:	f840 3b04 	str.w	r3, [r0], #4
  401f80:	f851 3b04 	ldr.w	r3, [r1], #4
  401f84:	f840 3b04 	str.w	r3, [r0], #4
  401f88:	f851 3b04 	ldr.w	r3, [r1], #4
  401f8c:	f840 3b04 	str.w	r3, [r0], #4
  401f90:	f851 3b04 	ldr.w	r3, [r1], #4
  401f94:	f840 3b04 	str.w	r3, [r0], #4
  401f98:	f851 3b04 	ldr.w	r3, [r1], #4
  401f9c:	f840 3b04 	str.w	r3, [r0], #4
  401fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fa4:	f840 3b04 	str.w	r3, [r0], #4
  401fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fac:	f840 3b04 	str.w	r3, [r0], #4
  401fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fb4:	f840 3b04 	str.w	r3, [r0], #4
  401fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fbc:	f840 3b04 	str.w	r3, [r0], #4
  401fc0:	3a40      	subs	r2, #64	; 0x40
  401fc2:	d2bd      	bcs.n	401f40 <memcpy+0x10>
  401fc4:	3230      	adds	r2, #48	; 0x30
  401fc6:	d311      	bcc.n	401fec <memcpy+0xbc>
  401fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fcc:	f840 3b04 	str.w	r3, [r0], #4
  401fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fd4:	f840 3b04 	str.w	r3, [r0], #4
  401fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fdc:	f840 3b04 	str.w	r3, [r0], #4
  401fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fe4:	f840 3b04 	str.w	r3, [r0], #4
  401fe8:	3a10      	subs	r2, #16
  401fea:	d2ed      	bcs.n	401fc8 <memcpy+0x98>
  401fec:	320c      	adds	r2, #12
  401fee:	d305      	bcc.n	401ffc <memcpy+0xcc>
  401ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ff4:	f840 3b04 	str.w	r3, [r0], #4
  401ff8:	3a04      	subs	r2, #4
  401ffa:	d2f9      	bcs.n	401ff0 <memcpy+0xc0>
  401ffc:	3204      	adds	r2, #4
  401ffe:	d008      	beq.n	402012 <memcpy+0xe2>
  402000:	07d2      	lsls	r2, r2, #31
  402002:	bf1c      	itt	ne
  402004:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402008:	f800 3b01 	strbne.w	r3, [r0], #1
  40200c:	d301      	bcc.n	402012 <memcpy+0xe2>
  40200e:	880b      	ldrh	r3, [r1, #0]
  402010:	8003      	strh	r3, [r0, #0]
  402012:	4660      	mov	r0, ip
  402014:	4770      	bx	lr
  402016:	bf00      	nop
  402018:	2a08      	cmp	r2, #8
  40201a:	d313      	bcc.n	402044 <memcpy+0x114>
  40201c:	078b      	lsls	r3, r1, #30
  40201e:	d08d      	beq.n	401f3c <memcpy+0xc>
  402020:	f010 0303 	ands.w	r3, r0, #3
  402024:	d08a      	beq.n	401f3c <memcpy+0xc>
  402026:	f1c3 0304 	rsb	r3, r3, #4
  40202a:	1ad2      	subs	r2, r2, r3
  40202c:	07db      	lsls	r3, r3, #31
  40202e:	bf1c      	itt	ne
  402030:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402034:	f800 3b01 	strbne.w	r3, [r0], #1
  402038:	d380      	bcc.n	401f3c <memcpy+0xc>
  40203a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40203e:	f820 3b02 	strh.w	r3, [r0], #2
  402042:	e77b      	b.n	401f3c <memcpy+0xc>
  402044:	3a04      	subs	r2, #4
  402046:	d3d9      	bcc.n	401ffc <memcpy+0xcc>
  402048:	3a01      	subs	r2, #1
  40204a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40204e:	f800 3b01 	strb.w	r3, [r0], #1
  402052:	d2f9      	bcs.n	402048 <memcpy+0x118>
  402054:	780b      	ldrb	r3, [r1, #0]
  402056:	7003      	strb	r3, [r0, #0]
  402058:	784b      	ldrb	r3, [r1, #1]
  40205a:	7043      	strb	r3, [r0, #1]
  40205c:	788b      	ldrb	r3, [r1, #2]
  40205e:	7083      	strb	r3, [r0, #2]
  402060:	4660      	mov	r0, ip
  402062:	4770      	bx	lr

00402064 <memset>:
  402064:	b470      	push	{r4, r5, r6}
  402066:	0786      	lsls	r6, r0, #30
  402068:	d046      	beq.n	4020f8 <memset+0x94>
  40206a:	1e54      	subs	r4, r2, #1
  40206c:	2a00      	cmp	r2, #0
  40206e:	d041      	beq.n	4020f4 <memset+0x90>
  402070:	b2ca      	uxtb	r2, r1
  402072:	4603      	mov	r3, r0
  402074:	e002      	b.n	40207c <memset+0x18>
  402076:	f114 34ff 	adds.w	r4, r4, #4294967295
  40207a:	d33b      	bcc.n	4020f4 <memset+0x90>
  40207c:	f803 2b01 	strb.w	r2, [r3], #1
  402080:	079d      	lsls	r5, r3, #30
  402082:	d1f8      	bne.n	402076 <memset+0x12>
  402084:	2c03      	cmp	r4, #3
  402086:	d92e      	bls.n	4020e6 <memset+0x82>
  402088:	b2cd      	uxtb	r5, r1
  40208a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40208e:	2c0f      	cmp	r4, #15
  402090:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402094:	d919      	bls.n	4020ca <memset+0x66>
  402096:	f103 0210 	add.w	r2, r3, #16
  40209a:	4626      	mov	r6, r4
  40209c:	3e10      	subs	r6, #16
  40209e:	2e0f      	cmp	r6, #15
  4020a0:	f842 5c10 	str.w	r5, [r2, #-16]
  4020a4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4020a8:	f842 5c08 	str.w	r5, [r2, #-8]
  4020ac:	f842 5c04 	str.w	r5, [r2, #-4]
  4020b0:	f102 0210 	add.w	r2, r2, #16
  4020b4:	d8f2      	bhi.n	40209c <memset+0x38>
  4020b6:	f1a4 0210 	sub.w	r2, r4, #16
  4020ba:	f022 020f 	bic.w	r2, r2, #15
  4020be:	f004 040f 	and.w	r4, r4, #15
  4020c2:	3210      	adds	r2, #16
  4020c4:	2c03      	cmp	r4, #3
  4020c6:	4413      	add	r3, r2
  4020c8:	d90d      	bls.n	4020e6 <memset+0x82>
  4020ca:	461e      	mov	r6, r3
  4020cc:	4622      	mov	r2, r4
  4020ce:	3a04      	subs	r2, #4
  4020d0:	2a03      	cmp	r2, #3
  4020d2:	f846 5b04 	str.w	r5, [r6], #4
  4020d6:	d8fa      	bhi.n	4020ce <memset+0x6a>
  4020d8:	1f22      	subs	r2, r4, #4
  4020da:	f022 0203 	bic.w	r2, r2, #3
  4020de:	3204      	adds	r2, #4
  4020e0:	4413      	add	r3, r2
  4020e2:	f004 0403 	and.w	r4, r4, #3
  4020e6:	b12c      	cbz	r4, 4020f4 <memset+0x90>
  4020e8:	b2c9      	uxtb	r1, r1
  4020ea:	441c      	add	r4, r3
  4020ec:	f803 1b01 	strb.w	r1, [r3], #1
  4020f0:	429c      	cmp	r4, r3
  4020f2:	d1fb      	bne.n	4020ec <memset+0x88>
  4020f4:	bc70      	pop	{r4, r5, r6}
  4020f6:	4770      	bx	lr
  4020f8:	4614      	mov	r4, r2
  4020fa:	4603      	mov	r3, r0
  4020fc:	e7c2      	b.n	402084 <memset+0x20>
  4020fe:	bf00      	nop

00402100 <setbuf>:
  402100:	2900      	cmp	r1, #0
  402102:	bf0c      	ite	eq
  402104:	2202      	moveq	r2, #2
  402106:	2200      	movne	r2, #0
  402108:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40210c:	f000 b800 	b.w	402110 <setvbuf>

00402110 <setvbuf>:
  402110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402114:	4c61      	ldr	r4, [pc, #388]	; (40229c <setvbuf+0x18c>)
  402116:	6825      	ldr	r5, [r4, #0]
  402118:	b083      	sub	sp, #12
  40211a:	4604      	mov	r4, r0
  40211c:	460f      	mov	r7, r1
  40211e:	4690      	mov	r8, r2
  402120:	461e      	mov	r6, r3
  402122:	b115      	cbz	r5, 40212a <setvbuf+0x1a>
  402124:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402126:	2b00      	cmp	r3, #0
  402128:	d064      	beq.n	4021f4 <setvbuf+0xe4>
  40212a:	f1b8 0f02 	cmp.w	r8, #2
  40212e:	d006      	beq.n	40213e <setvbuf+0x2e>
  402130:	f1b8 0f01 	cmp.w	r8, #1
  402134:	f200 809f 	bhi.w	402276 <setvbuf+0x166>
  402138:	2e00      	cmp	r6, #0
  40213a:	f2c0 809c 	blt.w	402276 <setvbuf+0x166>
  40213e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402140:	07d8      	lsls	r0, r3, #31
  402142:	d534      	bpl.n	4021ae <setvbuf+0x9e>
  402144:	4621      	mov	r1, r4
  402146:	4628      	mov	r0, r5
  402148:	f001 fd92 	bl	403c70 <_fflush_r>
  40214c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40214e:	b141      	cbz	r1, 402162 <setvbuf+0x52>
  402150:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402154:	4299      	cmp	r1, r3
  402156:	d002      	beq.n	40215e <setvbuf+0x4e>
  402158:	4628      	mov	r0, r5
  40215a:	f001 fffb 	bl	404154 <_free_r>
  40215e:	2300      	movs	r3, #0
  402160:	6323      	str	r3, [r4, #48]	; 0x30
  402162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402166:	2200      	movs	r2, #0
  402168:	61a2      	str	r2, [r4, #24]
  40216a:	6062      	str	r2, [r4, #4]
  40216c:	061a      	lsls	r2, r3, #24
  40216e:	d43a      	bmi.n	4021e6 <setvbuf+0xd6>
  402170:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402174:	f023 0303 	bic.w	r3, r3, #3
  402178:	f1b8 0f02 	cmp.w	r8, #2
  40217c:	81a3      	strh	r3, [r4, #12]
  40217e:	d01d      	beq.n	4021bc <setvbuf+0xac>
  402180:	ab01      	add	r3, sp, #4
  402182:	466a      	mov	r2, sp
  402184:	4621      	mov	r1, r4
  402186:	4628      	mov	r0, r5
  402188:	f002 fac8 	bl	40471c <__swhatbuf_r>
  40218c:	89a3      	ldrh	r3, [r4, #12]
  40218e:	4318      	orrs	r0, r3
  402190:	81a0      	strh	r0, [r4, #12]
  402192:	2e00      	cmp	r6, #0
  402194:	d132      	bne.n	4021fc <setvbuf+0xec>
  402196:	9e00      	ldr	r6, [sp, #0]
  402198:	4630      	mov	r0, r6
  40219a:	f002 fb37 	bl	40480c <malloc>
  40219e:	4607      	mov	r7, r0
  4021a0:	2800      	cmp	r0, #0
  4021a2:	d06b      	beq.n	40227c <setvbuf+0x16c>
  4021a4:	89a3      	ldrh	r3, [r4, #12]
  4021a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021aa:	81a3      	strh	r3, [r4, #12]
  4021ac:	e028      	b.n	402200 <setvbuf+0xf0>
  4021ae:	89a3      	ldrh	r3, [r4, #12]
  4021b0:	0599      	lsls	r1, r3, #22
  4021b2:	d4c7      	bmi.n	402144 <setvbuf+0x34>
  4021b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4021b6:	f002 faad 	bl	404714 <__retarget_lock_acquire_recursive>
  4021ba:	e7c3      	b.n	402144 <setvbuf+0x34>
  4021bc:	2500      	movs	r5, #0
  4021be:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4021c0:	2600      	movs	r6, #0
  4021c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4021c6:	f043 0302 	orr.w	r3, r3, #2
  4021ca:	2001      	movs	r0, #1
  4021cc:	60a6      	str	r6, [r4, #8]
  4021ce:	07ce      	lsls	r6, r1, #31
  4021d0:	81a3      	strh	r3, [r4, #12]
  4021d2:	6022      	str	r2, [r4, #0]
  4021d4:	6122      	str	r2, [r4, #16]
  4021d6:	6160      	str	r0, [r4, #20]
  4021d8:	d401      	bmi.n	4021de <setvbuf+0xce>
  4021da:	0598      	lsls	r0, r3, #22
  4021dc:	d53e      	bpl.n	40225c <setvbuf+0x14c>
  4021de:	4628      	mov	r0, r5
  4021e0:	b003      	add	sp, #12
  4021e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021e6:	6921      	ldr	r1, [r4, #16]
  4021e8:	4628      	mov	r0, r5
  4021ea:	f001 ffb3 	bl	404154 <_free_r>
  4021ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4021f2:	e7bd      	b.n	402170 <setvbuf+0x60>
  4021f4:	4628      	mov	r0, r5
  4021f6:	f001 fda5 	bl	403d44 <__sinit>
  4021fa:	e796      	b.n	40212a <setvbuf+0x1a>
  4021fc:	2f00      	cmp	r7, #0
  4021fe:	d0cb      	beq.n	402198 <setvbuf+0x88>
  402200:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402202:	2b00      	cmp	r3, #0
  402204:	d033      	beq.n	40226e <setvbuf+0x15e>
  402206:	9b00      	ldr	r3, [sp, #0]
  402208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40220c:	6027      	str	r7, [r4, #0]
  40220e:	429e      	cmp	r6, r3
  402210:	bf1c      	itt	ne
  402212:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402216:	81a2      	strhne	r2, [r4, #12]
  402218:	f1b8 0f01 	cmp.w	r8, #1
  40221c:	bf04      	itt	eq
  40221e:	f042 0201 	orreq.w	r2, r2, #1
  402222:	81a2      	strheq	r2, [r4, #12]
  402224:	b292      	uxth	r2, r2
  402226:	f012 0308 	ands.w	r3, r2, #8
  40222a:	6127      	str	r7, [r4, #16]
  40222c:	6166      	str	r6, [r4, #20]
  40222e:	d00e      	beq.n	40224e <setvbuf+0x13e>
  402230:	07d1      	lsls	r1, r2, #31
  402232:	d51a      	bpl.n	40226a <setvbuf+0x15a>
  402234:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402236:	4276      	negs	r6, r6
  402238:	2300      	movs	r3, #0
  40223a:	f015 0501 	ands.w	r5, r5, #1
  40223e:	61a6      	str	r6, [r4, #24]
  402240:	60a3      	str	r3, [r4, #8]
  402242:	d009      	beq.n	402258 <setvbuf+0x148>
  402244:	2500      	movs	r5, #0
  402246:	4628      	mov	r0, r5
  402248:	b003      	add	sp, #12
  40224a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40224e:	60a3      	str	r3, [r4, #8]
  402250:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402252:	f015 0501 	ands.w	r5, r5, #1
  402256:	d1f5      	bne.n	402244 <setvbuf+0x134>
  402258:	0593      	lsls	r3, r2, #22
  40225a:	d4c0      	bmi.n	4021de <setvbuf+0xce>
  40225c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40225e:	f002 fa5b 	bl	404718 <__retarget_lock_release_recursive>
  402262:	4628      	mov	r0, r5
  402264:	b003      	add	sp, #12
  402266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40226a:	60a6      	str	r6, [r4, #8]
  40226c:	e7f0      	b.n	402250 <setvbuf+0x140>
  40226e:	4628      	mov	r0, r5
  402270:	f001 fd68 	bl	403d44 <__sinit>
  402274:	e7c7      	b.n	402206 <setvbuf+0xf6>
  402276:	f04f 35ff 	mov.w	r5, #4294967295
  40227a:	e7b0      	b.n	4021de <setvbuf+0xce>
  40227c:	f8dd 9000 	ldr.w	r9, [sp]
  402280:	45b1      	cmp	r9, r6
  402282:	d004      	beq.n	40228e <setvbuf+0x17e>
  402284:	4648      	mov	r0, r9
  402286:	f002 fac1 	bl	40480c <malloc>
  40228a:	4607      	mov	r7, r0
  40228c:	b920      	cbnz	r0, 402298 <setvbuf+0x188>
  40228e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402292:	f04f 35ff 	mov.w	r5, #4294967295
  402296:	e792      	b.n	4021be <setvbuf+0xae>
  402298:	464e      	mov	r6, r9
  40229a:	e783      	b.n	4021a4 <setvbuf+0x94>
  40229c:	20400008 	.word	0x20400008

004022a0 <__sprint_r.part.0>:
  4022a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4022a6:	049c      	lsls	r4, r3, #18
  4022a8:	4693      	mov	fp, r2
  4022aa:	d52f      	bpl.n	40230c <__sprint_r.part.0+0x6c>
  4022ac:	6893      	ldr	r3, [r2, #8]
  4022ae:	6812      	ldr	r2, [r2, #0]
  4022b0:	b353      	cbz	r3, 402308 <__sprint_r.part.0+0x68>
  4022b2:	460e      	mov	r6, r1
  4022b4:	4607      	mov	r7, r0
  4022b6:	f102 0908 	add.w	r9, r2, #8
  4022ba:	e919 0420 	ldmdb	r9, {r5, sl}
  4022be:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4022c2:	d017      	beq.n	4022f4 <__sprint_r.part.0+0x54>
  4022c4:	3d04      	subs	r5, #4
  4022c6:	2400      	movs	r4, #0
  4022c8:	e001      	b.n	4022ce <__sprint_r.part.0+0x2e>
  4022ca:	45a0      	cmp	r8, r4
  4022cc:	d010      	beq.n	4022f0 <__sprint_r.part.0+0x50>
  4022ce:	4632      	mov	r2, r6
  4022d0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4022d4:	4638      	mov	r0, r7
  4022d6:	f001 fdd7 	bl	403e88 <_fputwc_r>
  4022da:	1c43      	adds	r3, r0, #1
  4022dc:	f104 0401 	add.w	r4, r4, #1
  4022e0:	d1f3      	bne.n	4022ca <__sprint_r.part.0+0x2a>
  4022e2:	2300      	movs	r3, #0
  4022e4:	f8cb 3008 	str.w	r3, [fp, #8]
  4022e8:	f8cb 3004 	str.w	r3, [fp, #4]
  4022ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022f0:	f8db 3008 	ldr.w	r3, [fp, #8]
  4022f4:	f02a 0a03 	bic.w	sl, sl, #3
  4022f8:	eba3 030a 	sub.w	r3, r3, sl
  4022fc:	f8cb 3008 	str.w	r3, [fp, #8]
  402300:	f109 0908 	add.w	r9, r9, #8
  402304:	2b00      	cmp	r3, #0
  402306:	d1d8      	bne.n	4022ba <__sprint_r.part.0+0x1a>
  402308:	2000      	movs	r0, #0
  40230a:	e7ea      	b.n	4022e2 <__sprint_r.part.0+0x42>
  40230c:	f002 f808 	bl	404320 <__sfvwrite_r>
  402310:	2300      	movs	r3, #0
  402312:	f8cb 3008 	str.w	r3, [fp, #8]
  402316:	f8cb 3004 	str.w	r3, [fp, #4]
  40231a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40231e:	bf00      	nop

00402320 <_vfiprintf_r>:
  402320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402324:	b0ad      	sub	sp, #180	; 0xb4
  402326:	461d      	mov	r5, r3
  402328:	468b      	mov	fp, r1
  40232a:	4690      	mov	r8, r2
  40232c:	9307      	str	r3, [sp, #28]
  40232e:	9006      	str	r0, [sp, #24]
  402330:	b118      	cbz	r0, 40233a <_vfiprintf_r+0x1a>
  402332:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402334:	2b00      	cmp	r3, #0
  402336:	f000 80f3 	beq.w	402520 <_vfiprintf_r+0x200>
  40233a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40233e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402342:	07df      	lsls	r7, r3, #31
  402344:	b281      	uxth	r1, r0
  402346:	d402      	bmi.n	40234e <_vfiprintf_r+0x2e>
  402348:	058e      	lsls	r6, r1, #22
  40234a:	f140 80fc 	bpl.w	402546 <_vfiprintf_r+0x226>
  40234e:	048c      	lsls	r4, r1, #18
  402350:	d40a      	bmi.n	402368 <_vfiprintf_r+0x48>
  402352:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402356:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40235a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40235e:	f8ab 100c 	strh.w	r1, [fp, #12]
  402362:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402366:	b289      	uxth	r1, r1
  402368:	0708      	lsls	r0, r1, #28
  40236a:	f140 80b3 	bpl.w	4024d4 <_vfiprintf_r+0x1b4>
  40236e:	f8db 3010 	ldr.w	r3, [fp, #16]
  402372:	2b00      	cmp	r3, #0
  402374:	f000 80ae 	beq.w	4024d4 <_vfiprintf_r+0x1b4>
  402378:	f001 031a 	and.w	r3, r1, #26
  40237c:	2b0a      	cmp	r3, #10
  40237e:	f000 80b5 	beq.w	4024ec <_vfiprintf_r+0x1cc>
  402382:	2300      	movs	r3, #0
  402384:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402388:	930b      	str	r3, [sp, #44]	; 0x2c
  40238a:	9311      	str	r3, [sp, #68]	; 0x44
  40238c:	9310      	str	r3, [sp, #64]	; 0x40
  40238e:	9303      	str	r3, [sp, #12]
  402390:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402394:	46ca      	mov	sl, r9
  402396:	f8cd b010 	str.w	fp, [sp, #16]
  40239a:	f898 3000 	ldrb.w	r3, [r8]
  40239e:	4644      	mov	r4, r8
  4023a0:	b1fb      	cbz	r3, 4023e2 <_vfiprintf_r+0xc2>
  4023a2:	2b25      	cmp	r3, #37	; 0x25
  4023a4:	d102      	bne.n	4023ac <_vfiprintf_r+0x8c>
  4023a6:	e01c      	b.n	4023e2 <_vfiprintf_r+0xc2>
  4023a8:	2b25      	cmp	r3, #37	; 0x25
  4023aa:	d003      	beq.n	4023b4 <_vfiprintf_r+0x94>
  4023ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4023b0:	2b00      	cmp	r3, #0
  4023b2:	d1f9      	bne.n	4023a8 <_vfiprintf_r+0x88>
  4023b4:	eba4 0508 	sub.w	r5, r4, r8
  4023b8:	b19d      	cbz	r5, 4023e2 <_vfiprintf_r+0xc2>
  4023ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4023bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023be:	f8ca 8000 	str.w	r8, [sl]
  4023c2:	3301      	adds	r3, #1
  4023c4:	442a      	add	r2, r5
  4023c6:	2b07      	cmp	r3, #7
  4023c8:	f8ca 5004 	str.w	r5, [sl, #4]
  4023cc:	9211      	str	r2, [sp, #68]	; 0x44
  4023ce:	9310      	str	r3, [sp, #64]	; 0x40
  4023d0:	dd7a      	ble.n	4024c8 <_vfiprintf_r+0x1a8>
  4023d2:	2a00      	cmp	r2, #0
  4023d4:	f040 84b0 	bne.w	402d38 <_vfiprintf_r+0xa18>
  4023d8:	9b03      	ldr	r3, [sp, #12]
  4023da:	9210      	str	r2, [sp, #64]	; 0x40
  4023dc:	442b      	add	r3, r5
  4023de:	46ca      	mov	sl, r9
  4023e0:	9303      	str	r3, [sp, #12]
  4023e2:	7823      	ldrb	r3, [r4, #0]
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	f000 83e0 	beq.w	402baa <_vfiprintf_r+0x88a>
  4023ea:	2000      	movs	r0, #0
  4023ec:	f04f 0300 	mov.w	r3, #0
  4023f0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4023f4:	f104 0801 	add.w	r8, r4, #1
  4023f8:	7862      	ldrb	r2, [r4, #1]
  4023fa:	4605      	mov	r5, r0
  4023fc:	4606      	mov	r6, r0
  4023fe:	4603      	mov	r3, r0
  402400:	f04f 34ff 	mov.w	r4, #4294967295
  402404:	f108 0801 	add.w	r8, r8, #1
  402408:	f1a2 0120 	sub.w	r1, r2, #32
  40240c:	2958      	cmp	r1, #88	; 0x58
  40240e:	f200 82de 	bhi.w	4029ce <_vfiprintf_r+0x6ae>
  402412:	e8df f011 	tbh	[pc, r1, lsl #1]
  402416:	0221      	.short	0x0221
  402418:	02dc02dc 	.word	0x02dc02dc
  40241c:	02dc0229 	.word	0x02dc0229
  402420:	02dc02dc 	.word	0x02dc02dc
  402424:	02dc02dc 	.word	0x02dc02dc
  402428:	028902dc 	.word	0x028902dc
  40242c:	02dc0295 	.word	0x02dc0295
  402430:	02bd00a2 	.word	0x02bd00a2
  402434:	019f02dc 	.word	0x019f02dc
  402438:	01a401a4 	.word	0x01a401a4
  40243c:	01a401a4 	.word	0x01a401a4
  402440:	01a401a4 	.word	0x01a401a4
  402444:	01a401a4 	.word	0x01a401a4
  402448:	02dc01a4 	.word	0x02dc01a4
  40244c:	02dc02dc 	.word	0x02dc02dc
  402450:	02dc02dc 	.word	0x02dc02dc
  402454:	02dc02dc 	.word	0x02dc02dc
  402458:	02dc02dc 	.word	0x02dc02dc
  40245c:	01b202dc 	.word	0x01b202dc
  402460:	02dc02dc 	.word	0x02dc02dc
  402464:	02dc02dc 	.word	0x02dc02dc
  402468:	02dc02dc 	.word	0x02dc02dc
  40246c:	02dc02dc 	.word	0x02dc02dc
  402470:	02dc02dc 	.word	0x02dc02dc
  402474:	02dc0197 	.word	0x02dc0197
  402478:	02dc02dc 	.word	0x02dc02dc
  40247c:	02dc02dc 	.word	0x02dc02dc
  402480:	02dc019b 	.word	0x02dc019b
  402484:	025302dc 	.word	0x025302dc
  402488:	02dc02dc 	.word	0x02dc02dc
  40248c:	02dc02dc 	.word	0x02dc02dc
  402490:	02dc02dc 	.word	0x02dc02dc
  402494:	02dc02dc 	.word	0x02dc02dc
  402498:	02dc02dc 	.word	0x02dc02dc
  40249c:	021b025a 	.word	0x021b025a
  4024a0:	02dc02dc 	.word	0x02dc02dc
  4024a4:	026e02dc 	.word	0x026e02dc
  4024a8:	02dc021b 	.word	0x02dc021b
  4024ac:	027302dc 	.word	0x027302dc
  4024b0:	01f502dc 	.word	0x01f502dc
  4024b4:	02090182 	.word	0x02090182
  4024b8:	02dc02d7 	.word	0x02dc02d7
  4024bc:	02dc029a 	.word	0x02dc029a
  4024c0:	02dc00a7 	.word	0x02dc00a7
  4024c4:	022e02dc 	.word	0x022e02dc
  4024c8:	f10a 0a08 	add.w	sl, sl, #8
  4024cc:	9b03      	ldr	r3, [sp, #12]
  4024ce:	442b      	add	r3, r5
  4024d0:	9303      	str	r3, [sp, #12]
  4024d2:	e786      	b.n	4023e2 <_vfiprintf_r+0xc2>
  4024d4:	4659      	mov	r1, fp
  4024d6:	9806      	ldr	r0, [sp, #24]
  4024d8:	f001 fab6 	bl	403a48 <__swsetup_r>
  4024dc:	bb18      	cbnz	r0, 402526 <_vfiprintf_r+0x206>
  4024de:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4024e2:	f001 031a 	and.w	r3, r1, #26
  4024e6:	2b0a      	cmp	r3, #10
  4024e8:	f47f af4b 	bne.w	402382 <_vfiprintf_r+0x62>
  4024ec:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4024f0:	2b00      	cmp	r3, #0
  4024f2:	f6ff af46 	blt.w	402382 <_vfiprintf_r+0x62>
  4024f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4024fa:	07db      	lsls	r3, r3, #31
  4024fc:	d405      	bmi.n	40250a <_vfiprintf_r+0x1ea>
  4024fe:	058f      	lsls	r7, r1, #22
  402500:	d403      	bmi.n	40250a <_vfiprintf_r+0x1ea>
  402502:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402506:	f002 f907 	bl	404718 <__retarget_lock_release_recursive>
  40250a:	462b      	mov	r3, r5
  40250c:	4642      	mov	r2, r8
  40250e:	4659      	mov	r1, fp
  402510:	9806      	ldr	r0, [sp, #24]
  402512:	f000 fd4d 	bl	402fb0 <__sbprintf>
  402516:	9003      	str	r0, [sp, #12]
  402518:	9803      	ldr	r0, [sp, #12]
  40251a:	b02d      	add	sp, #180	; 0xb4
  40251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402520:	f001 fc10 	bl	403d44 <__sinit>
  402524:	e709      	b.n	40233a <_vfiprintf_r+0x1a>
  402526:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40252a:	07d9      	lsls	r1, r3, #31
  40252c:	d404      	bmi.n	402538 <_vfiprintf_r+0x218>
  40252e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402532:	059a      	lsls	r2, r3, #22
  402534:	f140 84aa 	bpl.w	402e8c <_vfiprintf_r+0xb6c>
  402538:	f04f 33ff 	mov.w	r3, #4294967295
  40253c:	9303      	str	r3, [sp, #12]
  40253e:	9803      	ldr	r0, [sp, #12]
  402540:	b02d      	add	sp, #180	; 0xb4
  402542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402546:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40254a:	f002 f8e3 	bl	404714 <__retarget_lock_acquire_recursive>
  40254e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402552:	b281      	uxth	r1, r0
  402554:	e6fb      	b.n	40234e <_vfiprintf_r+0x2e>
  402556:	4276      	negs	r6, r6
  402558:	9207      	str	r2, [sp, #28]
  40255a:	f043 0304 	orr.w	r3, r3, #4
  40255e:	f898 2000 	ldrb.w	r2, [r8]
  402562:	e74f      	b.n	402404 <_vfiprintf_r+0xe4>
  402564:	9608      	str	r6, [sp, #32]
  402566:	069e      	lsls	r6, r3, #26
  402568:	f100 8450 	bmi.w	402e0c <_vfiprintf_r+0xaec>
  40256c:	9907      	ldr	r1, [sp, #28]
  40256e:	06dd      	lsls	r5, r3, #27
  402570:	460a      	mov	r2, r1
  402572:	f100 83ef 	bmi.w	402d54 <_vfiprintf_r+0xa34>
  402576:	0658      	lsls	r0, r3, #25
  402578:	f140 83ec 	bpl.w	402d54 <_vfiprintf_r+0xa34>
  40257c:	880e      	ldrh	r6, [r1, #0]
  40257e:	3104      	adds	r1, #4
  402580:	2700      	movs	r7, #0
  402582:	2201      	movs	r2, #1
  402584:	9107      	str	r1, [sp, #28]
  402586:	f04f 0100 	mov.w	r1, #0
  40258a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40258e:	2500      	movs	r5, #0
  402590:	1c61      	adds	r1, r4, #1
  402592:	f000 8116 	beq.w	4027c2 <_vfiprintf_r+0x4a2>
  402596:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40259a:	9102      	str	r1, [sp, #8]
  40259c:	ea56 0107 	orrs.w	r1, r6, r7
  4025a0:	f040 8114 	bne.w	4027cc <_vfiprintf_r+0x4ac>
  4025a4:	2c00      	cmp	r4, #0
  4025a6:	f040 835c 	bne.w	402c62 <_vfiprintf_r+0x942>
  4025aa:	2a00      	cmp	r2, #0
  4025ac:	f040 83b7 	bne.w	402d1e <_vfiprintf_r+0x9fe>
  4025b0:	f013 0301 	ands.w	r3, r3, #1
  4025b4:	9305      	str	r3, [sp, #20]
  4025b6:	f000 8457 	beq.w	402e68 <_vfiprintf_r+0xb48>
  4025ba:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4025be:	2330      	movs	r3, #48	; 0x30
  4025c0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4025c4:	9b05      	ldr	r3, [sp, #20]
  4025c6:	42a3      	cmp	r3, r4
  4025c8:	bfb8      	it	lt
  4025ca:	4623      	movlt	r3, r4
  4025cc:	9301      	str	r3, [sp, #4]
  4025ce:	b10d      	cbz	r5, 4025d4 <_vfiprintf_r+0x2b4>
  4025d0:	3301      	adds	r3, #1
  4025d2:	9301      	str	r3, [sp, #4]
  4025d4:	9b02      	ldr	r3, [sp, #8]
  4025d6:	f013 0302 	ands.w	r3, r3, #2
  4025da:	9309      	str	r3, [sp, #36]	; 0x24
  4025dc:	d002      	beq.n	4025e4 <_vfiprintf_r+0x2c4>
  4025de:	9b01      	ldr	r3, [sp, #4]
  4025e0:	3302      	adds	r3, #2
  4025e2:	9301      	str	r3, [sp, #4]
  4025e4:	9b02      	ldr	r3, [sp, #8]
  4025e6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4025ea:	930a      	str	r3, [sp, #40]	; 0x28
  4025ec:	f040 8217 	bne.w	402a1e <_vfiprintf_r+0x6fe>
  4025f0:	9b08      	ldr	r3, [sp, #32]
  4025f2:	9a01      	ldr	r2, [sp, #4]
  4025f4:	1a9d      	subs	r5, r3, r2
  4025f6:	2d00      	cmp	r5, #0
  4025f8:	f340 8211 	ble.w	402a1e <_vfiprintf_r+0x6fe>
  4025fc:	2d10      	cmp	r5, #16
  4025fe:	f340 8490 	ble.w	402f22 <_vfiprintf_r+0xc02>
  402602:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402604:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402606:	4ec4      	ldr	r6, [pc, #784]	; (402918 <_vfiprintf_r+0x5f8>)
  402608:	46d6      	mov	lr, sl
  40260a:	2710      	movs	r7, #16
  40260c:	46a2      	mov	sl, r4
  40260e:	4619      	mov	r1, r3
  402610:	9c06      	ldr	r4, [sp, #24]
  402612:	e007      	b.n	402624 <_vfiprintf_r+0x304>
  402614:	f101 0c02 	add.w	ip, r1, #2
  402618:	f10e 0e08 	add.w	lr, lr, #8
  40261c:	4601      	mov	r1, r0
  40261e:	3d10      	subs	r5, #16
  402620:	2d10      	cmp	r5, #16
  402622:	dd11      	ble.n	402648 <_vfiprintf_r+0x328>
  402624:	1c48      	adds	r0, r1, #1
  402626:	3210      	adds	r2, #16
  402628:	2807      	cmp	r0, #7
  40262a:	9211      	str	r2, [sp, #68]	; 0x44
  40262c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402630:	9010      	str	r0, [sp, #64]	; 0x40
  402632:	ddef      	ble.n	402614 <_vfiprintf_r+0x2f4>
  402634:	2a00      	cmp	r2, #0
  402636:	f040 81e4 	bne.w	402a02 <_vfiprintf_r+0x6e2>
  40263a:	3d10      	subs	r5, #16
  40263c:	2d10      	cmp	r5, #16
  40263e:	4611      	mov	r1, r2
  402640:	f04f 0c01 	mov.w	ip, #1
  402644:	46ce      	mov	lr, r9
  402646:	dced      	bgt.n	402624 <_vfiprintf_r+0x304>
  402648:	4654      	mov	r4, sl
  40264a:	4661      	mov	r1, ip
  40264c:	46f2      	mov	sl, lr
  40264e:	442a      	add	r2, r5
  402650:	2907      	cmp	r1, #7
  402652:	9211      	str	r2, [sp, #68]	; 0x44
  402654:	f8ca 6000 	str.w	r6, [sl]
  402658:	f8ca 5004 	str.w	r5, [sl, #4]
  40265c:	9110      	str	r1, [sp, #64]	; 0x40
  40265e:	f300 82ec 	bgt.w	402c3a <_vfiprintf_r+0x91a>
  402662:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402666:	f10a 0a08 	add.w	sl, sl, #8
  40266a:	1c48      	adds	r0, r1, #1
  40266c:	2d00      	cmp	r5, #0
  40266e:	f040 81de 	bne.w	402a2e <_vfiprintf_r+0x70e>
  402672:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402674:	2b00      	cmp	r3, #0
  402676:	f000 81f8 	beq.w	402a6a <_vfiprintf_r+0x74a>
  40267a:	3202      	adds	r2, #2
  40267c:	a90e      	add	r1, sp, #56	; 0x38
  40267e:	2302      	movs	r3, #2
  402680:	2807      	cmp	r0, #7
  402682:	9211      	str	r2, [sp, #68]	; 0x44
  402684:	9010      	str	r0, [sp, #64]	; 0x40
  402686:	e88a 000a 	stmia.w	sl, {r1, r3}
  40268a:	f340 81ea 	ble.w	402a62 <_vfiprintf_r+0x742>
  40268e:	2a00      	cmp	r2, #0
  402690:	f040 838c 	bne.w	402dac <_vfiprintf_r+0xa8c>
  402694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402696:	2b80      	cmp	r3, #128	; 0x80
  402698:	f04f 0001 	mov.w	r0, #1
  40269c:	4611      	mov	r1, r2
  40269e:	46ca      	mov	sl, r9
  4026a0:	f040 81e7 	bne.w	402a72 <_vfiprintf_r+0x752>
  4026a4:	9b08      	ldr	r3, [sp, #32]
  4026a6:	9d01      	ldr	r5, [sp, #4]
  4026a8:	1b5e      	subs	r6, r3, r5
  4026aa:	2e00      	cmp	r6, #0
  4026ac:	f340 81e1 	ble.w	402a72 <_vfiprintf_r+0x752>
  4026b0:	2e10      	cmp	r6, #16
  4026b2:	4d9a      	ldr	r5, [pc, #616]	; (40291c <_vfiprintf_r+0x5fc>)
  4026b4:	f340 8450 	ble.w	402f58 <_vfiprintf_r+0xc38>
  4026b8:	46d4      	mov	ip, sl
  4026ba:	2710      	movs	r7, #16
  4026bc:	46a2      	mov	sl, r4
  4026be:	9c06      	ldr	r4, [sp, #24]
  4026c0:	e007      	b.n	4026d2 <_vfiprintf_r+0x3b2>
  4026c2:	f101 0e02 	add.w	lr, r1, #2
  4026c6:	f10c 0c08 	add.w	ip, ip, #8
  4026ca:	4601      	mov	r1, r0
  4026cc:	3e10      	subs	r6, #16
  4026ce:	2e10      	cmp	r6, #16
  4026d0:	dd11      	ble.n	4026f6 <_vfiprintf_r+0x3d6>
  4026d2:	1c48      	adds	r0, r1, #1
  4026d4:	3210      	adds	r2, #16
  4026d6:	2807      	cmp	r0, #7
  4026d8:	9211      	str	r2, [sp, #68]	; 0x44
  4026da:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4026de:	9010      	str	r0, [sp, #64]	; 0x40
  4026e0:	ddef      	ble.n	4026c2 <_vfiprintf_r+0x3a2>
  4026e2:	2a00      	cmp	r2, #0
  4026e4:	f040 829d 	bne.w	402c22 <_vfiprintf_r+0x902>
  4026e8:	3e10      	subs	r6, #16
  4026ea:	2e10      	cmp	r6, #16
  4026ec:	f04f 0e01 	mov.w	lr, #1
  4026f0:	4611      	mov	r1, r2
  4026f2:	46cc      	mov	ip, r9
  4026f4:	dced      	bgt.n	4026d2 <_vfiprintf_r+0x3b2>
  4026f6:	4654      	mov	r4, sl
  4026f8:	46e2      	mov	sl, ip
  4026fa:	4432      	add	r2, r6
  4026fc:	f1be 0f07 	cmp.w	lr, #7
  402700:	9211      	str	r2, [sp, #68]	; 0x44
  402702:	e88a 0060 	stmia.w	sl, {r5, r6}
  402706:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40270a:	f300 8369 	bgt.w	402de0 <_vfiprintf_r+0xac0>
  40270e:	f10a 0a08 	add.w	sl, sl, #8
  402712:	f10e 0001 	add.w	r0, lr, #1
  402716:	4671      	mov	r1, lr
  402718:	e1ab      	b.n	402a72 <_vfiprintf_r+0x752>
  40271a:	9608      	str	r6, [sp, #32]
  40271c:	f013 0220 	ands.w	r2, r3, #32
  402720:	f040 838c 	bne.w	402e3c <_vfiprintf_r+0xb1c>
  402724:	f013 0110 	ands.w	r1, r3, #16
  402728:	f040 831a 	bne.w	402d60 <_vfiprintf_r+0xa40>
  40272c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402730:	f000 8316 	beq.w	402d60 <_vfiprintf_r+0xa40>
  402734:	9807      	ldr	r0, [sp, #28]
  402736:	460a      	mov	r2, r1
  402738:	4601      	mov	r1, r0
  40273a:	3104      	adds	r1, #4
  40273c:	8806      	ldrh	r6, [r0, #0]
  40273e:	9107      	str	r1, [sp, #28]
  402740:	2700      	movs	r7, #0
  402742:	e720      	b.n	402586 <_vfiprintf_r+0x266>
  402744:	9608      	str	r6, [sp, #32]
  402746:	f043 0310 	orr.w	r3, r3, #16
  40274a:	e7e7      	b.n	40271c <_vfiprintf_r+0x3fc>
  40274c:	9608      	str	r6, [sp, #32]
  40274e:	f043 0310 	orr.w	r3, r3, #16
  402752:	e708      	b.n	402566 <_vfiprintf_r+0x246>
  402754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402758:	f898 2000 	ldrb.w	r2, [r8]
  40275c:	e652      	b.n	402404 <_vfiprintf_r+0xe4>
  40275e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402762:	2600      	movs	r6, #0
  402764:	f818 2b01 	ldrb.w	r2, [r8], #1
  402768:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40276c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402770:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402774:	2909      	cmp	r1, #9
  402776:	d9f5      	bls.n	402764 <_vfiprintf_r+0x444>
  402778:	e646      	b.n	402408 <_vfiprintf_r+0xe8>
  40277a:	9608      	str	r6, [sp, #32]
  40277c:	2800      	cmp	r0, #0
  40277e:	f040 8408 	bne.w	402f92 <_vfiprintf_r+0xc72>
  402782:	f043 0310 	orr.w	r3, r3, #16
  402786:	069e      	lsls	r6, r3, #26
  402788:	f100 834c 	bmi.w	402e24 <_vfiprintf_r+0xb04>
  40278c:	06dd      	lsls	r5, r3, #27
  40278e:	f100 82f3 	bmi.w	402d78 <_vfiprintf_r+0xa58>
  402792:	0658      	lsls	r0, r3, #25
  402794:	f140 82f0 	bpl.w	402d78 <_vfiprintf_r+0xa58>
  402798:	9d07      	ldr	r5, [sp, #28]
  40279a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40279e:	462a      	mov	r2, r5
  4027a0:	17f7      	asrs	r7, r6, #31
  4027a2:	3204      	adds	r2, #4
  4027a4:	4630      	mov	r0, r6
  4027a6:	4639      	mov	r1, r7
  4027a8:	9207      	str	r2, [sp, #28]
  4027aa:	2800      	cmp	r0, #0
  4027ac:	f171 0200 	sbcs.w	r2, r1, #0
  4027b0:	f2c0 835d 	blt.w	402e6e <_vfiprintf_r+0xb4e>
  4027b4:	1c61      	adds	r1, r4, #1
  4027b6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4027ba:	f04f 0201 	mov.w	r2, #1
  4027be:	f47f aeea 	bne.w	402596 <_vfiprintf_r+0x276>
  4027c2:	ea56 0107 	orrs.w	r1, r6, r7
  4027c6:	f000 824d 	beq.w	402c64 <_vfiprintf_r+0x944>
  4027ca:	9302      	str	r3, [sp, #8]
  4027cc:	2a01      	cmp	r2, #1
  4027ce:	f000 828c 	beq.w	402cea <_vfiprintf_r+0x9ca>
  4027d2:	2a02      	cmp	r2, #2
  4027d4:	f040 825c 	bne.w	402c90 <_vfiprintf_r+0x970>
  4027d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4027da:	46cb      	mov	fp, r9
  4027dc:	0933      	lsrs	r3, r6, #4
  4027de:	f006 010f 	and.w	r1, r6, #15
  4027e2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4027e6:	093a      	lsrs	r2, r7, #4
  4027e8:	461e      	mov	r6, r3
  4027ea:	4617      	mov	r7, r2
  4027ec:	5c43      	ldrb	r3, [r0, r1]
  4027ee:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4027f2:	ea56 0307 	orrs.w	r3, r6, r7
  4027f6:	d1f1      	bne.n	4027dc <_vfiprintf_r+0x4bc>
  4027f8:	eba9 030b 	sub.w	r3, r9, fp
  4027fc:	9305      	str	r3, [sp, #20]
  4027fe:	e6e1      	b.n	4025c4 <_vfiprintf_r+0x2a4>
  402800:	2800      	cmp	r0, #0
  402802:	f040 83c0 	bne.w	402f86 <_vfiprintf_r+0xc66>
  402806:	0699      	lsls	r1, r3, #26
  402808:	f100 8367 	bmi.w	402eda <_vfiprintf_r+0xbba>
  40280c:	06da      	lsls	r2, r3, #27
  40280e:	f100 80f1 	bmi.w	4029f4 <_vfiprintf_r+0x6d4>
  402812:	065b      	lsls	r3, r3, #25
  402814:	f140 80ee 	bpl.w	4029f4 <_vfiprintf_r+0x6d4>
  402818:	9a07      	ldr	r2, [sp, #28]
  40281a:	6813      	ldr	r3, [r2, #0]
  40281c:	3204      	adds	r2, #4
  40281e:	9207      	str	r2, [sp, #28]
  402820:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  402824:	801a      	strh	r2, [r3, #0]
  402826:	e5b8      	b.n	40239a <_vfiprintf_r+0x7a>
  402828:	9807      	ldr	r0, [sp, #28]
  40282a:	4a3d      	ldr	r2, [pc, #244]	; (402920 <_vfiprintf_r+0x600>)
  40282c:	9608      	str	r6, [sp, #32]
  40282e:	920b      	str	r2, [sp, #44]	; 0x2c
  402830:	6806      	ldr	r6, [r0, #0]
  402832:	2278      	movs	r2, #120	; 0x78
  402834:	2130      	movs	r1, #48	; 0x30
  402836:	3004      	adds	r0, #4
  402838:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40283c:	f043 0302 	orr.w	r3, r3, #2
  402840:	9007      	str	r0, [sp, #28]
  402842:	2700      	movs	r7, #0
  402844:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402848:	2202      	movs	r2, #2
  40284a:	e69c      	b.n	402586 <_vfiprintf_r+0x266>
  40284c:	9608      	str	r6, [sp, #32]
  40284e:	2800      	cmp	r0, #0
  402850:	d099      	beq.n	402786 <_vfiprintf_r+0x466>
  402852:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402856:	e796      	b.n	402786 <_vfiprintf_r+0x466>
  402858:	f898 2000 	ldrb.w	r2, [r8]
  40285c:	2d00      	cmp	r5, #0
  40285e:	f47f add1 	bne.w	402404 <_vfiprintf_r+0xe4>
  402862:	2001      	movs	r0, #1
  402864:	2520      	movs	r5, #32
  402866:	e5cd      	b.n	402404 <_vfiprintf_r+0xe4>
  402868:	f043 0301 	orr.w	r3, r3, #1
  40286c:	f898 2000 	ldrb.w	r2, [r8]
  402870:	e5c8      	b.n	402404 <_vfiprintf_r+0xe4>
  402872:	9608      	str	r6, [sp, #32]
  402874:	2800      	cmp	r0, #0
  402876:	f040 8393 	bne.w	402fa0 <_vfiprintf_r+0xc80>
  40287a:	4929      	ldr	r1, [pc, #164]	; (402920 <_vfiprintf_r+0x600>)
  40287c:	910b      	str	r1, [sp, #44]	; 0x2c
  40287e:	069f      	lsls	r7, r3, #26
  402880:	f100 82e8 	bmi.w	402e54 <_vfiprintf_r+0xb34>
  402884:	9807      	ldr	r0, [sp, #28]
  402886:	06de      	lsls	r6, r3, #27
  402888:	4601      	mov	r1, r0
  40288a:	f100 8270 	bmi.w	402d6e <_vfiprintf_r+0xa4e>
  40288e:	065d      	lsls	r5, r3, #25
  402890:	f140 826d 	bpl.w	402d6e <_vfiprintf_r+0xa4e>
  402894:	3104      	adds	r1, #4
  402896:	8806      	ldrh	r6, [r0, #0]
  402898:	9107      	str	r1, [sp, #28]
  40289a:	2700      	movs	r7, #0
  40289c:	07d8      	lsls	r0, r3, #31
  40289e:	f140 8222 	bpl.w	402ce6 <_vfiprintf_r+0x9c6>
  4028a2:	ea56 0107 	orrs.w	r1, r6, r7
  4028a6:	f000 821e 	beq.w	402ce6 <_vfiprintf_r+0x9c6>
  4028aa:	2130      	movs	r1, #48	; 0x30
  4028ac:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4028b0:	f043 0302 	orr.w	r3, r3, #2
  4028b4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4028b8:	2202      	movs	r2, #2
  4028ba:	e664      	b.n	402586 <_vfiprintf_r+0x266>
  4028bc:	9608      	str	r6, [sp, #32]
  4028be:	2800      	cmp	r0, #0
  4028c0:	f040 836b 	bne.w	402f9a <_vfiprintf_r+0xc7a>
  4028c4:	4917      	ldr	r1, [pc, #92]	; (402924 <_vfiprintf_r+0x604>)
  4028c6:	910b      	str	r1, [sp, #44]	; 0x2c
  4028c8:	e7d9      	b.n	40287e <_vfiprintf_r+0x55e>
  4028ca:	9907      	ldr	r1, [sp, #28]
  4028cc:	9608      	str	r6, [sp, #32]
  4028ce:	680a      	ldr	r2, [r1, #0]
  4028d0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4028d4:	f04f 0000 	mov.w	r0, #0
  4028d8:	460a      	mov	r2, r1
  4028da:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4028de:	3204      	adds	r2, #4
  4028e0:	2001      	movs	r0, #1
  4028e2:	9001      	str	r0, [sp, #4]
  4028e4:	9207      	str	r2, [sp, #28]
  4028e6:	9005      	str	r0, [sp, #20]
  4028e8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4028ec:	9302      	str	r3, [sp, #8]
  4028ee:	2400      	movs	r4, #0
  4028f0:	e670      	b.n	4025d4 <_vfiprintf_r+0x2b4>
  4028f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028f6:	f898 2000 	ldrb.w	r2, [r8]
  4028fa:	e583      	b.n	402404 <_vfiprintf_r+0xe4>
  4028fc:	f898 2000 	ldrb.w	r2, [r8]
  402900:	2a6c      	cmp	r2, #108	; 0x6c
  402902:	bf03      	ittte	eq
  402904:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402908:	f043 0320 	orreq.w	r3, r3, #32
  40290c:	f108 0801 	addeq.w	r8, r8, #1
  402910:	f043 0310 	orrne.w	r3, r3, #16
  402914:	e576      	b.n	402404 <_vfiprintf_r+0xe4>
  402916:	bf00      	nop
  402918:	004068f8 	.word	0x004068f8
  40291c:	00406908 	.word	0x00406908
  402920:	004068dc 	.word	0x004068dc
  402924:	004068c8 	.word	0x004068c8
  402928:	9907      	ldr	r1, [sp, #28]
  40292a:	680e      	ldr	r6, [r1, #0]
  40292c:	460a      	mov	r2, r1
  40292e:	2e00      	cmp	r6, #0
  402930:	f102 0204 	add.w	r2, r2, #4
  402934:	f6ff ae0f 	blt.w	402556 <_vfiprintf_r+0x236>
  402938:	9207      	str	r2, [sp, #28]
  40293a:	f898 2000 	ldrb.w	r2, [r8]
  40293e:	e561      	b.n	402404 <_vfiprintf_r+0xe4>
  402940:	f898 2000 	ldrb.w	r2, [r8]
  402944:	2001      	movs	r0, #1
  402946:	252b      	movs	r5, #43	; 0x2b
  402948:	e55c      	b.n	402404 <_vfiprintf_r+0xe4>
  40294a:	9907      	ldr	r1, [sp, #28]
  40294c:	9608      	str	r6, [sp, #32]
  40294e:	f8d1 b000 	ldr.w	fp, [r1]
  402952:	f04f 0200 	mov.w	r2, #0
  402956:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40295a:	1d0e      	adds	r6, r1, #4
  40295c:	f1bb 0f00 	cmp.w	fp, #0
  402960:	f000 82e5 	beq.w	402f2e <_vfiprintf_r+0xc0e>
  402964:	1c67      	adds	r7, r4, #1
  402966:	f000 82c4 	beq.w	402ef2 <_vfiprintf_r+0xbd2>
  40296a:	4622      	mov	r2, r4
  40296c:	2100      	movs	r1, #0
  40296e:	4658      	mov	r0, fp
  402970:	9301      	str	r3, [sp, #4]
  402972:	f002 fa4d 	bl	404e10 <memchr>
  402976:	9b01      	ldr	r3, [sp, #4]
  402978:	2800      	cmp	r0, #0
  40297a:	f000 82e5 	beq.w	402f48 <_vfiprintf_r+0xc28>
  40297e:	eba0 020b 	sub.w	r2, r0, fp
  402982:	9205      	str	r2, [sp, #20]
  402984:	9607      	str	r6, [sp, #28]
  402986:	9302      	str	r3, [sp, #8]
  402988:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40298c:	2400      	movs	r4, #0
  40298e:	e619      	b.n	4025c4 <_vfiprintf_r+0x2a4>
  402990:	f898 2000 	ldrb.w	r2, [r8]
  402994:	2a2a      	cmp	r2, #42	; 0x2a
  402996:	f108 0701 	add.w	r7, r8, #1
  40299a:	f000 82e9 	beq.w	402f70 <_vfiprintf_r+0xc50>
  40299e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4029a2:	2909      	cmp	r1, #9
  4029a4:	46b8      	mov	r8, r7
  4029a6:	f04f 0400 	mov.w	r4, #0
  4029aa:	f63f ad2d 	bhi.w	402408 <_vfiprintf_r+0xe8>
  4029ae:	f818 2b01 	ldrb.w	r2, [r8], #1
  4029b2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4029b6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4029ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4029be:	2909      	cmp	r1, #9
  4029c0:	d9f5      	bls.n	4029ae <_vfiprintf_r+0x68e>
  4029c2:	e521      	b.n	402408 <_vfiprintf_r+0xe8>
  4029c4:	f043 0320 	orr.w	r3, r3, #32
  4029c8:	f898 2000 	ldrb.w	r2, [r8]
  4029cc:	e51a      	b.n	402404 <_vfiprintf_r+0xe4>
  4029ce:	9608      	str	r6, [sp, #32]
  4029d0:	2800      	cmp	r0, #0
  4029d2:	f040 82db 	bne.w	402f8c <_vfiprintf_r+0xc6c>
  4029d6:	2a00      	cmp	r2, #0
  4029d8:	f000 80e7 	beq.w	402baa <_vfiprintf_r+0x88a>
  4029dc:	2101      	movs	r1, #1
  4029de:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4029e2:	f04f 0200 	mov.w	r2, #0
  4029e6:	9101      	str	r1, [sp, #4]
  4029e8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4029ec:	9105      	str	r1, [sp, #20]
  4029ee:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4029f2:	e77b      	b.n	4028ec <_vfiprintf_r+0x5cc>
  4029f4:	9a07      	ldr	r2, [sp, #28]
  4029f6:	6813      	ldr	r3, [r2, #0]
  4029f8:	3204      	adds	r2, #4
  4029fa:	9207      	str	r2, [sp, #28]
  4029fc:	9a03      	ldr	r2, [sp, #12]
  4029fe:	601a      	str	r2, [r3, #0]
  402a00:	e4cb      	b.n	40239a <_vfiprintf_r+0x7a>
  402a02:	aa0f      	add	r2, sp, #60	; 0x3c
  402a04:	9904      	ldr	r1, [sp, #16]
  402a06:	4620      	mov	r0, r4
  402a08:	f7ff fc4a 	bl	4022a0 <__sprint_r.part.0>
  402a0c:	2800      	cmp	r0, #0
  402a0e:	f040 8139 	bne.w	402c84 <_vfiprintf_r+0x964>
  402a12:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a16:	f101 0c01 	add.w	ip, r1, #1
  402a1a:	46ce      	mov	lr, r9
  402a1c:	e5ff      	b.n	40261e <_vfiprintf_r+0x2fe>
  402a1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a22:	1c48      	adds	r0, r1, #1
  402a24:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402a28:	2d00      	cmp	r5, #0
  402a2a:	f43f ae22 	beq.w	402672 <_vfiprintf_r+0x352>
  402a2e:	3201      	adds	r2, #1
  402a30:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402a34:	2101      	movs	r1, #1
  402a36:	2807      	cmp	r0, #7
  402a38:	9211      	str	r2, [sp, #68]	; 0x44
  402a3a:	9010      	str	r0, [sp, #64]	; 0x40
  402a3c:	f8ca 5000 	str.w	r5, [sl]
  402a40:	f8ca 1004 	str.w	r1, [sl, #4]
  402a44:	f340 8108 	ble.w	402c58 <_vfiprintf_r+0x938>
  402a48:	2a00      	cmp	r2, #0
  402a4a:	f040 81bc 	bne.w	402dc6 <_vfiprintf_r+0xaa6>
  402a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a50:	2b00      	cmp	r3, #0
  402a52:	f43f ae1f 	beq.w	402694 <_vfiprintf_r+0x374>
  402a56:	ab0e      	add	r3, sp, #56	; 0x38
  402a58:	2202      	movs	r2, #2
  402a5a:	4608      	mov	r0, r1
  402a5c:	931c      	str	r3, [sp, #112]	; 0x70
  402a5e:	921d      	str	r2, [sp, #116]	; 0x74
  402a60:	46ca      	mov	sl, r9
  402a62:	4601      	mov	r1, r0
  402a64:	f10a 0a08 	add.w	sl, sl, #8
  402a68:	3001      	adds	r0, #1
  402a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a6c:	2b80      	cmp	r3, #128	; 0x80
  402a6e:	f43f ae19 	beq.w	4026a4 <_vfiprintf_r+0x384>
  402a72:	9b05      	ldr	r3, [sp, #20]
  402a74:	1ae4      	subs	r4, r4, r3
  402a76:	2c00      	cmp	r4, #0
  402a78:	dd2e      	ble.n	402ad8 <_vfiprintf_r+0x7b8>
  402a7a:	2c10      	cmp	r4, #16
  402a7c:	4db3      	ldr	r5, [pc, #716]	; (402d4c <_vfiprintf_r+0xa2c>)
  402a7e:	dd1e      	ble.n	402abe <_vfiprintf_r+0x79e>
  402a80:	46d6      	mov	lr, sl
  402a82:	2610      	movs	r6, #16
  402a84:	9f06      	ldr	r7, [sp, #24]
  402a86:	f8dd a010 	ldr.w	sl, [sp, #16]
  402a8a:	e006      	b.n	402a9a <_vfiprintf_r+0x77a>
  402a8c:	1c88      	adds	r0, r1, #2
  402a8e:	f10e 0e08 	add.w	lr, lr, #8
  402a92:	4619      	mov	r1, r3
  402a94:	3c10      	subs	r4, #16
  402a96:	2c10      	cmp	r4, #16
  402a98:	dd10      	ble.n	402abc <_vfiprintf_r+0x79c>
  402a9a:	1c4b      	adds	r3, r1, #1
  402a9c:	3210      	adds	r2, #16
  402a9e:	2b07      	cmp	r3, #7
  402aa0:	9211      	str	r2, [sp, #68]	; 0x44
  402aa2:	e88e 0060 	stmia.w	lr, {r5, r6}
  402aa6:	9310      	str	r3, [sp, #64]	; 0x40
  402aa8:	ddf0      	ble.n	402a8c <_vfiprintf_r+0x76c>
  402aaa:	2a00      	cmp	r2, #0
  402aac:	d165      	bne.n	402b7a <_vfiprintf_r+0x85a>
  402aae:	3c10      	subs	r4, #16
  402ab0:	2c10      	cmp	r4, #16
  402ab2:	f04f 0001 	mov.w	r0, #1
  402ab6:	4611      	mov	r1, r2
  402ab8:	46ce      	mov	lr, r9
  402aba:	dcee      	bgt.n	402a9a <_vfiprintf_r+0x77a>
  402abc:	46f2      	mov	sl, lr
  402abe:	4422      	add	r2, r4
  402ac0:	2807      	cmp	r0, #7
  402ac2:	9211      	str	r2, [sp, #68]	; 0x44
  402ac4:	f8ca 5000 	str.w	r5, [sl]
  402ac8:	f8ca 4004 	str.w	r4, [sl, #4]
  402acc:	9010      	str	r0, [sp, #64]	; 0x40
  402ace:	f300 8085 	bgt.w	402bdc <_vfiprintf_r+0x8bc>
  402ad2:	f10a 0a08 	add.w	sl, sl, #8
  402ad6:	3001      	adds	r0, #1
  402ad8:	9905      	ldr	r1, [sp, #20]
  402ada:	f8ca b000 	str.w	fp, [sl]
  402ade:	440a      	add	r2, r1
  402ae0:	2807      	cmp	r0, #7
  402ae2:	9211      	str	r2, [sp, #68]	; 0x44
  402ae4:	f8ca 1004 	str.w	r1, [sl, #4]
  402ae8:	9010      	str	r0, [sp, #64]	; 0x40
  402aea:	f340 8082 	ble.w	402bf2 <_vfiprintf_r+0x8d2>
  402aee:	2a00      	cmp	r2, #0
  402af0:	f040 8118 	bne.w	402d24 <_vfiprintf_r+0xa04>
  402af4:	9b02      	ldr	r3, [sp, #8]
  402af6:	9210      	str	r2, [sp, #64]	; 0x40
  402af8:	0758      	lsls	r0, r3, #29
  402afa:	d535      	bpl.n	402b68 <_vfiprintf_r+0x848>
  402afc:	9b08      	ldr	r3, [sp, #32]
  402afe:	9901      	ldr	r1, [sp, #4]
  402b00:	1a5c      	subs	r4, r3, r1
  402b02:	2c00      	cmp	r4, #0
  402b04:	f340 80e7 	ble.w	402cd6 <_vfiprintf_r+0x9b6>
  402b08:	46ca      	mov	sl, r9
  402b0a:	2c10      	cmp	r4, #16
  402b0c:	f340 8218 	ble.w	402f40 <_vfiprintf_r+0xc20>
  402b10:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b12:	4e8f      	ldr	r6, [pc, #572]	; (402d50 <_vfiprintf_r+0xa30>)
  402b14:	9f06      	ldr	r7, [sp, #24]
  402b16:	f8dd b010 	ldr.w	fp, [sp, #16]
  402b1a:	2510      	movs	r5, #16
  402b1c:	e006      	b.n	402b2c <_vfiprintf_r+0x80c>
  402b1e:	1c88      	adds	r0, r1, #2
  402b20:	f10a 0a08 	add.w	sl, sl, #8
  402b24:	4619      	mov	r1, r3
  402b26:	3c10      	subs	r4, #16
  402b28:	2c10      	cmp	r4, #16
  402b2a:	dd11      	ble.n	402b50 <_vfiprintf_r+0x830>
  402b2c:	1c4b      	adds	r3, r1, #1
  402b2e:	3210      	adds	r2, #16
  402b30:	2b07      	cmp	r3, #7
  402b32:	9211      	str	r2, [sp, #68]	; 0x44
  402b34:	f8ca 6000 	str.w	r6, [sl]
  402b38:	f8ca 5004 	str.w	r5, [sl, #4]
  402b3c:	9310      	str	r3, [sp, #64]	; 0x40
  402b3e:	ddee      	ble.n	402b1e <_vfiprintf_r+0x7fe>
  402b40:	bb42      	cbnz	r2, 402b94 <_vfiprintf_r+0x874>
  402b42:	3c10      	subs	r4, #16
  402b44:	2c10      	cmp	r4, #16
  402b46:	f04f 0001 	mov.w	r0, #1
  402b4a:	4611      	mov	r1, r2
  402b4c:	46ca      	mov	sl, r9
  402b4e:	dced      	bgt.n	402b2c <_vfiprintf_r+0x80c>
  402b50:	4422      	add	r2, r4
  402b52:	2807      	cmp	r0, #7
  402b54:	9211      	str	r2, [sp, #68]	; 0x44
  402b56:	f8ca 6000 	str.w	r6, [sl]
  402b5a:	f8ca 4004 	str.w	r4, [sl, #4]
  402b5e:	9010      	str	r0, [sp, #64]	; 0x40
  402b60:	dd51      	ble.n	402c06 <_vfiprintf_r+0x8e6>
  402b62:	2a00      	cmp	r2, #0
  402b64:	f040 819b 	bne.w	402e9e <_vfiprintf_r+0xb7e>
  402b68:	9b03      	ldr	r3, [sp, #12]
  402b6a:	9a08      	ldr	r2, [sp, #32]
  402b6c:	9901      	ldr	r1, [sp, #4]
  402b6e:	428a      	cmp	r2, r1
  402b70:	bfac      	ite	ge
  402b72:	189b      	addge	r3, r3, r2
  402b74:	185b      	addlt	r3, r3, r1
  402b76:	9303      	str	r3, [sp, #12]
  402b78:	e04e      	b.n	402c18 <_vfiprintf_r+0x8f8>
  402b7a:	aa0f      	add	r2, sp, #60	; 0x3c
  402b7c:	4651      	mov	r1, sl
  402b7e:	4638      	mov	r0, r7
  402b80:	f7ff fb8e 	bl	4022a0 <__sprint_r.part.0>
  402b84:	2800      	cmp	r0, #0
  402b86:	f040 813f 	bne.w	402e08 <_vfiprintf_r+0xae8>
  402b8a:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b8e:	1c48      	adds	r0, r1, #1
  402b90:	46ce      	mov	lr, r9
  402b92:	e77f      	b.n	402a94 <_vfiprintf_r+0x774>
  402b94:	aa0f      	add	r2, sp, #60	; 0x3c
  402b96:	4659      	mov	r1, fp
  402b98:	4638      	mov	r0, r7
  402b9a:	f7ff fb81 	bl	4022a0 <__sprint_r.part.0>
  402b9e:	b960      	cbnz	r0, 402bba <_vfiprintf_r+0x89a>
  402ba0:	9910      	ldr	r1, [sp, #64]	; 0x40
  402ba2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ba4:	1c48      	adds	r0, r1, #1
  402ba6:	46ca      	mov	sl, r9
  402ba8:	e7bd      	b.n	402b26 <_vfiprintf_r+0x806>
  402baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402bac:	f8dd b010 	ldr.w	fp, [sp, #16]
  402bb0:	2b00      	cmp	r3, #0
  402bb2:	f040 81d4 	bne.w	402f5e <_vfiprintf_r+0xc3e>
  402bb6:	2300      	movs	r3, #0
  402bb8:	9310      	str	r3, [sp, #64]	; 0x40
  402bba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402bbe:	f013 0f01 	tst.w	r3, #1
  402bc2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402bc6:	d102      	bne.n	402bce <_vfiprintf_r+0x8ae>
  402bc8:	059a      	lsls	r2, r3, #22
  402bca:	f140 80de 	bpl.w	402d8a <_vfiprintf_r+0xa6a>
  402bce:	065b      	lsls	r3, r3, #25
  402bd0:	f53f acb2 	bmi.w	402538 <_vfiprintf_r+0x218>
  402bd4:	9803      	ldr	r0, [sp, #12]
  402bd6:	b02d      	add	sp, #180	; 0xb4
  402bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bdc:	2a00      	cmp	r2, #0
  402bde:	f040 8106 	bne.w	402dee <_vfiprintf_r+0xace>
  402be2:	9a05      	ldr	r2, [sp, #20]
  402be4:	921d      	str	r2, [sp, #116]	; 0x74
  402be6:	2301      	movs	r3, #1
  402be8:	9211      	str	r2, [sp, #68]	; 0x44
  402bea:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  402bee:	9310      	str	r3, [sp, #64]	; 0x40
  402bf0:	46ca      	mov	sl, r9
  402bf2:	f10a 0a08 	add.w	sl, sl, #8
  402bf6:	9b02      	ldr	r3, [sp, #8]
  402bf8:	0759      	lsls	r1, r3, #29
  402bfa:	d504      	bpl.n	402c06 <_vfiprintf_r+0x8e6>
  402bfc:	9b08      	ldr	r3, [sp, #32]
  402bfe:	9901      	ldr	r1, [sp, #4]
  402c00:	1a5c      	subs	r4, r3, r1
  402c02:	2c00      	cmp	r4, #0
  402c04:	dc81      	bgt.n	402b0a <_vfiprintf_r+0x7ea>
  402c06:	9b03      	ldr	r3, [sp, #12]
  402c08:	9908      	ldr	r1, [sp, #32]
  402c0a:	9801      	ldr	r0, [sp, #4]
  402c0c:	4281      	cmp	r1, r0
  402c0e:	bfac      	ite	ge
  402c10:	185b      	addge	r3, r3, r1
  402c12:	181b      	addlt	r3, r3, r0
  402c14:	9303      	str	r3, [sp, #12]
  402c16:	bb72      	cbnz	r2, 402c76 <_vfiprintf_r+0x956>
  402c18:	2300      	movs	r3, #0
  402c1a:	9310      	str	r3, [sp, #64]	; 0x40
  402c1c:	46ca      	mov	sl, r9
  402c1e:	f7ff bbbc 	b.w	40239a <_vfiprintf_r+0x7a>
  402c22:	aa0f      	add	r2, sp, #60	; 0x3c
  402c24:	9904      	ldr	r1, [sp, #16]
  402c26:	4620      	mov	r0, r4
  402c28:	f7ff fb3a 	bl	4022a0 <__sprint_r.part.0>
  402c2c:	bb50      	cbnz	r0, 402c84 <_vfiprintf_r+0x964>
  402c2e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402c30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c32:	f101 0e01 	add.w	lr, r1, #1
  402c36:	46cc      	mov	ip, r9
  402c38:	e548      	b.n	4026cc <_vfiprintf_r+0x3ac>
  402c3a:	2a00      	cmp	r2, #0
  402c3c:	f040 8140 	bne.w	402ec0 <_vfiprintf_r+0xba0>
  402c40:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402c44:	2900      	cmp	r1, #0
  402c46:	f000 811b 	beq.w	402e80 <_vfiprintf_r+0xb60>
  402c4a:	2201      	movs	r2, #1
  402c4c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402c50:	4610      	mov	r0, r2
  402c52:	921d      	str	r2, [sp, #116]	; 0x74
  402c54:	911c      	str	r1, [sp, #112]	; 0x70
  402c56:	46ca      	mov	sl, r9
  402c58:	4601      	mov	r1, r0
  402c5a:	f10a 0a08 	add.w	sl, sl, #8
  402c5e:	3001      	adds	r0, #1
  402c60:	e507      	b.n	402672 <_vfiprintf_r+0x352>
  402c62:	9b02      	ldr	r3, [sp, #8]
  402c64:	2a01      	cmp	r2, #1
  402c66:	f000 8098 	beq.w	402d9a <_vfiprintf_r+0xa7a>
  402c6a:	2a02      	cmp	r2, #2
  402c6c:	d10d      	bne.n	402c8a <_vfiprintf_r+0x96a>
  402c6e:	9302      	str	r3, [sp, #8]
  402c70:	2600      	movs	r6, #0
  402c72:	2700      	movs	r7, #0
  402c74:	e5b0      	b.n	4027d8 <_vfiprintf_r+0x4b8>
  402c76:	aa0f      	add	r2, sp, #60	; 0x3c
  402c78:	9904      	ldr	r1, [sp, #16]
  402c7a:	9806      	ldr	r0, [sp, #24]
  402c7c:	f7ff fb10 	bl	4022a0 <__sprint_r.part.0>
  402c80:	2800      	cmp	r0, #0
  402c82:	d0c9      	beq.n	402c18 <_vfiprintf_r+0x8f8>
  402c84:	f8dd b010 	ldr.w	fp, [sp, #16]
  402c88:	e797      	b.n	402bba <_vfiprintf_r+0x89a>
  402c8a:	9302      	str	r3, [sp, #8]
  402c8c:	2600      	movs	r6, #0
  402c8e:	2700      	movs	r7, #0
  402c90:	4649      	mov	r1, r9
  402c92:	e000      	b.n	402c96 <_vfiprintf_r+0x976>
  402c94:	4659      	mov	r1, fp
  402c96:	08f2      	lsrs	r2, r6, #3
  402c98:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402c9c:	08f8      	lsrs	r0, r7, #3
  402c9e:	f006 0307 	and.w	r3, r6, #7
  402ca2:	4607      	mov	r7, r0
  402ca4:	4616      	mov	r6, r2
  402ca6:	3330      	adds	r3, #48	; 0x30
  402ca8:	ea56 0207 	orrs.w	r2, r6, r7
  402cac:	f801 3c01 	strb.w	r3, [r1, #-1]
  402cb0:	f101 3bff 	add.w	fp, r1, #4294967295
  402cb4:	d1ee      	bne.n	402c94 <_vfiprintf_r+0x974>
  402cb6:	9a02      	ldr	r2, [sp, #8]
  402cb8:	07d6      	lsls	r6, r2, #31
  402cba:	f57f ad9d 	bpl.w	4027f8 <_vfiprintf_r+0x4d8>
  402cbe:	2b30      	cmp	r3, #48	; 0x30
  402cc0:	f43f ad9a 	beq.w	4027f8 <_vfiprintf_r+0x4d8>
  402cc4:	3902      	subs	r1, #2
  402cc6:	2330      	movs	r3, #48	; 0x30
  402cc8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402ccc:	eba9 0301 	sub.w	r3, r9, r1
  402cd0:	9305      	str	r3, [sp, #20]
  402cd2:	468b      	mov	fp, r1
  402cd4:	e476      	b.n	4025c4 <_vfiprintf_r+0x2a4>
  402cd6:	9b03      	ldr	r3, [sp, #12]
  402cd8:	9a08      	ldr	r2, [sp, #32]
  402cda:	428a      	cmp	r2, r1
  402cdc:	bfac      	ite	ge
  402cde:	189b      	addge	r3, r3, r2
  402ce0:	185b      	addlt	r3, r3, r1
  402ce2:	9303      	str	r3, [sp, #12]
  402ce4:	e798      	b.n	402c18 <_vfiprintf_r+0x8f8>
  402ce6:	2202      	movs	r2, #2
  402ce8:	e44d      	b.n	402586 <_vfiprintf_r+0x266>
  402cea:	2f00      	cmp	r7, #0
  402cec:	bf08      	it	eq
  402cee:	2e0a      	cmpeq	r6, #10
  402cf0:	d352      	bcc.n	402d98 <_vfiprintf_r+0xa78>
  402cf2:	46cb      	mov	fp, r9
  402cf4:	4630      	mov	r0, r6
  402cf6:	4639      	mov	r1, r7
  402cf8:	220a      	movs	r2, #10
  402cfa:	2300      	movs	r3, #0
  402cfc:	f003 fa60 	bl	4061c0 <__aeabi_uldivmod>
  402d00:	3230      	adds	r2, #48	; 0x30
  402d02:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402d06:	4630      	mov	r0, r6
  402d08:	4639      	mov	r1, r7
  402d0a:	2300      	movs	r3, #0
  402d0c:	220a      	movs	r2, #10
  402d0e:	f003 fa57 	bl	4061c0 <__aeabi_uldivmod>
  402d12:	4606      	mov	r6, r0
  402d14:	460f      	mov	r7, r1
  402d16:	ea56 0307 	orrs.w	r3, r6, r7
  402d1a:	d1eb      	bne.n	402cf4 <_vfiprintf_r+0x9d4>
  402d1c:	e56c      	b.n	4027f8 <_vfiprintf_r+0x4d8>
  402d1e:	9405      	str	r4, [sp, #20]
  402d20:	46cb      	mov	fp, r9
  402d22:	e44f      	b.n	4025c4 <_vfiprintf_r+0x2a4>
  402d24:	aa0f      	add	r2, sp, #60	; 0x3c
  402d26:	9904      	ldr	r1, [sp, #16]
  402d28:	9806      	ldr	r0, [sp, #24]
  402d2a:	f7ff fab9 	bl	4022a0 <__sprint_r.part.0>
  402d2e:	2800      	cmp	r0, #0
  402d30:	d1a8      	bne.n	402c84 <_vfiprintf_r+0x964>
  402d32:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d34:	46ca      	mov	sl, r9
  402d36:	e75e      	b.n	402bf6 <_vfiprintf_r+0x8d6>
  402d38:	aa0f      	add	r2, sp, #60	; 0x3c
  402d3a:	9904      	ldr	r1, [sp, #16]
  402d3c:	9806      	ldr	r0, [sp, #24]
  402d3e:	f7ff faaf 	bl	4022a0 <__sprint_r.part.0>
  402d42:	2800      	cmp	r0, #0
  402d44:	d19e      	bne.n	402c84 <_vfiprintf_r+0x964>
  402d46:	46ca      	mov	sl, r9
  402d48:	f7ff bbc0 	b.w	4024cc <_vfiprintf_r+0x1ac>
  402d4c:	00406908 	.word	0x00406908
  402d50:	004068f8 	.word	0x004068f8
  402d54:	3104      	adds	r1, #4
  402d56:	6816      	ldr	r6, [r2, #0]
  402d58:	9107      	str	r1, [sp, #28]
  402d5a:	2201      	movs	r2, #1
  402d5c:	2700      	movs	r7, #0
  402d5e:	e412      	b.n	402586 <_vfiprintf_r+0x266>
  402d60:	9807      	ldr	r0, [sp, #28]
  402d62:	4601      	mov	r1, r0
  402d64:	3104      	adds	r1, #4
  402d66:	6806      	ldr	r6, [r0, #0]
  402d68:	9107      	str	r1, [sp, #28]
  402d6a:	2700      	movs	r7, #0
  402d6c:	e40b      	b.n	402586 <_vfiprintf_r+0x266>
  402d6e:	680e      	ldr	r6, [r1, #0]
  402d70:	3104      	adds	r1, #4
  402d72:	9107      	str	r1, [sp, #28]
  402d74:	2700      	movs	r7, #0
  402d76:	e591      	b.n	40289c <_vfiprintf_r+0x57c>
  402d78:	9907      	ldr	r1, [sp, #28]
  402d7a:	680e      	ldr	r6, [r1, #0]
  402d7c:	460a      	mov	r2, r1
  402d7e:	17f7      	asrs	r7, r6, #31
  402d80:	3204      	adds	r2, #4
  402d82:	9207      	str	r2, [sp, #28]
  402d84:	4630      	mov	r0, r6
  402d86:	4639      	mov	r1, r7
  402d88:	e50f      	b.n	4027aa <_vfiprintf_r+0x48a>
  402d8a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402d8e:	f001 fcc3 	bl	404718 <__retarget_lock_release_recursive>
  402d92:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402d96:	e71a      	b.n	402bce <_vfiprintf_r+0x8ae>
  402d98:	9b02      	ldr	r3, [sp, #8]
  402d9a:	9302      	str	r3, [sp, #8]
  402d9c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402da0:	3630      	adds	r6, #48	; 0x30
  402da2:	2301      	movs	r3, #1
  402da4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402da8:	9305      	str	r3, [sp, #20]
  402daa:	e40b      	b.n	4025c4 <_vfiprintf_r+0x2a4>
  402dac:	aa0f      	add	r2, sp, #60	; 0x3c
  402dae:	9904      	ldr	r1, [sp, #16]
  402db0:	9806      	ldr	r0, [sp, #24]
  402db2:	f7ff fa75 	bl	4022a0 <__sprint_r.part.0>
  402db6:	2800      	cmp	r0, #0
  402db8:	f47f af64 	bne.w	402c84 <_vfiprintf_r+0x964>
  402dbc:	9910      	ldr	r1, [sp, #64]	; 0x40
  402dbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dc0:	1c48      	adds	r0, r1, #1
  402dc2:	46ca      	mov	sl, r9
  402dc4:	e651      	b.n	402a6a <_vfiprintf_r+0x74a>
  402dc6:	aa0f      	add	r2, sp, #60	; 0x3c
  402dc8:	9904      	ldr	r1, [sp, #16]
  402dca:	9806      	ldr	r0, [sp, #24]
  402dcc:	f7ff fa68 	bl	4022a0 <__sprint_r.part.0>
  402dd0:	2800      	cmp	r0, #0
  402dd2:	f47f af57 	bne.w	402c84 <_vfiprintf_r+0x964>
  402dd6:	9910      	ldr	r1, [sp, #64]	; 0x40
  402dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dda:	1c48      	adds	r0, r1, #1
  402ddc:	46ca      	mov	sl, r9
  402dde:	e448      	b.n	402672 <_vfiprintf_r+0x352>
  402de0:	2a00      	cmp	r2, #0
  402de2:	f040 8091 	bne.w	402f08 <_vfiprintf_r+0xbe8>
  402de6:	2001      	movs	r0, #1
  402de8:	4611      	mov	r1, r2
  402dea:	46ca      	mov	sl, r9
  402dec:	e641      	b.n	402a72 <_vfiprintf_r+0x752>
  402dee:	aa0f      	add	r2, sp, #60	; 0x3c
  402df0:	9904      	ldr	r1, [sp, #16]
  402df2:	9806      	ldr	r0, [sp, #24]
  402df4:	f7ff fa54 	bl	4022a0 <__sprint_r.part.0>
  402df8:	2800      	cmp	r0, #0
  402dfa:	f47f af43 	bne.w	402c84 <_vfiprintf_r+0x964>
  402dfe:	9810      	ldr	r0, [sp, #64]	; 0x40
  402e00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402e02:	3001      	adds	r0, #1
  402e04:	46ca      	mov	sl, r9
  402e06:	e667      	b.n	402ad8 <_vfiprintf_r+0x7b8>
  402e08:	46d3      	mov	fp, sl
  402e0a:	e6d6      	b.n	402bba <_vfiprintf_r+0x89a>
  402e0c:	9e07      	ldr	r6, [sp, #28]
  402e0e:	3607      	adds	r6, #7
  402e10:	f026 0207 	bic.w	r2, r6, #7
  402e14:	f102 0108 	add.w	r1, r2, #8
  402e18:	e9d2 6700 	ldrd	r6, r7, [r2]
  402e1c:	9107      	str	r1, [sp, #28]
  402e1e:	2201      	movs	r2, #1
  402e20:	f7ff bbb1 	b.w	402586 <_vfiprintf_r+0x266>
  402e24:	9e07      	ldr	r6, [sp, #28]
  402e26:	3607      	adds	r6, #7
  402e28:	f026 0607 	bic.w	r6, r6, #7
  402e2c:	e9d6 0100 	ldrd	r0, r1, [r6]
  402e30:	f106 0208 	add.w	r2, r6, #8
  402e34:	9207      	str	r2, [sp, #28]
  402e36:	4606      	mov	r6, r0
  402e38:	460f      	mov	r7, r1
  402e3a:	e4b6      	b.n	4027aa <_vfiprintf_r+0x48a>
  402e3c:	9e07      	ldr	r6, [sp, #28]
  402e3e:	3607      	adds	r6, #7
  402e40:	f026 0207 	bic.w	r2, r6, #7
  402e44:	f102 0108 	add.w	r1, r2, #8
  402e48:	e9d2 6700 	ldrd	r6, r7, [r2]
  402e4c:	9107      	str	r1, [sp, #28]
  402e4e:	2200      	movs	r2, #0
  402e50:	f7ff bb99 	b.w	402586 <_vfiprintf_r+0x266>
  402e54:	9e07      	ldr	r6, [sp, #28]
  402e56:	3607      	adds	r6, #7
  402e58:	f026 0107 	bic.w	r1, r6, #7
  402e5c:	f101 0008 	add.w	r0, r1, #8
  402e60:	9007      	str	r0, [sp, #28]
  402e62:	e9d1 6700 	ldrd	r6, r7, [r1]
  402e66:	e519      	b.n	40289c <_vfiprintf_r+0x57c>
  402e68:	46cb      	mov	fp, r9
  402e6a:	f7ff bbab 	b.w	4025c4 <_vfiprintf_r+0x2a4>
  402e6e:	252d      	movs	r5, #45	; 0x2d
  402e70:	4276      	negs	r6, r6
  402e72:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402e76:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402e7a:	2201      	movs	r2, #1
  402e7c:	f7ff bb88 	b.w	402590 <_vfiprintf_r+0x270>
  402e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e82:	b9b3      	cbnz	r3, 402eb2 <_vfiprintf_r+0xb92>
  402e84:	4611      	mov	r1, r2
  402e86:	2001      	movs	r0, #1
  402e88:	46ca      	mov	sl, r9
  402e8a:	e5f2      	b.n	402a72 <_vfiprintf_r+0x752>
  402e8c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402e90:	f001 fc42 	bl	404718 <__retarget_lock_release_recursive>
  402e94:	f04f 33ff 	mov.w	r3, #4294967295
  402e98:	9303      	str	r3, [sp, #12]
  402e9a:	f7ff bb50 	b.w	40253e <_vfiprintf_r+0x21e>
  402e9e:	aa0f      	add	r2, sp, #60	; 0x3c
  402ea0:	9904      	ldr	r1, [sp, #16]
  402ea2:	9806      	ldr	r0, [sp, #24]
  402ea4:	f7ff f9fc 	bl	4022a0 <__sprint_r.part.0>
  402ea8:	2800      	cmp	r0, #0
  402eaa:	f47f aeeb 	bne.w	402c84 <_vfiprintf_r+0x964>
  402eae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402eb0:	e6a9      	b.n	402c06 <_vfiprintf_r+0x8e6>
  402eb2:	ab0e      	add	r3, sp, #56	; 0x38
  402eb4:	2202      	movs	r2, #2
  402eb6:	931c      	str	r3, [sp, #112]	; 0x70
  402eb8:	921d      	str	r2, [sp, #116]	; 0x74
  402eba:	2001      	movs	r0, #1
  402ebc:	46ca      	mov	sl, r9
  402ebe:	e5d0      	b.n	402a62 <_vfiprintf_r+0x742>
  402ec0:	aa0f      	add	r2, sp, #60	; 0x3c
  402ec2:	9904      	ldr	r1, [sp, #16]
  402ec4:	9806      	ldr	r0, [sp, #24]
  402ec6:	f7ff f9eb 	bl	4022a0 <__sprint_r.part.0>
  402eca:	2800      	cmp	r0, #0
  402ecc:	f47f aeda 	bne.w	402c84 <_vfiprintf_r+0x964>
  402ed0:	9910      	ldr	r1, [sp, #64]	; 0x40
  402ed2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ed4:	1c48      	adds	r0, r1, #1
  402ed6:	46ca      	mov	sl, r9
  402ed8:	e5a4      	b.n	402a24 <_vfiprintf_r+0x704>
  402eda:	9a07      	ldr	r2, [sp, #28]
  402edc:	9903      	ldr	r1, [sp, #12]
  402ede:	6813      	ldr	r3, [r2, #0]
  402ee0:	17cd      	asrs	r5, r1, #31
  402ee2:	4608      	mov	r0, r1
  402ee4:	3204      	adds	r2, #4
  402ee6:	4629      	mov	r1, r5
  402ee8:	9207      	str	r2, [sp, #28]
  402eea:	e9c3 0100 	strd	r0, r1, [r3]
  402eee:	f7ff ba54 	b.w	40239a <_vfiprintf_r+0x7a>
  402ef2:	4658      	mov	r0, fp
  402ef4:	9607      	str	r6, [sp, #28]
  402ef6:	9302      	str	r3, [sp, #8]
  402ef8:	f002 fb22 	bl	405540 <strlen>
  402efc:	2400      	movs	r4, #0
  402efe:	9005      	str	r0, [sp, #20]
  402f00:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f04:	f7ff bb5e 	b.w	4025c4 <_vfiprintf_r+0x2a4>
  402f08:	aa0f      	add	r2, sp, #60	; 0x3c
  402f0a:	9904      	ldr	r1, [sp, #16]
  402f0c:	9806      	ldr	r0, [sp, #24]
  402f0e:	f7ff f9c7 	bl	4022a0 <__sprint_r.part.0>
  402f12:	2800      	cmp	r0, #0
  402f14:	f47f aeb6 	bne.w	402c84 <_vfiprintf_r+0x964>
  402f18:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f1c:	1c48      	adds	r0, r1, #1
  402f1e:	46ca      	mov	sl, r9
  402f20:	e5a7      	b.n	402a72 <_vfiprintf_r+0x752>
  402f22:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f26:	4e20      	ldr	r6, [pc, #128]	; (402fa8 <_vfiprintf_r+0xc88>)
  402f28:	3101      	adds	r1, #1
  402f2a:	f7ff bb90 	b.w	40264e <_vfiprintf_r+0x32e>
  402f2e:	2c06      	cmp	r4, #6
  402f30:	bf28      	it	cs
  402f32:	2406      	movcs	r4, #6
  402f34:	9405      	str	r4, [sp, #20]
  402f36:	9607      	str	r6, [sp, #28]
  402f38:	9401      	str	r4, [sp, #4]
  402f3a:	f8df b070 	ldr.w	fp, [pc, #112]	; 402fac <_vfiprintf_r+0xc8c>
  402f3e:	e4d5      	b.n	4028ec <_vfiprintf_r+0x5cc>
  402f40:	9810      	ldr	r0, [sp, #64]	; 0x40
  402f42:	4e19      	ldr	r6, [pc, #100]	; (402fa8 <_vfiprintf_r+0xc88>)
  402f44:	3001      	adds	r0, #1
  402f46:	e603      	b.n	402b50 <_vfiprintf_r+0x830>
  402f48:	9405      	str	r4, [sp, #20]
  402f4a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f4e:	9607      	str	r6, [sp, #28]
  402f50:	9302      	str	r3, [sp, #8]
  402f52:	4604      	mov	r4, r0
  402f54:	f7ff bb36 	b.w	4025c4 <_vfiprintf_r+0x2a4>
  402f58:	4686      	mov	lr, r0
  402f5a:	f7ff bbce 	b.w	4026fa <_vfiprintf_r+0x3da>
  402f5e:	9806      	ldr	r0, [sp, #24]
  402f60:	aa0f      	add	r2, sp, #60	; 0x3c
  402f62:	4659      	mov	r1, fp
  402f64:	f7ff f99c 	bl	4022a0 <__sprint_r.part.0>
  402f68:	2800      	cmp	r0, #0
  402f6a:	f43f ae24 	beq.w	402bb6 <_vfiprintf_r+0x896>
  402f6e:	e624      	b.n	402bba <_vfiprintf_r+0x89a>
  402f70:	9907      	ldr	r1, [sp, #28]
  402f72:	f898 2001 	ldrb.w	r2, [r8, #1]
  402f76:	680c      	ldr	r4, [r1, #0]
  402f78:	3104      	adds	r1, #4
  402f7a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402f7e:	46b8      	mov	r8, r7
  402f80:	9107      	str	r1, [sp, #28]
  402f82:	f7ff ba3f 	b.w	402404 <_vfiprintf_r+0xe4>
  402f86:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402f8a:	e43c      	b.n	402806 <_vfiprintf_r+0x4e6>
  402f8c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402f90:	e521      	b.n	4029d6 <_vfiprintf_r+0x6b6>
  402f92:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402f96:	f7ff bbf4 	b.w	402782 <_vfiprintf_r+0x462>
  402f9a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402f9e:	e491      	b.n	4028c4 <_vfiprintf_r+0x5a4>
  402fa0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fa4:	e469      	b.n	40287a <_vfiprintf_r+0x55a>
  402fa6:	bf00      	nop
  402fa8:	004068f8 	.word	0x004068f8
  402fac:	004068f0 	.word	0x004068f0

00402fb0 <__sbprintf>:
  402fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fb4:	460c      	mov	r4, r1
  402fb6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402fba:	8989      	ldrh	r1, [r1, #12]
  402fbc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402fbe:	89e5      	ldrh	r5, [r4, #14]
  402fc0:	9619      	str	r6, [sp, #100]	; 0x64
  402fc2:	f021 0102 	bic.w	r1, r1, #2
  402fc6:	4606      	mov	r6, r0
  402fc8:	69e0      	ldr	r0, [r4, #28]
  402fca:	f8ad 100c 	strh.w	r1, [sp, #12]
  402fce:	4617      	mov	r7, r2
  402fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402fd6:	f8ad 500e 	strh.w	r5, [sp, #14]
  402fda:	4698      	mov	r8, r3
  402fdc:	ad1a      	add	r5, sp, #104	; 0x68
  402fde:	2300      	movs	r3, #0
  402fe0:	9007      	str	r0, [sp, #28]
  402fe2:	a816      	add	r0, sp, #88	; 0x58
  402fe4:	9209      	str	r2, [sp, #36]	; 0x24
  402fe6:	9306      	str	r3, [sp, #24]
  402fe8:	9500      	str	r5, [sp, #0]
  402fea:	9504      	str	r5, [sp, #16]
  402fec:	9102      	str	r1, [sp, #8]
  402fee:	9105      	str	r1, [sp, #20]
  402ff0:	f001 fb8c 	bl	40470c <__retarget_lock_init_recursive>
  402ff4:	4643      	mov	r3, r8
  402ff6:	463a      	mov	r2, r7
  402ff8:	4669      	mov	r1, sp
  402ffa:	4630      	mov	r0, r6
  402ffc:	f7ff f990 	bl	402320 <_vfiprintf_r>
  403000:	1e05      	subs	r5, r0, #0
  403002:	db07      	blt.n	403014 <__sbprintf+0x64>
  403004:	4630      	mov	r0, r6
  403006:	4669      	mov	r1, sp
  403008:	f000 fe32 	bl	403c70 <_fflush_r>
  40300c:	2800      	cmp	r0, #0
  40300e:	bf18      	it	ne
  403010:	f04f 35ff 	movne.w	r5, #4294967295
  403014:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403018:	065b      	lsls	r3, r3, #25
  40301a:	d503      	bpl.n	403024 <__sbprintf+0x74>
  40301c:	89a3      	ldrh	r3, [r4, #12]
  40301e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403022:	81a3      	strh	r3, [r4, #12]
  403024:	9816      	ldr	r0, [sp, #88]	; 0x58
  403026:	f001 fb73 	bl	404710 <__retarget_lock_close_recursive>
  40302a:	4628      	mov	r0, r5
  40302c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403034 <__svfiscanf_r>:
  403034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403038:	468b      	mov	fp, r1
  40303a:	b0d9      	sub	sp, #356	; 0x164
  40303c:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40303e:	9306      	str	r3, [sp, #24]
  403040:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
  403044:	f011 0f01 	tst.w	r1, #1
  403048:	4607      	mov	r7, r0
  40304a:	b299      	uxth	r1, r3
  40304c:	d102      	bne.n	403054 <__svfiscanf_r+0x20>
  40304e:	058c      	lsls	r4, r1, #22
  403050:	f140 83e5 	bpl.w	40381e <__svfiscanf_r+0x7ea>
  403054:	0488      	lsls	r0, r1, #18
  403056:	d409      	bmi.n	40306c <__svfiscanf_r+0x38>
  403058:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
  40305c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403060:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403064:	f8ab 300c 	strh.w	r3, [fp, #12]
  403068:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
  40306c:	4614      	mov	r4, r2
  40306e:	4626      	mov	r6, r4
  403070:	2300      	movs	r3, #0
  403072:	9307      	str	r3, [sp, #28]
  403074:	9304      	str	r3, [sp, #16]
  403076:	469a      	mov	sl, r3
  403078:	9305      	str	r3, [sp, #20]
  40307a:	f816 3b01 	ldrb.w	r3, [r6], #1
  40307e:	930b      	str	r3, [sp, #44]	; 0x2c
  403080:	b363      	cbz	r3, 4030dc <__svfiscanf_r+0xa8>
  403082:	f001 fb35 	bl	4046f0 <__locale_ctype_ptr>
  403086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403088:	4418      	add	r0, r3
  40308a:	7845      	ldrb	r5, [r0, #1]
  40308c:	f015 0508 	ands.w	r5, r5, #8
  403090:	d033      	beq.n	4030fa <__svfiscanf_r+0xc6>
  403092:	f8db 2004 	ldr.w	r2, [fp, #4]
  403096:	e012      	b.n	4030be <__svfiscanf_r+0x8a>
  403098:	f001 fb2a 	bl	4046f0 <__locale_ctype_ptr>
  40309c:	f8db 3000 	ldr.w	r3, [fp]
  4030a0:	781a      	ldrb	r2, [r3, #0]
  4030a2:	4410      	add	r0, r2
  4030a4:	3301      	adds	r3, #1
  4030a6:	7842      	ldrb	r2, [r0, #1]
  4030a8:	0711      	lsls	r1, r2, #28
  4030aa:	d510      	bpl.n	4030ce <__svfiscanf_r+0x9a>
  4030ac:	f8db 2004 	ldr.w	r2, [fp, #4]
  4030b0:	f8cb 3000 	str.w	r3, [fp]
  4030b4:	3a01      	subs	r2, #1
  4030b6:	f10a 0a01 	add.w	sl, sl, #1
  4030ba:	f8cb 2004 	str.w	r2, [fp, #4]
  4030be:	2a00      	cmp	r2, #0
  4030c0:	dcea      	bgt.n	403098 <__svfiscanf_r+0x64>
  4030c2:	4659      	mov	r1, fp
  4030c4:	4638      	mov	r0, r7
  4030c6:	f002 f913 	bl	4052f0 <__srefill_r>
  4030ca:	2800      	cmp	r0, #0
  4030cc:	d0e4      	beq.n	403098 <__svfiscanf_r+0x64>
  4030ce:	4634      	mov	r4, r6
  4030d0:	4626      	mov	r6, r4
  4030d2:	f816 3b01 	ldrb.w	r3, [r6], #1
  4030d6:	930b      	str	r3, [sp, #44]	; 0x2c
  4030d8:	2b00      	cmp	r3, #0
  4030da:	d1d2      	bne.n	403082 <__svfiscanf_r+0x4e>
  4030dc:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4030e0:	07da      	lsls	r2, r3, #31
  4030e2:	f100 81a7 	bmi.w	403434 <__svfiscanf_r+0x400>
  4030e6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4030ea:	059b      	lsls	r3, r3, #22
  4030ec:	f100 81a2 	bmi.w	403434 <__svfiscanf_r+0x400>
  4030f0:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4030f4:	f001 fb10 	bl	404718 <__retarget_lock_release_recursive>
  4030f8:	e19c      	b.n	403434 <__svfiscanf_r+0x400>
  4030fa:	2b25      	cmp	r3, #37	; 0x25
  4030fc:	f040 8084 	bne.w	403208 <__svfiscanf_r+0x1d4>
  403100:	f894 8001 	ldrb.w	r8, [r4, #1]
  403104:	462c      	mov	r4, r5
  403106:	1c73      	adds	r3, r6, #1
  403108:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
  40310c:	f200 8196 	bhi.w	40343c <__svfiscanf_r+0x408>
  403110:	e8df f018 	tbh	[pc, r8, lsl #1]
  403114:	01940184 	.word	0x01940184
  403118:	01940194 	.word	0x01940194
  40311c:	01940194 	.word	0x01940194
  403120:	01940194 	.word	0x01940194
  403124:	01940194 	.word	0x01940194
  403128:	01940194 	.word	0x01940194
  40312c:	01940194 	.word	0x01940194
  403130:	01940194 	.word	0x01940194
  403134:	01940194 	.word	0x01940194
  403138:	01940194 	.word	0x01940194
  40313c:	01940194 	.word	0x01940194
  403140:	01940194 	.word	0x01940194
  403144:	01940194 	.word	0x01940194
  403148:	01940194 	.word	0x01940194
  40314c:	01940194 	.word	0x01940194
  403150:	01940194 	.word	0x01940194
  403154:	01940194 	.word	0x01940194
  403158:	01940194 	.word	0x01940194
  40315c:	00790194 	.word	0x00790194
  403160:	01940194 	.word	0x01940194
  403164:	01940194 	.word	0x01940194
  403168:	0194017e 	.word	0x0194017e
  40316c:	01940194 	.word	0x01940194
  403170:	01940194 	.word	0x01940194
  403174:	01750175 	.word	0x01750175
  403178:	01750175 	.word	0x01750175
  40317c:	01750175 	.word	0x01750175
  403180:	01750175 	.word	0x01750175
  403184:	01750175 	.word	0x01750175
  403188:	01940194 	.word	0x01940194
  40318c:	01940194 	.word	0x01940194
  403190:	01940194 	.word	0x01940194
  403194:	01940194 	.word	0x01940194
  403198:	01940194 	.word	0x01940194
  40319c:	01940171 	.word	0x01940171
  4031a0:	01940194 	.word	0x01940194
  4031a4:	01940194 	.word	0x01940194
  4031a8:	01940194 	.word	0x01940194
  4031ac:	0194016b 	.word	0x0194016b
  4031b0:	01310194 	.word	0x01310194
  4031b4:	01940194 	.word	0x01940194
  4031b8:	01940194 	.word	0x01940194
  4031bc:	01940194 	.word	0x01940194
  4031c0:	01940194 	.word	0x01940194
  4031c4:	01940128 	.word	0x01940128
  4031c8:	011f0194 	.word	0x011f0194
  4031cc:	01940194 	.word	0x01940194
  4031d0:	01940194 	.word	0x01940194
  4031d4:	01940194 	.word	0x01940194
  4031d8:	011a0194 	.word	0x011a0194
  4031dc:	01940108 	.word	0x01940108
  4031e0:	01940194 	.word	0x01940194
  4031e4:	00930102 	.word	0x00930102
  4031e8:	01940194 	.word	0x01940194
  4031ec:	01940161 	.word	0x01940161
  4031f0:	0148014a 	.word	0x0148014a
  4031f4:	01940144 	.word	0x01940144
  4031f8:	01410194 	.word	0x01410194
  4031fc:	013a0194 	.word	0x013a0194
  403200:	01940194 	.word	0x01940194
  403204:	0128      	.short	0x0128
  403206:	461e      	mov	r6, r3
  403208:	f8db 3004 	ldr.w	r3, [fp, #4]
  40320c:	2b00      	cmp	r3, #0
  40320e:	f340 8392 	ble.w	403936 <__svfiscanf_r+0x902>
  403212:	f8db 3000 	ldr.w	r3, [fp]
  403216:	f816 2c01 	ldrb.w	r2, [r6, #-1]
  40321a:	7819      	ldrb	r1, [r3, #0]
  40321c:	4291      	cmp	r1, r2
  40321e:	f47f af5d 	bne.w	4030dc <__svfiscanf_r+0xa8>
  403222:	f8db 2004 	ldr.w	r2, [fp, #4]
  403226:	3301      	adds	r3, #1
  403228:	3a01      	subs	r2, #1
  40322a:	f8cb 3000 	str.w	r3, [fp]
  40322e:	f10a 0a01 	add.w	sl, sl, #1
  403232:	f8cb 2004 	str.w	r2, [fp, #4]
  403236:	4634      	mov	r4, r6
  403238:	e74a      	b.n	4030d0 <__svfiscanf_r+0x9c>
  40323a:	9303      	str	r3, [sp, #12]
  40323c:	4bb2      	ldr	r3, [pc, #712]	; (403508 <__svfiscanf_r+0x4d4>)
  40323e:	9307      	str	r3, [sp, #28]
  403240:	2300      	movs	r3, #0
  403242:	9304      	str	r3, [sp, #16]
  403244:	2603      	movs	r6, #3
  403246:	f8db 3004 	ldr.w	r3, [fp, #4]
  40324a:	2b00      	cmp	r3, #0
  40324c:	dd75      	ble.n	40333a <__svfiscanf_r+0x306>
  40324e:	0669      	lsls	r1, r5, #25
  403250:	d533      	bpl.n	4032ba <__svfiscanf_r+0x286>
  403252:	2e02      	cmp	r6, #2
  403254:	f000 820d 	beq.w	403672 <__svfiscanf_r+0x63e>
  403258:	2e03      	cmp	r6, #3
  40325a:	f000 8159 	beq.w	403510 <__svfiscanf_r+0x4dc>
  40325e:	2e01      	cmp	r6, #1
  403260:	f000 8120 	beq.w	4034a4 <__svfiscanf_r+0x470>
  403264:	2c00      	cmp	r4, #0
  403266:	bf08      	it	eq
  403268:	2401      	moveq	r4, #1
  40326a:	f015 0301 	ands.w	r3, r5, #1
  40326e:	f040 825d 	bne.w	40372c <__svfiscanf_r+0x6f8>
  403272:	06ed      	lsls	r5, r5, #27
  403274:	f140 830b 	bpl.w	40388e <__svfiscanf_r+0x85a>
  403278:	461d      	mov	r5, r3
  40327a:	e009      	b.n	403290 <__svfiscanf_r+0x25c>
  40327c:	4413      	add	r3, r2
  40327e:	f8cb 3000 	str.w	r3, [fp]
  403282:	4415      	add	r5, r2
  403284:	1aa4      	subs	r4, r4, r2
  403286:	f002 f833 	bl	4052f0 <__srefill_r>
  40328a:	2800      	cmp	r0, #0
  40328c:	f040 82fb 	bne.w	403886 <__svfiscanf_r+0x852>
  403290:	f8db 2004 	ldr.w	r2, [fp, #4]
  403294:	f8db 3000 	ldr.w	r3, [fp]
  403298:	42a2      	cmp	r2, r4
  40329a:	4659      	mov	r1, fp
  40329c:	4638      	mov	r0, r7
  40329e:	dbed      	blt.n	40327c <__svfiscanf_r+0x248>
  4032a0:	1b12      	subs	r2, r2, r4
  4032a2:	4423      	add	r3, r4
  4032a4:	f8cb 2004 	str.w	r2, [fp, #4]
  4032a8:	4425      	add	r5, r4
  4032aa:	f8cb 3000 	str.w	r3, [fp]
  4032ae:	9e03      	ldr	r6, [sp, #12]
  4032b0:	44aa      	add	sl, r5
  4032b2:	4634      	mov	r4, r6
  4032b4:	e70c      	b.n	4030d0 <__svfiscanf_r+0x9c>
  4032b6:	f8cb 3000 	str.w	r3, [fp]
  4032ba:	f001 fa19 	bl	4046f0 <__locale_ctype_ptr>
  4032be:	f8db 3000 	ldr.w	r3, [fp]
  4032c2:	781a      	ldrb	r2, [r3, #0]
  4032c4:	4410      	add	r0, r2
  4032c6:	3301      	adds	r3, #1
  4032c8:	7842      	ldrb	r2, [r0, #1]
  4032ca:	0712      	lsls	r2, r2, #28
  4032cc:	d5c1      	bpl.n	403252 <__svfiscanf_r+0x21e>
  4032ce:	f8db 2004 	ldr.w	r2, [fp, #4]
  4032d2:	3a01      	subs	r2, #1
  4032d4:	2a00      	cmp	r2, #0
  4032d6:	f10a 0a01 	add.w	sl, sl, #1
  4032da:	f8cb 2004 	str.w	r2, [fp, #4]
  4032de:	dcea      	bgt.n	4032b6 <__svfiscanf_r+0x282>
  4032e0:	4659      	mov	r1, fp
  4032e2:	4638      	mov	r0, r7
  4032e4:	f002 f804 	bl	4052f0 <__srefill_r>
  4032e8:	2800      	cmp	r0, #0
  4032ea:	d0e6      	beq.n	4032ba <__svfiscanf_r+0x286>
  4032ec:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4032f0:	07dc      	lsls	r4, r3, #31
  4032f2:	d404      	bmi.n	4032fe <__svfiscanf_r+0x2ca>
  4032f4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4032f8:	0598      	lsls	r0, r3, #22
  4032fa:	f140 82b0 	bpl.w	40385e <__svfiscanf_r+0x82a>
  4032fe:	9b05      	ldr	r3, [sp, #20]
  403300:	2b00      	cmp	r3, #0
  403302:	f000 8094 	beq.w	40342e <__svfiscanf_r+0x3fa>
  403306:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40330a:	0659      	lsls	r1, r3, #25
  40330c:	f100 808f 	bmi.w	40342e <__svfiscanf_r+0x3fa>
  403310:	9805      	ldr	r0, [sp, #20]
  403312:	b059      	add	sp, #356	; 0x164
  403314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403318:	f896 8001 	ldrb.w	r8, [r6, #1]
  40331c:	f045 0504 	orr.w	r5, r5, #4
  403320:	461e      	mov	r6, r3
  403322:	e6f0      	b.n	403106 <__svfiscanf_r+0xd2>
  403324:	9303      	str	r3, [sp, #12]
  403326:	4b78      	ldr	r3, [pc, #480]	; (403508 <__svfiscanf_r+0x4d4>)
  403328:	9307      	str	r3, [sp, #28]
  40332a:	230a      	movs	r3, #10
  40332c:	9304      	str	r3, [sp, #16]
  40332e:	f8db 3004 	ldr.w	r3, [fp, #4]
  403332:	2b00      	cmp	r3, #0
  403334:	f04f 0603 	mov.w	r6, #3
  403338:	dc89      	bgt.n	40324e <__svfiscanf_r+0x21a>
  40333a:	4659      	mov	r1, fp
  40333c:	4638      	mov	r0, r7
  40333e:	f001 ffd7 	bl	4052f0 <__srefill_r>
  403342:	2800      	cmp	r0, #0
  403344:	d083      	beq.n	40324e <__svfiscanf_r+0x21a>
  403346:	e7d1      	b.n	4032ec <__svfiscanf_r+0x2b8>
  403348:	9303      	str	r3, [sp, #12]
  40334a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  40334e:	2600      	movs	r6, #0
  403350:	e779      	b.n	403246 <__svfiscanf_r+0x212>
  403352:	4619      	mov	r1, r3
  403354:	a818      	add	r0, sp, #96	; 0x60
  403356:	f002 f867 	bl	405428 <__sccl>
  40335a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  40335e:	9003      	str	r0, [sp, #12]
  403360:	2601      	movs	r6, #1
  403362:	e770      	b.n	403246 <__svfiscanf_r+0x212>
  403364:	9303      	str	r3, [sp, #12]
  403366:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  40336a:	4b68      	ldr	r3, [pc, #416]	; (40350c <__svfiscanf_r+0x4d8>)
  40336c:	9307      	str	r3, [sp, #28]
  40336e:	2310      	movs	r3, #16
  403370:	9304      	str	r3, [sp, #16]
  403372:	2603      	movs	r6, #3
  403374:	e767      	b.n	403246 <__svfiscanf_r+0x212>
  403376:	9303      	str	r3, [sp, #12]
  403378:	f045 0501 	orr.w	r5, r5, #1
  40337c:	4b63      	ldr	r3, [pc, #396]	; (40350c <__svfiscanf_r+0x4d8>)
  40337e:	9307      	str	r3, [sp, #28]
  403380:	2308      	movs	r3, #8
  403382:	9304      	str	r3, [sp, #16]
  403384:	2603      	movs	r6, #3
  403386:	e75e      	b.n	403246 <__svfiscanf_r+0x212>
  403388:	9303      	str	r3, [sp, #12]
  40338a:	4b60      	ldr	r3, [pc, #384]	; (40350c <__svfiscanf_r+0x4d8>)
  40338c:	9307      	str	r3, [sp, #28]
  40338e:	230a      	movs	r3, #10
  403390:	9304      	str	r3, [sp, #16]
  403392:	2603      	movs	r6, #3
  403394:	e757      	b.n	403246 <__svfiscanf_r+0x212>
  403396:	9303      	str	r3, [sp, #12]
  403398:	2602      	movs	r6, #2
  40339a:	e754      	b.n	403246 <__svfiscanf_r+0x212>
  40339c:	9303      	str	r3, [sp, #12]
  40339e:	f445 7508 	orr.w	r5, r5, #544	; 0x220
  4033a2:	e7e2      	b.n	40336a <__svfiscanf_r+0x336>
  4033a4:	9303      	str	r3, [sp, #12]
  4033a6:	e7e9      	b.n	40337c <__svfiscanf_r+0x348>
  4033a8:	06ea      	lsls	r2, r5, #27
  4033aa:	9303      	str	r3, [sp, #12]
  4033ac:	d477      	bmi.n	40349e <__svfiscanf_r+0x46a>
  4033ae:	076b      	lsls	r3, r5, #29
  4033b0:	f100 82ec 	bmi.w	40398c <__svfiscanf_r+0x958>
  4033b4:	07ee      	lsls	r6, r5, #31
  4033b6:	f100 82d8 	bmi.w	40396a <__svfiscanf_r+0x936>
  4033ba:	07ad      	lsls	r5, r5, #30
  4033bc:	f140 82d5 	bpl.w	40396a <__svfiscanf_r+0x936>
  4033c0:	9a06      	ldr	r2, [sp, #24]
  4033c2:	9e03      	ldr	r6, [sp, #12]
  4033c4:	6813      	ldr	r3, [r2, #0]
  4033c6:	4650      	mov	r0, sl
  4033c8:	17c1      	asrs	r1, r0, #31
  4033ca:	3204      	adds	r2, #4
  4033cc:	9206      	str	r2, [sp, #24]
  4033ce:	e9c3 0100 	strd	r0, r1, [r3]
  4033d2:	4634      	mov	r4, r6
  4033d4:	e67c      	b.n	4030d0 <__svfiscanf_r+0x9c>
  4033d6:	f896 8001 	ldrb.w	r8, [r6, #1]
  4033da:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  4033de:	f000 82b2 	beq.w	403946 <__svfiscanf_r+0x912>
  4033e2:	f045 0501 	orr.w	r5, r5, #1
  4033e6:	461e      	mov	r6, r3
  4033e8:	e68d      	b.n	403106 <__svfiscanf_r+0xd2>
  4033ea:	f896 8001 	ldrb.w	r8, [r6, #1]
  4033ee:	f045 0502 	orr.w	r5, r5, #2
  4033f2:	461e      	mov	r6, r3
  4033f4:	e687      	b.n	403106 <__svfiscanf_r+0xd2>
  4033f6:	9303      	str	r3, [sp, #12]
  4033f8:	f045 0501 	orr.w	r5, r5, #1
  4033fc:	e793      	b.n	403326 <__svfiscanf_r+0x2f2>
  4033fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403402:	eb08 0444 	add.w	r4, r8, r4, lsl #1
  403406:	3c30      	subs	r4, #48	; 0x30
  403408:	f896 8001 	ldrb.w	r8, [r6, #1]
  40340c:	461e      	mov	r6, r3
  40340e:	e67a      	b.n	403106 <__svfiscanf_r+0xd2>
  403410:	f896 8001 	ldrb.w	r8, [r6, #1]
  403414:	f045 0510 	orr.w	r5, r5, #16
  403418:	461e      	mov	r6, r3
  40341a:	e674      	b.n	403106 <__svfiscanf_r+0xd2>
  40341c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403420:	07dc      	lsls	r4, r3, #31
  403422:	d404      	bmi.n	40342e <__svfiscanf_r+0x3fa>
  403424:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403428:	0598      	lsls	r0, r3, #22
  40342a:	f140 8293 	bpl.w	403954 <__svfiscanf_r+0x920>
  40342e:	f04f 33ff 	mov.w	r3, #4294967295
  403432:	9305      	str	r3, [sp, #20]
  403434:	9805      	ldr	r0, [sp, #20]
  403436:	b059      	add	sp, #356	; 0x164
  403438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40343c:	9303      	str	r3, [sp, #12]
  40343e:	f001 f957 	bl	4046f0 <__locale_ctype_ptr>
  403442:	4440      	add	r0, r8
  403444:	7843      	ldrb	r3, [r0, #1]
  403446:	f003 0303 	and.w	r3, r3, #3
  40344a:	2b01      	cmp	r3, #1
  40344c:	f47f af6b 	bne.w	403326 <__svfiscanf_r+0x2f2>
  403450:	f045 0501 	orr.w	r5, r5, #1
  403454:	e767      	b.n	403326 <__svfiscanf_r+0x2f2>
  403456:	ab0c      	add	r3, sp, #48	; 0x30
  403458:	4618      	mov	r0, r3
  40345a:	2208      	movs	r2, #8
  40345c:	2100      	movs	r1, #0
  40345e:	9308      	str	r3, [sp, #32]
  403460:	f7fe fe00 	bl	402064 <memset>
  403464:	f015 0310 	ands.w	r3, r5, #16
  403468:	9309      	str	r3, [sp, #36]	; 0x24
  40346a:	f000 81eb 	beq.w	403844 <__svfiscanf_r+0x810>
  40346e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  403472:	2600      	movs	r6, #0
  403474:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  403478:	f001 f93a 	bl	4046f0 <__locale_ctype_ptr>
  40347c:	f8db 3000 	ldr.w	r3, [fp]
  403480:	781b      	ldrb	r3, [r3, #0]
  403482:	4403      	add	r3, r0
  403484:	785b      	ldrb	r3, [r3, #1]
  403486:	071a      	lsls	r2, r3, #28
  403488:	d402      	bmi.n	403490 <__svfiscanf_r+0x45c>
  40348a:	2c00      	cmp	r4, #0
  40348c:	f040 8289 	bne.w	4039a2 <__svfiscanf_r+0x96e>
  403490:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403492:	b923      	cbnz	r3, 40349e <__svfiscanf_r+0x46a>
  403494:	f8c9 3000 	str.w	r3, [r9]
  403498:	9b05      	ldr	r3, [sp, #20]
  40349a:	3301      	adds	r3, #1
  40349c:	9305      	str	r3, [sp, #20]
  40349e:	9e03      	ldr	r6, [sp, #12]
  4034a0:	4634      	mov	r4, r6
  4034a2:	e615      	b.n	4030d0 <__svfiscanf_r+0x9c>
  4034a4:	2c00      	cmp	r4, #0
  4034a6:	bf08      	it	eq
  4034a8:	f04f 34ff 	moveq.w	r4, #4294967295
  4034ac:	06e8      	lsls	r0, r5, #27
  4034ae:	f140 810b 	bpl.w	4036c8 <__svfiscanf_r+0x694>
  4034b2:	f8db 2000 	ldr.w	r2, [fp]
  4034b6:	2500      	movs	r5, #0
  4034b8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4034bc:	7813      	ldrb	r3, [r2, #0]
  4034be:	f818 3003 	ldrb.w	r3, [r8, r3]
  4034c2:	3201      	adds	r2, #1
  4034c4:	b1db      	cbz	r3, 4034fe <__svfiscanf_r+0x4ca>
  4034c6:	f8db 3004 	ldr.w	r3, [fp, #4]
  4034ca:	f8cb 2000 	str.w	r2, [fp]
  4034ce:	3501      	adds	r5, #1
  4034d0:	3b01      	subs	r3, #1
  4034d2:	42ac      	cmp	r4, r5
  4034d4:	f8cb 3004 	str.w	r3, [fp, #4]
  4034d8:	f43f aee9 	beq.w	4032ae <__svfiscanf_r+0x27a>
  4034dc:	2b00      	cmp	r3, #0
  4034de:	dced      	bgt.n	4034bc <__svfiscanf_r+0x488>
  4034e0:	4659      	mov	r1, fp
  4034e2:	4638      	mov	r0, r7
  4034e4:	f001 ff04 	bl	4052f0 <__srefill_r>
  4034e8:	2800      	cmp	r0, #0
  4034ea:	f47f aee0 	bne.w	4032ae <__svfiscanf_r+0x27a>
  4034ee:	f8db 2000 	ldr.w	r2, [fp]
  4034f2:	7813      	ldrb	r3, [r2, #0]
  4034f4:	f818 3003 	ldrb.w	r3, [r8, r3]
  4034f8:	3201      	adds	r2, #1
  4034fa:	2b00      	cmp	r3, #0
  4034fc:	d1e3      	bne.n	4034c6 <__svfiscanf_r+0x492>
  4034fe:	2d00      	cmp	r5, #0
  403500:	f47f aed5 	bne.w	4032ae <__svfiscanf_r+0x27a>
  403504:	e5ea      	b.n	4030dc <__svfiscanf_r+0xa8>
  403506:	bf00      	nop
  403508:	00405745 	.word	0x00405745
  40350c:	00405a71 	.word	0x00405a71
  403510:	1e63      	subs	r3, r4, #1
  403512:	2b26      	cmp	r3, #38	; 0x26
  403514:	bf8c      	ite	hi
  403516:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
  40351a:	2200      	movls	r2, #0
  40351c:	f04f 0900 	mov.w	r9, #0
  403520:	4611      	mov	r1, r2
  403522:	ae0e      	add	r6, sp, #56	; 0x38
  403524:	464b      	mov	r3, r9
  403526:	46b9      	mov	r9, r7
  403528:	9f04      	ldr	r7, [sp, #16]
  40352a:	4652      	mov	r2, sl
  40352c:	bf88      	it	hi
  40352e:	2427      	movhi	r4, #39	; 0x27
  403530:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
  403534:	46b0      	mov	r8, r6
  403536:	468a      	mov	sl, r1
  403538:	f8db 0000 	ldr.w	r0, [fp]
  40353c:	f890 e000 	ldrb.w	lr, [r0]
  403540:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
  403544:	294d      	cmp	r1, #77	; 0x4d
  403546:	d842      	bhi.n	4035ce <__svfiscanf_r+0x59a>
  403548:	e8df f001 	tbb	[pc, r1]
  40354c:	418e418e 	.word	0x418e418e
  403550:	63636941 	.word	0x63636941
  403554:	63636363 	.word	0x63636363
  403558:	415d5d63 	.word	0x415d5d63
  40355c:	41414141 	.word	0x41414141
  403560:	58584141 	.word	0x58584141
  403564:	58585858 	.word	0x58585858
  403568:	41414141 	.word	0x41414141
  40356c:	41414141 	.word	0x41414141
  403570:	41414141 	.word	0x41414141
  403574:	41414141 	.word	0x41414141
  403578:	41412741 	.word	0x41412741
  40357c:	41414141 	.word	0x41414141
  403580:	58584141 	.word	0x58584141
  403584:	58585858 	.word	0x58585858
  403588:	41414141 	.word	0x41414141
  40358c:	41414141 	.word	0x41414141
  403590:	41414141 	.word	0x41414141
  403594:	41414141 	.word	0x41414141
  403598:	2741      	.short	0x2741
  40359a:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
  40359e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  4035a2:	d114      	bne.n	4035ce <__svfiscanf_r+0x59a>
  4035a4:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  4035a8:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
  4035ac:	2710      	movs	r7, #16
  4035ae:	f8db 1004 	ldr.w	r1, [fp, #4]
  4035b2:	f888 e000 	strb.w	lr, [r8]
  4035b6:	3901      	subs	r1, #1
  4035b8:	2900      	cmp	r1, #0
  4035ba:	f108 0801 	add.w	r8, r8, #1
  4035be:	f8cb 1004 	str.w	r1, [fp, #4]
  4035c2:	dd46      	ble.n	403652 <__svfiscanf_r+0x61e>
  4035c4:	3001      	adds	r0, #1
  4035c6:	f8cb 0000 	str.w	r0, [fp]
  4035ca:	3c01      	subs	r4, #1
  4035cc:	d1b4      	bne.n	403538 <__svfiscanf_r+0x504>
  4035ce:	05e9      	lsls	r1, r5, #23
  4035d0:	9704      	str	r7, [sp, #16]
  4035d2:	4692      	mov	sl, r2
  4035d4:	464f      	mov	r7, r9
  4035d6:	4699      	mov	r9, r3
  4035d8:	d505      	bpl.n	4035e6 <__svfiscanf_r+0x5b2>
  4035da:	45b0      	cmp	r8, r6
  4035dc:	f200 81a2 	bhi.w	403924 <__svfiscanf_r+0x8f0>
  4035e0:	45b0      	cmp	r8, r6
  4035e2:	f43f ad7b 	beq.w	4030dc <__svfiscanf_r+0xa8>
  4035e6:	f015 0410 	ands.w	r4, r5, #16
  4035ea:	f000 80e5 	beq.w	4037b8 <__svfiscanf_r+0x784>
  4035ee:	eba8 0606 	sub.w	r6, r8, r6
  4035f2:	44b1      	add	r9, r6
  4035f4:	9e03      	ldr	r6, [sp, #12]
  4035f6:	44ca      	add	sl, r9
  4035f8:	4634      	mov	r4, r6
  4035fa:	e569      	b.n	4030d0 <__svfiscanf_r+0x9c>
  4035fc:	2f0a      	cmp	r7, #10
  4035fe:	dde6      	ble.n	4035ce <__svfiscanf_r+0x59a>
  403600:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  403604:	e7d3      	b.n	4035ae <__svfiscanf_r+0x57a>
  403606:	49ac      	ldr	r1, [pc, #688]	; (4038b8 <__svfiscanf_r+0x884>)
  403608:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  40360c:	2f08      	cmp	r7, #8
  40360e:	dcf7      	bgt.n	403600 <__svfiscanf_r+0x5cc>
  403610:	e7dd      	b.n	4035ce <__svfiscanf_r+0x59a>
  403612:	49a9      	ldr	r1, [pc, #676]	; (4038b8 <__svfiscanf_r+0x884>)
  403614:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  403618:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  40361c:	e7c7      	b.n	4035ae <__svfiscanf_r+0x57a>
  40361e:	0529      	lsls	r1, r5, #20
  403620:	d5c5      	bpl.n	4035ae <__svfiscanf_r+0x57a>
  403622:	b917      	cbnz	r7, 40362a <__svfiscanf_r+0x5f6>
  403624:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  403628:	2708      	movs	r7, #8
  40362a:	0569      	lsls	r1, r5, #21
  40362c:	f100 80eb 	bmi.w	403806 <__svfiscanf_r+0x7d2>
  403630:	f425 7560 	bic.w	r5, r5, #896	; 0x380
  403634:	f1ba 0f00 	cmp.w	sl, #0
  403638:	d002      	beq.n	403640 <__svfiscanf_r+0x60c>
  40363a:	f10a 3aff 	add.w	sl, sl, #4294967295
  40363e:	3401      	adds	r4, #1
  403640:	f8db 1004 	ldr.w	r1, [fp, #4]
  403644:	3901      	subs	r1, #1
  403646:	2900      	cmp	r1, #0
  403648:	f103 0301 	add.w	r3, r3, #1
  40364c:	f8cb 1004 	str.w	r1, [fp, #4]
  403650:	dcb8      	bgt.n	4035c4 <__svfiscanf_r+0x590>
  403652:	4659      	mov	r1, fp
  403654:	4648      	mov	r0, r9
  403656:	9308      	str	r3, [sp, #32]
  403658:	9204      	str	r2, [sp, #16]
  40365a:	f001 fe49 	bl	4052f0 <__srefill_r>
  40365e:	9a04      	ldr	r2, [sp, #16]
  403660:	9b08      	ldr	r3, [sp, #32]
  403662:	2800      	cmp	r0, #0
  403664:	d0b1      	beq.n	4035ca <__svfiscanf_r+0x596>
  403666:	e7b2      	b.n	4035ce <__svfiscanf_r+0x59a>
  403668:	0629      	lsls	r1, r5, #24
  40366a:	d5b0      	bpl.n	4035ce <__svfiscanf_r+0x59a>
  40366c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  403670:	e79d      	b.n	4035ae <__svfiscanf_r+0x57a>
  403672:	2c00      	cmp	r4, #0
  403674:	bf08      	it	eq
  403676:	f04f 34ff 	moveq.w	r4, #4294967295
  40367a:	f015 0601 	ands.w	r6, r5, #1
  40367e:	f47f aeea 	bne.w	403456 <__svfiscanf_r+0x422>
  403682:	06eb      	lsls	r3, r5, #27
  403684:	f140 811c 	bpl.w	4038c0 <__svfiscanf_r+0x88c>
  403688:	f001 f832 	bl	4046f0 <__locale_ctype_ptr>
  40368c:	f8db 3000 	ldr.w	r3, [fp]
  403690:	781a      	ldrb	r2, [r3, #0]
  403692:	4410      	add	r0, r2
  403694:	3301      	adds	r3, #1
  403696:	7842      	ldrb	r2, [r0, #1]
  403698:	0715      	lsls	r5, r2, #28
  40369a:	d411      	bmi.n	4036c0 <__svfiscanf_r+0x68c>
  40369c:	f8db 2004 	ldr.w	r2, [fp, #4]
  4036a0:	f8cb 3000 	str.w	r3, [fp]
  4036a4:	3601      	adds	r6, #1
  4036a6:	3a01      	subs	r2, #1
  4036a8:	42b4      	cmp	r4, r6
  4036aa:	f8cb 2004 	str.w	r2, [fp, #4]
  4036ae:	d007      	beq.n	4036c0 <__svfiscanf_r+0x68c>
  4036b0:	2a00      	cmp	r2, #0
  4036b2:	dce9      	bgt.n	403688 <__svfiscanf_r+0x654>
  4036b4:	4659      	mov	r1, fp
  4036b6:	4638      	mov	r0, r7
  4036b8:	f001 fe1a 	bl	4052f0 <__srefill_r>
  4036bc:	2800      	cmp	r0, #0
  4036be:	d0e3      	beq.n	403688 <__svfiscanf_r+0x654>
  4036c0:	44b2      	add	sl, r6
  4036c2:	9e03      	ldr	r6, [sp, #12]
  4036c4:	4634      	mov	r4, r6
  4036c6:	e503      	b.n	4030d0 <__svfiscanf_r+0x9c>
  4036c8:	9a06      	ldr	r2, [sp, #24]
  4036ca:	6815      	ldr	r5, [r2, #0]
  4036cc:	1d16      	adds	r6, r2, #4
  4036ce:	46a9      	mov	r9, r5
  4036d0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4036d4:	f8db 3000 	ldr.w	r3, [fp]
  4036d8:	781a      	ldrb	r2, [r3, #0]
  4036da:	f818 2002 	ldrb.w	r2, [r8, r2]
  4036de:	1c59      	adds	r1, r3, #1
  4036e0:	b1c2      	cbz	r2, 403714 <__svfiscanf_r+0x6e0>
  4036e2:	f8db 2004 	ldr.w	r2, [fp, #4]
  4036e6:	f8cb 1000 	str.w	r1, [fp]
  4036ea:	3a01      	subs	r2, #1
  4036ec:	f8cb 2004 	str.w	r2, [fp, #4]
  4036f0:	781b      	ldrb	r3, [r3, #0]
  4036f2:	f809 3b01 	strb.w	r3, [r9], #1
  4036f6:	3c01      	subs	r4, #1
  4036f8:	d00c      	beq.n	403714 <__svfiscanf_r+0x6e0>
  4036fa:	f8db 3004 	ldr.w	r3, [fp, #4]
  4036fe:	2b00      	cmp	r3, #0
  403700:	dce8      	bgt.n	4036d4 <__svfiscanf_r+0x6a0>
  403702:	4659      	mov	r1, fp
  403704:	4638      	mov	r0, r7
  403706:	f001 fdf3 	bl	4052f0 <__srefill_r>
  40370a:	2800      	cmp	r0, #0
  40370c:	d0e2      	beq.n	4036d4 <__svfiscanf_r+0x6a0>
  40370e:	454d      	cmp	r5, r9
  403710:	f43f adec 	beq.w	4032ec <__svfiscanf_r+0x2b8>
  403714:	ebb9 0505 	subs.w	r5, r9, r5
  403718:	f43f ace0 	beq.w	4030dc <__svfiscanf_r+0xa8>
  40371c:	9a05      	ldr	r2, [sp, #20]
  40371e:	9606      	str	r6, [sp, #24]
  403720:	2300      	movs	r3, #0
  403722:	3201      	adds	r2, #1
  403724:	9205      	str	r2, [sp, #20]
  403726:	f889 3000 	strb.w	r3, [r9]
  40372a:	e5c0      	b.n	4032ae <__svfiscanf_r+0x27a>
  40372c:	ab0c      	add	r3, sp, #48	; 0x30
  40372e:	4618      	mov	r0, r3
  403730:	2208      	movs	r2, #8
  403732:	2100      	movs	r1, #0
  403734:	9308      	str	r3, [sp, #32]
  403736:	f7fe fc95 	bl	402064 <memset>
  40373a:	f015 0310 	ands.w	r3, r5, #16
  40373e:	9309      	str	r3, [sp, #36]	; 0x24
  403740:	d077      	beq.n	403832 <__svfiscanf_r+0x7fe>
  403742:	f04f 0900 	mov.w	r9, #0
  403746:	2c00      	cmp	r4, #0
  403748:	f43f aea9 	beq.w	40349e <__svfiscanf_r+0x46a>
  40374c:	2500      	movs	r5, #0
  40374e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  403752:	f000 ffbb 	bl	4046cc <__locale_mb_cur_max>
  403756:	42a8      	cmp	r0, r5
  403758:	f43f adc8 	beq.w	4032ec <__svfiscanf_r+0x2b8>
  40375c:	e89b 000c 	ldmia.w	fp, {r2, r3}
  403760:	f812 0b01 	ldrb.w	r0, [r2], #1
  403764:	f8cb 2000 	str.w	r2, [fp]
  403768:	3b01      	subs	r3, #1
  40376a:	9a08      	ldr	r2, [sp, #32]
  40376c:	9200      	str	r2, [sp, #0]
  40376e:	1c6e      	adds	r6, r5, #1
  403770:	f8cb 3004 	str.w	r3, [fp, #4]
  403774:	f808 0005 	strb.w	r0, [r8, r5]
  403778:	4633      	mov	r3, r6
  40377a:	4642      	mov	r2, r8
  40377c:	4649      	mov	r1, r9
  40377e:	4638      	mov	r0, r7
  403780:	f001 fafc 	bl	404d7c <_mbrtowc_r>
  403784:	1c43      	adds	r3, r0, #1
  403786:	f43f adb1 	beq.w	4032ec <__svfiscanf_r+0x2b8>
  40378a:	2800      	cmp	r0, #0
  40378c:	d16c      	bne.n	403868 <__svfiscanf_r+0x834>
  40378e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403790:	2b00      	cmp	r3, #0
  403792:	d16d      	bne.n	403870 <__svfiscanf_r+0x83c>
  403794:	f8c9 3000 	str.w	r3, [r9]
  403798:	44b2      	add	sl, r6
  40379a:	3c01      	subs	r4, #1
  40379c:	f109 0904 	add.w	r9, r9, #4
  4037a0:	2500      	movs	r5, #0
  4037a2:	f8db 3004 	ldr.w	r3, [fp, #4]
  4037a6:	2b00      	cmp	r3, #0
  4037a8:	dd30      	ble.n	40380c <__svfiscanf_r+0x7d8>
  4037aa:	2c00      	cmp	r4, #0
  4037ac:	d1d1      	bne.n	403752 <__svfiscanf_r+0x71e>
  4037ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037b0:	2b00      	cmp	r3, #0
  4037b2:	f47f ae74 	bne.w	40349e <__svfiscanf_r+0x46a>
  4037b6:	e66f      	b.n	403498 <__svfiscanf_r+0x464>
  4037b8:	4622      	mov	r2, r4
  4037ba:	f888 4000 	strb.w	r4, [r8]
  4037be:	9b04      	ldr	r3, [sp, #16]
  4037c0:	9c07      	ldr	r4, [sp, #28]
  4037c2:	4631      	mov	r1, r6
  4037c4:	4638      	mov	r0, r7
  4037c6:	47a0      	blx	r4
  4037c8:	06aa      	lsls	r2, r5, #26
  4037ca:	d442      	bmi.n	403852 <__svfiscanf_r+0x81e>
  4037cc:	076b      	lsls	r3, r5, #29
  4037ce:	f100 80d7 	bmi.w	403980 <__svfiscanf_r+0x94c>
  4037d2:	f015 0201 	ands.w	r2, r5, #1
  4037d6:	d13c      	bne.n	403852 <__svfiscanf_r+0x81e>
  4037d8:	07ad      	lsls	r5, r5, #30
  4037da:	d53a      	bpl.n	403852 <__svfiscanf_r+0x81e>
  4037dc:	9b07      	ldr	r3, [sp, #28]
  4037de:	4619      	mov	r1, r3
  4037e0:	4b36      	ldr	r3, [pc, #216]	; (4038bc <__svfiscanf_r+0x888>)
  4037e2:	4299      	cmp	r1, r3
  4037e4:	4638      	mov	r0, r7
  4037e6:	9b04      	ldr	r3, [sp, #16]
  4037e8:	4631      	mov	r1, r6
  4037ea:	f000 811e 	beq.w	403a2a <__svfiscanf_r+0x9f6>
  4037ee:	f002 f889 	bl	405904 <_strtoll_r>
  4037f2:	9a06      	ldr	r2, [sp, #24]
  4037f4:	6813      	ldr	r3, [r2, #0]
  4037f6:	e9c3 0100 	strd	r0, r1, [r3]
  4037fa:	3204      	adds	r2, #4
  4037fc:	9206      	str	r2, [sp, #24]
  4037fe:	9b05      	ldr	r3, [sp, #20]
  403800:	3301      	adds	r3, #1
  403802:	9305      	str	r3, [sp, #20]
  403804:	e6f3      	b.n	4035ee <__svfiscanf_r+0x5ba>
  403806:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
  40380a:	e6d0      	b.n	4035ae <__svfiscanf_r+0x57a>
  40380c:	4659      	mov	r1, fp
  40380e:	4638      	mov	r0, r7
  403810:	f001 fd6e 	bl	4052f0 <__srefill_r>
  403814:	2800      	cmp	r0, #0
  403816:	d0c8      	beq.n	4037aa <__svfiscanf_r+0x776>
  403818:	2d00      	cmp	r5, #0
  40381a:	d0c8      	beq.n	4037ae <__svfiscanf_r+0x77a>
  40381c:	e566      	b.n	4032ec <__svfiscanf_r+0x2b8>
  40381e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403822:	9203      	str	r2, [sp, #12]
  403824:	f000 ff76 	bl	404714 <__retarget_lock_acquire_recursive>
  403828:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
  40382c:	9a03      	ldr	r2, [sp, #12]
  40382e:	b299      	uxth	r1, r3
  403830:	e410      	b.n	403054 <__svfiscanf_r+0x20>
  403832:	9a06      	ldr	r2, [sp, #24]
  403834:	4613      	mov	r3, r2
  403836:	3304      	adds	r3, #4
  403838:	f8d2 9000 	ldr.w	r9, [r2]
  40383c:	9306      	str	r3, [sp, #24]
  40383e:	2c00      	cmp	r4, #0
  403840:	d184      	bne.n	40374c <__svfiscanf_r+0x718>
  403842:	e629      	b.n	403498 <__svfiscanf_r+0x464>
  403844:	9a06      	ldr	r2, [sp, #24]
  403846:	4613      	mov	r3, r2
  403848:	3304      	adds	r3, #4
  40384a:	f8d2 9000 	ldr.w	r9, [r2]
  40384e:	9306      	str	r3, [sp, #24]
  403850:	e60f      	b.n	403472 <__svfiscanf_r+0x43e>
  403852:	9a06      	ldr	r2, [sp, #24]
  403854:	6813      	ldr	r3, [r2, #0]
  403856:	3204      	adds	r2, #4
  403858:	9206      	str	r2, [sp, #24]
  40385a:	6018      	str	r0, [r3, #0]
  40385c:	e7cf      	b.n	4037fe <__svfiscanf_r+0x7ca>
  40385e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403862:	f000 ff59 	bl	404718 <__retarget_lock_release_recursive>
  403866:	e54a      	b.n	4032fe <__svfiscanf_r+0x2ca>
  403868:	3002      	adds	r0, #2
  40386a:	d105      	bne.n	403878 <__svfiscanf_r+0x844>
  40386c:	4635      	mov	r5, r6
  40386e:	e798      	b.n	4037a2 <__svfiscanf_r+0x76e>
  403870:	44b2      	add	sl, r6
  403872:	3c01      	subs	r4, #1
  403874:	4605      	mov	r5, r0
  403876:	e794      	b.n	4037a2 <__svfiscanf_r+0x76e>
  403878:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40387a:	44b2      	add	sl, r6
  40387c:	3c01      	subs	r4, #1
  40387e:	2b00      	cmp	r3, #0
  403880:	d08c      	beq.n	40379c <__svfiscanf_r+0x768>
  403882:	2500      	movs	r5, #0
  403884:	e78d      	b.n	4037a2 <__svfiscanf_r+0x76e>
  403886:	2d00      	cmp	r5, #0
  403888:	f47f ad11 	bne.w	4032ae <__svfiscanf_r+0x27a>
  40388c:	e52e      	b.n	4032ec <__svfiscanf_r+0x2b8>
  40388e:	9d06      	ldr	r5, [sp, #24]
  403890:	4623      	mov	r3, r4
  403892:	6829      	ldr	r1, [r5, #0]
  403894:	f8cd b000 	str.w	fp, [sp]
  403898:	2201      	movs	r2, #1
  40389a:	4638      	mov	r0, r7
  40389c:	f000 fb28 	bl	403ef0 <_fread_r>
  4038a0:	1d2e      	adds	r6, r5, #4
  4038a2:	2800      	cmp	r0, #0
  4038a4:	f43f ad22 	beq.w	4032ec <__svfiscanf_r+0x2b8>
  4038a8:	9b05      	ldr	r3, [sp, #20]
  4038aa:	9606      	str	r6, [sp, #24]
  4038ac:	9e03      	ldr	r6, [sp, #12]
  4038ae:	3301      	adds	r3, #1
  4038b0:	4482      	add	sl, r0
  4038b2:	9305      	str	r3, [sp, #20]
  4038b4:	4634      	mov	r4, r6
  4038b6:	e40b      	b.n	4030d0 <__svfiscanf_r+0x9c>
  4038b8:	00406918 	.word	0x00406918
  4038bc:	00405a71 	.word	0x00405a71
  4038c0:	9a06      	ldr	r2, [sp, #24]
  4038c2:	6816      	ldr	r6, [r2, #0]
  4038c4:	f102 0804 	add.w	r8, r2, #4
  4038c8:	4635      	mov	r5, r6
  4038ca:	f000 ff11 	bl	4046f0 <__locale_ctype_ptr>
  4038ce:	f8db 2000 	ldr.w	r2, [fp]
  4038d2:	7813      	ldrb	r3, [r2, #0]
  4038d4:	4418      	add	r0, r3
  4038d6:	1c51      	adds	r1, r2, #1
  4038d8:	7843      	ldrb	r3, [r0, #1]
  4038da:	0718      	lsls	r0, r3, #28
  4038dc:	d415      	bmi.n	40390a <__svfiscanf_r+0x8d6>
  4038de:	f8db 3004 	ldr.w	r3, [fp, #4]
  4038e2:	f8cb 1000 	str.w	r1, [fp]
  4038e6:	3b01      	subs	r3, #1
  4038e8:	f8cb 3004 	str.w	r3, [fp, #4]
  4038ec:	7813      	ldrb	r3, [r2, #0]
  4038ee:	f805 3b01 	strb.w	r3, [r5], #1
  4038f2:	3c01      	subs	r4, #1
  4038f4:	d009      	beq.n	40390a <__svfiscanf_r+0x8d6>
  4038f6:	f8db 3004 	ldr.w	r3, [fp, #4]
  4038fa:	2b00      	cmp	r3, #0
  4038fc:	dce5      	bgt.n	4038ca <__svfiscanf_r+0x896>
  4038fe:	4659      	mov	r1, fp
  403900:	4638      	mov	r0, r7
  403902:	f001 fcf5 	bl	4052f0 <__srefill_r>
  403906:	2800      	cmp	r0, #0
  403908:	d0df      	beq.n	4038ca <__svfiscanf_r+0x896>
  40390a:	1bae      	subs	r6, r5, r6
  40390c:	9a05      	ldr	r2, [sp, #20]
  40390e:	f8cd 8018 	str.w	r8, [sp, #24]
  403912:	44b2      	add	sl, r6
  403914:	9e03      	ldr	r6, [sp, #12]
  403916:	2300      	movs	r3, #0
  403918:	3201      	adds	r2, #1
  40391a:	9205      	str	r2, [sp, #20]
  40391c:	702b      	strb	r3, [r5, #0]
  40391e:	4634      	mov	r4, r6
  403920:	f7ff bbd6 	b.w	4030d0 <__svfiscanf_r+0x9c>
  403924:	f818 1c01 	ldrb.w	r1, [r8, #-1]
  403928:	465a      	mov	r2, fp
  40392a:	4638      	mov	r0, r7
  40392c:	f002 f9de 	bl	405cec <_ungetc_r>
  403930:	f108 38ff 	add.w	r8, r8, #4294967295
  403934:	e654      	b.n	4035e0 <__svfiscanf_r+0x5ac>
  403936:	4659      	mov	r1, fp
  403938:	4638      	mov	r0, r7
  40393a:	f001 fcd9 	bl	4052f0 <__srefill_r>
  40393e:	2800      	cmp	r0, #0
  403940:	f43f ac67 	beq.w	403212 <__svfiscanf_r+0x1de>
  403944:	e4d2      	b.n	4032ec <__svfiscanf_r+0x2b8>
  403946:	f896 8002 	ldrb.w	r8, [r6, #2]
  40394a:	f045 0502 	orr.w	r5, r5, #2
  40394e:	3602      	adds	r6, #2
  403950:	f7ff bbd9 	b.w	403106 <__svfiscanf_r+0xd2>
  403954:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403958:	f000 fede 	bl	404718 <__retarget_lock_release_recursive>
  40395c:	f04f 33ff 	mov.w	r3, #4294967295
  403960:	9305      	str	r3, [sp, #20]
  403962:	9805      	ldr	r0, [sp, #20]
  403964:	b059      	add	sp, #356	; 0x164
  403966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40396a:	9a06      	ldr	r2, [sp, #24]
  40396c:	9e03      	ldr	r6, [sp, #12]
  40396e:	6813      	ldr	r3, [r2, #0]
  403970:	f8c3 a000 	str.w	sl, [r3]
  403974:	4613      	mov	r3, r2
  403976:	3304      	adds	r3, #4
  403978:	9306      	str	r3, [sp, #24]
  40397a:	4634      	mov	r4, r6
  40397c:	f7ff bba8 	b.w	4030d0 <__svfiscanf_r+0x9c>
  403980:	9a06      	ldr	r2, [sp, #24]
  403982:	6813      	ldr	r3, [r2, #0]
  403984:	3204      	adds	r2, #4
  403986:	9206      	str	r2, [sp, #24]
  403988:	8018      	strh	r0, [r3, #0]
  40398a:	e738      	b.n	4037fe <__svfiscanf_r+0x7ca>
  40398c:	9a06      	ldr	r2, [sp, #24]
  40398e:	9e03      	ldr	r6, [sp, #12]
  403990:	6813      	ldr	r3, [r2, #0]
  403992:	f8a3 a000 	strh.w	sl, [r3]
  403996:	4613      	mov	r3, r2
  403998:	3304      	adds	r3, #4
  40399a:	9306      	str	r3, [sp, #24]
  40399c:	4634      	mov	r4, r6
  40399e:	f7ff bb97 	b.w	4030d0 <__svfiscanf_r+0x9c>
  4039a2:	f000 fe93 	bl	4046cc <__locale_mb_cur_max>
  4039a6:	4286      	cmp	r6, r0
  4039a8:	f43f aca0 	beq.w	4032ec <__svfiscanf_r+0x2b8>
  4039ac:	e89b 000c 	ldmia.w	fp, {r2, r3}
  4039b0:	f812 0b01 	ldrb.w	r0, [r2], #1
  4039b4:	f8cb 2000 	str.w	r2, [fp]
  4039b8:	3b01      	subs	r3, #1
  4039ba:	9a08      	ldr	r2, [sp, #32]
  4039bc:	9200      	str	r2, [sp, #0]
  4039be:	1c75      	adds	r5, r6, #1
  4039c0:	f8cb 3004 	str.w	r3, [fp, #4]
  4039c4:	4649      	mov	r1, r9
  4039c6:	f808 0006 	strb.w	r0, [r8, r6]
  4039ca:	462b      	mov	r3, r5
  4039cc:	4642      	mov	r2, r8
  4039ce:	4638      	mov	r0, r7
  4039d0:	f001 f9d4 	bl	404d7c <_mbrtowc_r>
  4039d4:	1c41      	adds	r1, r0, #1
  4039d6:	f43f ac89 	beq.w	4032ec <__svfiscanf_r+0x2b8>
  4039da:	b198      	cbz	r0, 403a04 <__svfiscanf_r+0x9d0>
  4039dc:	3002      	adds	r0, #2
  4039de:	bf08      	it	eq
  4039e0:	462e      	moveq	r6, r5
  4039e2:	d12e      	bne.n	403a42 <__svfiscanf_r+0xa0e>
  4039e4:	f8db 3004 	ldr.w	r3, [fp, #4]
  4039e8:	2b00      	cmp	r3, #0
  4039ea:	f73f ad45 	bgt.w	403478 <__svfiscanf_r+0x444>
  4039ee:	4659      	mov	r1, fp
  4039f0:	4638      	mov	r0, r7
  4039f2:	f001 fc7d 	bl	4052f0 <__srefill_r>
  4039f6:	2800      	cmp	r0, #0
  4039f8:	f43f ad3e 	beq.w	403478 <__svfiscanf_r+0x444>
  4039fc:	2e00      	cmp	r6, #0
  4039fe:	f47f ac75 	bne.w	4032ec <__svfiscanf_r+0x2b8>
  403a02:	e545      	b.n	403490 <__svfiscanf_r+0x45c>
  403a04:	f8c9 0000 	str.w	r0, [r9]
  403a08:	f000 fe52 	bl	4046b0 <iswspace>
  403a0c:	4606      	mov	r6, r0
  403a0e:	b178      	cbz	r0, 403a30 <__svfiscanf_r+0x9fc>
  403a10:	2d00      	cmp	r5, #0
  403a12:	f43f ad3d 	beq.w	403490 <__svfiscanf_r+0x45c>
  403a16:	4445      	add	r5, r8
  403a18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
  403a1c:	465a      	mov	r2, fp
  403a1e:	4638      	mov	r0, r7
  403a20:	f002 f964 	bl	405cec <_ungetc_r>
  403a24:	4545      	cmp	r5, r8
  403a26:	d1f7      	bne.n	403a18 <__svfiscanf_r+0x9e4>
  403a28:	e532      	b.n	403490 <__svfiscanf_r+0x45c>
  403a2a:	f002 f911 	bl	405c50 <_strtoull_r>
  403a2e:	e6e0      	b.n	4037f2 <__svfiscanf_r+0x7be>
  403a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a32:	44aa      	add	sl, r5
  403a34:	3c01      	subs	r4, #1
  403a36:	2b00      	cmp	r3, #0
  403a38:	d1d4      	bne.n	4039e4 <__svfiscanf_r+0x9b0>
  403a3a:	f109 0904 	add.w	r9, r9, #4
  403a3e:	461e      	mov	r6, r3
  403a40:	e7d0      	b.n	4039e4 <__svfiscanf_r+0x9b0>
  403a42:	f8d9 0000 	ldr.w	r0, [r9]
  403a46:	e7df      	b.n	403a08 <__svfiscanf_r+0x9d4>

00403a48 <__swsetup_r>:
  403a48:	b538      	push	{r3, r4, r5, lr}
  403a4a:	4b30      	ldr	r3, [pc, #192]	; (403b0c <__swsetup_r+0xc4>)
  403a4c:	681b      	ldr	r3, [r3, #0]
  403a4e:	4605      	mov	r5, r0
  403a50:	460c      	mov	r4, r1
  403a52:	b113      	cbz	r3, 403a5a <__swsetup_r+0x12>
  403a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403a56:	2a00      	cmp	r2, #0
  403a58:	d038      	beq.n	403acc <__swsetup_r+0x84>
  403a5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a5e:	b293      	uxth	r3, r2
  403a60:	0718      	lsls	r0, r3, #28
  403a62:	d50c      	bpl.n	403a7e <__swsetup_r+0x36>
  403a64:	6920      	ldr	r0, [r4, #16]
  403a66:	b1a8      	cbz	r0, 403a94 <__swsetup_r+0x4c>
  403a68:	f013 0201 	ands.w	r2, r3, #1
  403a6c:	d01e      	beq.n	403aac <__swsetup_r+0x64>
  403a6e:	6963      	ldr	r3, [r4, #20]
  403a70:	2200      	movs	r2, #0
  403a72:	425b      	negs	r3, r3
  403a74:	61a3      	str	r3, [r4, #24]
  403a76:	60a2      	str	r2, [r4, #8]
  403a78:	b1f0      	cbz	r0, 403ab8 <__swsetup_r+0x70>
  403a7a:	2000      	movs	r0, #0
  403a7c:	bd38      	pop	{r3, r4, r5, pc}
  403a7e:	06d9      	lsls	r1, r3, #27
  403a80:	d53c      	bpl.n	403afc <__swsetup_r+0xb4>
  403a82:	0758      	lsls	r0, r3, #29
  403a84:	d426      	bmi.n	403ad4 <__swsetup_r+0x8c>
  403a86:	6920      	ldr	r0, [r4, #16]
  403a88:	f042 0308 	orr.w	r3, r2, #8
  403a8c:	81a3      	strh	r3, [r4, #12]
  403a8e:	b29b      	uxth	r3, r3
  403a90:	2800      	cmp	r0, #0
  403a92:	d1e9      	bne.n	403a68 <__swsetup_r+0x20>
  403a94:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403a98:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403a9c:	d0e4      	beq.n	403a68 <__swsetup_r+0x20>
  403a9e:	4628      	mov	r0, r5
  403aa0:	4621      	mov	r1, r4
  403aa2:	f000 fe69 	bl	404778 <__smakebuf_r>
  403aa6:	89a3      	ldrh	r3, [r4, #12]
  403aa8:	6920      	ldr	r0, [r4, #16]
  403aaa:	e7dd      	b.n	403a68 <__swsetup_r+0x20>
  403aac:	0799      	lsls	r1, r3, #30
  403aae:	bf58      	it	pl
  403ab0:	6962      	ldrpl	r2, [r4, #20]
  403ab2:	60a2      	str	r2, [r4, #8]
  403ab4:	2800      	cmp	r0, #0
  403ab6:	d1e0      	bne.n	403a7a <__swsetup_r+0x32>
  403ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403abc:	061a      	lsls	r2, r3, #24
  403abe:	d5dd      	bpl.n	403a7c <__swsetup_r+0x34>
  403ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ac4:	81a3      	strh	r3, [r4, #12]
  403ac6:	f04f 30ff 	mov.w	r0, #4294967295
  403aca:	bd38      	pop	{r3, r4, r5, pc}
  403acc:	4618      	mov	r0, r3
  403ace:	f000 f939 	bl	403d44 <__sinit>
  403ad2:	e7c2      	b.n	403a5a <__swsetup_r+0x12>
  403ad4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403ad6:	b151      	cbz	r1, 403aee <__swsetup_r+0xa6>
  403ad8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403adc:	4299      	cmp	r1, r3
  403ade:	d004      	beq.n	403aea <__swsetup_r+0xa2>
  403ae0:	4628      	mov	r0, r5
  403ae2:	f000 fb37 	bl	404154 <_free_r>
  403ae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403aea:	2300      	movs	r3, #0
  403aec:	6323      	str	r3, [r4, #48]	; 0x30
  403aee:	2300      	movs	r3, #0
  403af0:	6920      	ldr	r0, [r4, #16]
  403af2:	6063      	str	r3, [r4, #4]
  403af4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403af8:	6020      	str	r0, [r4, #0]
  403afa:	e7c5      	b.n	403a88 <__swsetup_r+0x40>
  403afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403b00:	2309      	movs	r3, #9
  403b02:	602b      	str	r3, [r5, #0]
  403b04:	f04f 30ff 	mov.w	r0, #4294967295
  403b08:	81a2      	strh	r2, [r4, #12]
  403b0a:	bd38      	pop	{r3, r4, r5, pc}
  403b0c:	20400008 	.word	0x20400008

00403b10 <register_fini>:
  403b10:	4b02      	ldr	r3, [pc, #8]	; (403b1c <register_fini+0xc>)
  403b12:	b113      	cbz	r3, 403b1a <register_fini+0xa>
  403b14:	4802      	ldr	r0, [pc, #8]	; (403b20 <register_fini+0x10>)
  403b16:	f000 b805 	b.w	403b24 <atexit>
  403b1a:	4770      	bx	lr
  403b1c:	00000000 	.word	0x00000000
  403b20:	00403db5 	.word	0x00403db5

00403b24 <atexit>:
  403b24:	2300      	movs	r3, #0
  403b26:	4601      	mov	r1, r0
  403b28:	461a      	mov	r2, r3
  403b2a:	4618      	mov	r0, r3
  403b2c:	f002 ba20 	b.w	405f70 <__register_exitproc>

00403b30 <__sflush_r>:
  403b30:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403b34:	b29a      	uxth	r2, r3
  403b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b3a:	460d      	mov	r5, r1
  403b3c:	0711      	lsls	r1, r2, #28
  403b3e:	4680      	mov	r8, r0
  403b40:	d43a      	bmi.n	403bb8 <__sflush_r+0x88>
  403b42:	686a      	ldr	r2, [r5, #4]
  403b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403b48:	2a00      	cmp	r2, #0
  403b4a:	81ab      	strh	r3, [r5, #12]
  403b4c:	dd6f      	ble.n	403c2e <__sflush_r+0xfe>
  403b4e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403b50:	2c00      	cmp	r4, #0
  403b52:	d049      	beq.n	403be8 <__sflush_r+0xb8>
  403b54:	2200      	movs	r2, #0
  403b56:	b29b      	uxth	r3, r3
  403b58:	f8d8 6000 	ldr.w	r6, [r8]
  403b5c:	f8c8 2000 	str.w	r2, [r8]
  403b60:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403b64:	d067      	beq.n	403c36 <__sflush_r+0x106>
  403b66:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403b68:	075f      	lsls	r7, r3, #29
  403b6a:	d505      	bpl.n	403b78 <__sflush_r+0x48>
  403b6c:	6869      	ldr	r1, [r5, #4]
  403b6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403b70:	1a52      	subs	r2, r2, r1
  403b72:	b10b      	cbz	r3, 403b78 <__sflush_r+0x48>
  403b74:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403b76:	1ad2      	subs	r2, r2, r3
  403b78:	2300      	movs	r3, #0
  403b7a:	69e9      	ldr	r1, [r5, #28]
  403b7c:	4640      	mov	r0, r8
  403b7e:	47a0      	blx	r4
  403b80:	1c44      	adds	r4, r0, #1
  403b82:	d03c      	beq.n	403bfe <__sflush_r+0xce>
  403b84:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403b88:	692a      	ldr	r2, [r5, #16]
  403b8a:	602a      	str	r2, [r5, #0]
  403b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403b90:	2200      	movs	r2, #0
  403b92:	81ab      	strh	r3, [r5, #12]
  403b94:	04db      	lsls	r3, r3, #19
  403b96:	606a      	str	r2, [r5, #4]
  403b98:	d447      	bmi.n	403c2a <__sflush_r+0xfa>
  403b9a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403b9c:	f8c8 6000 	str.w	r6, [r8]
  403ba0:	b311      	cbz	r1, 403be8 <__sflush_r+0xb8>
  403ba2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403ba6:	4299      	cmp	r1, r3
  403ba8:	d002      	beq.n	403bb0 <__sflush_r+0x80>
  403baa:	4640      	mov	r0, r8
  403bac:	f000 fad2 	bl	404154 <_free_r>
  403bb0:	2000      	movs	r0, #0
  403bb2:	6328      	str	r0, [r5, #48]	; 0x30
  403bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bb8:	692e      	ldr	r6, [r5, #16]
  403bba:	b1ae      	cbz	r6, 403be8 <__sflush_r+0xb8>
  403bbc:	682c      	ldr	r4, [r5, #0]
  403bbe:	602e      	str	r6, [r5, #0]
  403bc0:	0791      	lsls	r1, r2, #30
  403bc2:	bf0c      	ite	eq
  403bc4:	696b      	ldreq	r3, [r5, #20]
  403bc6:	2300      	movne	r3, #0
  403bc8:	1ba4      	subs	r4, r4, r6
  403bca:	60ab      	str	r3, [r5, #8]
  403bcc:	e00a      	b.n	403be4 <__sflush_r+0xb4>
  403bce:	4623      	mov	r3, r4
  403bd0:	4632      	mov	r2, r6
  403bd2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403bd4:	69e9      	ldr	r1, [r5, #28]
  403bd6:	4640      	mov	r0, r8
  403bd8:	47b8      	blx	r7
  403bda:	2800      	cmp	r0, #0
  403bdc:	eba4 0400 	sub.w	r4, r4, r0
  403be0:	4406      	add	r6, r0
  403be2:	dd04      	ble.n	403bee <__sflush_r+0xbe>
  403be4:	2c00      	cmp	r4, #0
  403be6:	dcf2      	bgt.n	403bce <__sflush_r+0x9e>
  403be8:	2000      	movs	r0, #0
  403bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bee:	89ab      	ldrh	r3, [r5, #12]
  403bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403bf4:	81ab      	strh	r3, [r5, #12]
  403bf6:	f04f 30ff 	mov.w	r0, #4294967295
  403bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bfe:	f8d8 4000 	ldr.w	r4, [r8]
  403c02:	2c1d      	cmp	r4, #29
  403c04:	d8f3      	bhi.n	403bee <__sflush_r+0xbe>
  403c06:	4b19      	ldr	r3, [pc, #100]	; (403c6c <__sflush_r+0x13c>)
  403c08:	40e3      	lsrs	r3, r4
  403c0a:	43db      	mvns	r3, r3
  403c0c:	f013 0301 	ands.w	r3, r3, #1
  403c10:	d1ed      	bne.n	403bee <__sflush_r+0xbe>
  403c12:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403c16:	606b      	str	r3, [r5, #4]
  403c18:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403c1c:	6929      	ldr	r1, [r5, #16]
  403c1e:	81ab      	strh	r3, [r5, #12]
  403c20:	04da      	lsls	r2, r3, #19
  403c22:	6029      	str	r1, [r5, #0]
  403c24:	d5b9      	bpl.n	403b9a <__sflush_r+0x6a>
  403c26:	2c00      	cmp	r4, #0
  403c28:	d1b7      	bne.n	403b9a <__sflush_r+0x6a>
  403c2a:	6528      	str	r0, [r5, #80]	; 0x50
  403c2c:	e7b5      	b.n	403b9a <__sflush_r+0x6a>
  403c2e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403c30:	2a00      	cmp	r2, #0
  403c32:	dc8c      	bgt.n	403b4e <__sflush_r+0x1e>
  403c34:	e7d8      	b.n	403be8 <__sflush_r+0xb8>
  403c36:	2301      	movs	r3, #1
  403c38:	69e9      	ldr	r1, [r5, #28]
  403c3a:	4640      	mov	r0, r8
  403c3c:	47a0      	blx	r4
  403c3e:	1c43      	adds	r3, r0, #1
  403c40:	4602      	mov	r2, r0
  403c42:	d002      	beq.n	403c4a <__sflush_r+0x11a>
  403c44:	89ab      	ldrh	r3, [r5, #12]
  403c46:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403c48:	e78e      	b.n	403b68 <__sflush_r+0x38>
  403c4a:	f8d8 3000 	ldr.w	r3, [r8]
  403c4e:	2b00      	cmp	r3, #0
  403c50:	d0f8      	beq.n	403c44 <__sflush_r+0x114>
  403c52:	2b1d      	cmp	r3, #29
  403c54:	d001      	beq.n	403c5a <__sflush_r+0x12a>
  403c56:	2b16      	cmp	r3, #22
  403c58:	d102      	bne.n	403c60 <__sflush_r+0x130>
  403c5a:	f8c8 6000 	str.w	r6, [r8]
  403c5e:	e7c3      	b.n	403be8 <__sflush_r+0xb8>
  403c60:	89ab      	ldrh	r3, [r5, #12]
  403c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c66:	81ab      	strh	r3, [r5, #12]
  403c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c6c:	20400001 	.word	0x20400001

00403c70 <_fflush_r>:
  403c70:	b538      	push	{r3, r4, r5, lr}
  403c72:	460d      	mov	r5, r1
  403c74:	4604      	mov	r4, r0
  403c76:	b108      	cbz	r0, 403c7c <_fflush_r+0xc>
  403c78:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c7a:	b1bb      	cbz	r3, 403cac <_fflush_r+0x3c>
  403c7c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403c80:	b188      	cbz	r0, 403ca6 <_fflush_r+0x36>
  403c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403c84:	07db      	lsls	r3, r3, #31
  403c86:	d401      	bmi.n	403c8c <_fflush_r+0x1c>
  403c88:	0581      	lsls	r1, r0, #22
  403c8a:	d517      	bpl.n	403cbc <_fflush_r+0x4c>
  403c8c:	4620      	mov	r0, r4
  403c8e:	4629      	mov	r1, r5
  403c90:	f7ff ff4e 	bl	403b30 <__sflush_r>
  403c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403c96:	07da      	lsls	r2, r3, #31
  403c98:	4604      	mov	r4, r0
  403c9a:	d402      	bmi.n	403ca2 <_fflush_r+0x32>
  403c9c:	89ab      	ldrh	r3, [r5, #12]
  403c9e:	059b      	lsls	r3, r3, #22
  403ca0:	d507      	bpl.n	403cb2 <_fflush_r+0x42>
  403ca2:	4620      	mov	r0, r4
  403ca4:	bd38      	pop	{r3, r4, r5, pc}
  403ca6:	4604      	mov	r4, r0
  403ca8:	4620      	mov	r0, r4
  403caa:	bd38      	pop	{r3, r4, r5, pc}
  403cac:	f000 f84a 	bl	403d44 <__sinit>
  403cb0:	e7e4      	b.n	403c7c <_fflush_r+0xc>
  403cb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403cb4:	f000 fd30 	bl	404718 <__retarget_lock_release_recursive>
  403cb8:	4620      	mov	r0, r4
  403cba:	bd38      	pop	{r3, r4, r5, pc}
  403cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403cbe:	f000 fd29 	bl	404714 <__retarget_lock_acquire_recursive>
  403cc2:	e7e3      	b.n	403c8c <_fflush_r+0x1c>

00403cc4 <fflush>:
  403cc4:	b120      	cbz	r0, 403cd0 <fflush+0xc>
  403cc6:	4b05      	ldr	r3, [pc, #20]	; (403cdc <fflush+0x18>)
  403cc8:	4601      	mov	r1, r0
  403cca:	6818      	ldr	r0, [r3, #0]
  403ccc:	f7ff bfd0 	b.w	403c70 <_fflush_r>
  403cd0:	4b03      	ldr	r3, [pc, #12]	; (403ce0 <fflush+0x1c>)
  403cd2:	4904      	ldr	r1, [pc, #16]	; (403ce4 <fflush+0x20>)
  403cd4:	6818      	ldr	r0, [r3, #0]
  403cd6:	f000 bcc1 	b.w	40465c <_fwalk_reent>
  403cda:	bf00      	nop
  403cdc:	20400008 	.word	0x20400008
  403ce0:	004068c4 	.word	0x004068c4
  403ce4:	00403c71 	.word	0x00403c71

00403ce8 <_cleanup_r>:
  403ce8:	4901      	ldr	r1, [pc, #4]	; (403cf0 <_cleanup_r+0x8>)
  403cea:	f000 bcb7 	b.w	40465c <_fwalk_reent>
  403cee:	bf00      	nop
  403cf0:	00406059 	.word	0x00406059

00403cf4 <std.isra.0>:
  403cf4:	b510      	push	{r4, lr}
  403cf6:	2300      	movs	r3, #0
  403cf8:	4604      	mov	r4, r0
  403cfa:	8181      	strh	r1, [r0, #12]
  403cfc:	81c2      	strh	r2, [r0, #14]
  403cfe:	6003      	str	r3, [r0, #0]
  403d00:	6043      	str	r3, [r0, #4]
  403d02:	6083      	str	r3, [r0, #8]
  403d04:	6643      	str	r3, [r0, #100]	; 0x64
  403d06:	6103      	str	r3, [r0, #16]
  403d08:	6143      	str	r3, [r0, #20]
  403d0a:	6183      	str	r3, [r0, #24]
  403d0c:	4619      	mov	r1, r3
  403d0e:	2208      	movs	r2, #8
  403d10:	305c      	adds	r0, #92	; 0x5c
  403d12:	f7fe f9a7 	bl	402064 <memset>
  403d16:	4807      	ldr	r0, [pc, #28]	; (403d34 <std.isra.0+0x40>)
  403d18:	4907      	ldr	r1, [pc, #28]	; (403d38 <std.isra.0+0x44>)
  403d1a:	4a08      	ldr	r2, [pc, #32]	; (403d3c <std.isra.0+0x48>)
  403d1c:	4b08      	ldr	r3, [pc, #32]	; (403d40 <std.isra.0+0x4c>)
  403d1e:	6220      	str	r0, [r4, #32]
  403d20:	61e4      	str	r4, [r4, #28]
  403d22:	6261      	str	r1, [r4, #36]	; 0x24
  403d24:	62a2      	str	r2, [r4, #40]	; 0x28
  403d26:	62e3      	str	r3, [r4, #44]	; 0x2c
  403d28:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d30:	f000 bcec 	b.w	40470c <__retarget_lock_init_recursive>
  403d34:	0040549d 	.word	0x0040549d
  403d38:	004054c1 	.word	0x004054c1
  403d3c:	004054fd 	.word	0x004054fd
  403d40:	0040551d 	.word	0x0040551d

00403d44 <__sinit>:
  403d44:	b510      	push	{r4, lr}
  403d46:	4604      	mov	r4, r0
  403d48:	4812      	ldr	r0, [pc, #72]	; (403d94 <__sinit+0x50>)
  403d4a:	f000 fce3 	bl	404714 <__retarget_lock_acquire_recursive>
  403d4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403d50:	b9d2      	cbnz	r2, 403d88 <__sinit+0x44>
  403d52:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403d56:	4810      	ldr	r0, [pc, #64]	; (403d98 <__sinit+0x54>)
  403d58:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403d5c:	2103      	movs	r1, #3
  403d5e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403d62:	63e0      	str	r0, [r4, #60]	; 0x3c
  403d64:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403d68:	6860      	ldr	r0, [r4, #4]
  403d6a:	2104      	movs	r1, #4
  403d6c:	f7ff ffc2 	bl	403cf4 <std.isra.0>
  403d70:	2201      	movs	r2, #1
  403d72:	2109      	movs	r1, #9
  403d74:	68a0      	ldr	r0, [r4, #8]
  403d76:	f7ff ffbd 	bl	403cf4 <std.isra.0>
  403d7a:	2202      	movs	r2, #2
  403d7c:	2112      	movs	r1, #18
  403d7e:	68e0      	ldr	r0, [r4, #12]
  403d80:	f7ff ffb8 	bl	403cf4 <std.isra.0>
  403d84:	2301      	movs	r3, #1
  403d86:	63a3      	str	r3, [r4, #56]	; 0x38
  403d88:	4802      	ldr	r0, [pc, #8]	; (403d94 <__sinit+0x50>)
  403d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d8e:	f000 bcc3 	b.w	404718 <__retarget_lock_release_recursive>
  403d92:	bf00      	nop
  403d94:	20401678 	.word	0x20401678
  403d98:	00403ce9 	.word	0x00403ce9

00403d9c <__sfp_lock_acquire>:
  403d9c:	4801      	ldr	r0, [pc, #4]	; (403da4 <__sfp_lock_acquire+0x8>)
  403d9e:	f000 bcb9 	b.w	404714 <__retarget_lock_acquire_recursive>
  403da2:	bf00      	nop
  403da4:	2040168c 	.word	0x2040168c

00403da8 <__sfp_lock_release>:
  403da8:	4801      	ldr	r0, [pc, #4]	; (403db0 <__sfp_lock_release+0x8>)
  403daa:	f000 bcb5 	b.w	404718 <__retarget_lock_release_recursive>
  403dae:	bf00      	nop
  403db0:	2040168c 	.word	0x2040168c

00403db4 <__libc_fini_array>:
  403db4:	b538      	push	{r3, r4, r5, lr}
  403db6:	4c0a      	ldr	r4, [pc, #40]	; (403de0 <__libc_fini_array+0x2c>)
  403db8:	4d0a      	ldr	r5, [pc, #40]	; (403de4 <__libc_fini_array+0x30>)
  403dba:	1b64      	subs	r4, r4, r5
  403dbc:	10a4      	asrs	r4, r4, #2
  403dbe:	d00a      	beq.n	403dd6 <__libc_fini_array+0x22>
  403dc0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403dc4:	3b01      	subs	r3, #1
  403dc6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403dca:	3c01      	subs	r4, #1
  403dcc:	f855 3904 	ldr.w	r3, [r5], #-4
  403dd0:	4798      	blx	r3
  403dd2:	2c00      	cmp	r4, #0
  403dd4:	d1f9      	bne.n	403dca <__libc_fini_array+0x16>
  403dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403dda:	f002 be43 	b.w	406a64 <_fini>
  403dde:	bf00      	nop
  403de0:	00406a74 	.word	0x00406a74
  403de4:	00406a70 	.word	0x00406a70

00403de8 <__fputwc>:
  403de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403dec:	b082      	sub	sp, #8
  403dee:	4680      	mov	r8, r0
  403df0:	4689      	mov	r9, r1
  403df2:	4614      	mov	r4, r2
  403df4:	f000 fc6a 	bl	4046cc <__locale_mb_cur_max>
  403df8:	2801      	cmp	r0, #1
  403dfa:	d036      	beq.n	403e6a <__fputwc+0x82>
  403dfc:	464a      	mov	r2, r9
  403dfe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403e02:	a901      	add	r1, sp, #4
  403e04:	4640      	mov	r0, r8
  403e06:	f002 f865 	bl	405ed4 <_wcrtomb_r>
  403e0a:	1c42      	adds	r2, r0, #1
  403e0c:	4606      	mov	r6, r0
  403e0e:	d025      	beq.n	403e5c <__fputwc+0x74>
  403e10:	b3a8      	cbz	r0, 403e7e <__fputwc+0x96>
  403e12:	f89d e004 	ldrb.w	lr, [sp, #4]
  403e16:	2500      	movs	r5, #0
  403e18:	f10d 0a04 	add.w	sl, sp, #4
  403e1c:	e009      	b.n	403e32 <__fputwc+0x4a>
  403e1e:	6823      	ldr	r3, [r4, #0]
  403e20:	1c5a      	adds	r2, r3, #1
  403e22:	6022      	str	r2, [r4, #0]
  403e24:	f883 e000 	strb.w	lr, [r3]
  403e28:	3501      	adds	r5, #1
  403e2a:	42b5      	cmp	r5, r6
  403e2c:	d227      	bcs.n	403e7e <__fputwc+0x96>
  403e2e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403e32:	68a3      	ldr	r3, [r4, #8]
  403e34:	3b01      	subs	r3, #1
  403e36:	2b00      	cmp	r3, #0
  403e38:	60a3      	str	r3, [r4, #8]
  403e3a:	daf0      	bge.n	403e1e <__fputwc+0x36>
  403e3c:	69a7      	ldr	r7, [r4, #24]
  403e3e:	42bb      	cmp	r3, r7
  403e40:	4671      	mov	r1, lr
  403e42:	4622      	mov	r2, r4
  403e44:	4640      	mov	r0, r8
  403e46:	db02      	blt.n	403e4e <__fputwc+0x66>
  403e48:	f1be 0f0a 	cmp.w	lr, #10
  403e4c:	d1e7      	bne.n	403e1e <__fputwc+0x36>
  403e4e:	f001 ffe9 	bl	405e24 <__swbuf_r>
  403e52:	1c43      	adds	r3, r0, #1
  403e54:	d1e8      	bne.n	403e28 <__fputwc+0x40>
  403e56:	b002      	add	sp, #8
  403e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e5c:	89a3      	ldrh	r3, [r4, #12]
  403e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e62:	81a3      	strh	r3, [r4, #12]
  403e64:	b002      	add	sp, #8
  403e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e6a:	f109 33ff 	add.w	r3, r9, #4294967295
  403e6e:	2bfe      	cmp	r3, #254	; 0xfe
  403e70:	d8c4      	bhi.n	403dfc <__fputwc+0x14>
  403e72:	fa5f fe89 	uxtb.w	lr, r9
  403e76:	4606      	mov	r6, r0
  403e78:	f88d e004 	strb.w	lr, [sp, #4]
  403e7c:	e7cb      	b.n	403e16 <__fputwc+0x2e>
  403e7e:	4648      	mov	r0, r9
  403e80:	b002      	add	sp, #8
  403e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e86:	bf00      	nop

00403e88 <_fputwc_r>:
  403e88:	b530      	push	{r4, r5, lr}
  403e8a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403e8c:	f013 0f01 	tst.w	r3, #1
  403e90:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403e94:	4614      	mov	r4, r2
  403e96:	b083      	sub	sp, #12
  403e98:	4605      	mov	r5, r0
  403e9a:	b29a      	uxth	r2, r3
  403e9c:	d101      	bne.n	403ea2 <_fputwc_r+0x1a>
  403e9e:	0590      	lsls	r0, r2, #22
  403ea0:	d51c      	bpl.n	403edc <_fputwc_r+0x54>
  403ea2:	0490      	lsls	r0, r2, #18
  403ea4:	d406      	bmi.n	403eb4 <_fputwc_r+0x2c>
  403ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403eb0:	81a3      	strh	r3, [r4, #12]
  403eb2:	6662      	str	r2, [r4, #100]	; 0x64
  403eb4:	4628      	mov	r0, r5
  403eb6:	4622      	mov	r2, r4
  403eb8:	f7ff ff96 	bl	403de8 <__fputwc>
  403ebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ebe:	07da      	lsls	r2, r3, #31
  403ec0:	4605      	mov	r5, r0
  403ec2:	d402      	bmi.n	403eca <_fputwc_r+0x42>
  403ec4:	89a3      	ldrh	r3, [r4, #12]
  403ec6:	059b      	lsls	r3, r3, #22
  403ec8:	d502      	bpl.n	403ed0 <_fputwc_r+0x48>
  403eca:	4628      	mov	r0, r5
  403ecc:	b003      	add	sp, #12
  403ece:	bd30      	pop	{r4, r5, pc}
  403ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ed2:	f000 fc21 	bl	404718 <__retarget_lock_release_recursive>
  403ed6:	4628      	mov	r0, r5
  403ed8:	b003      	add	sp, #12
  403eda:	bd30      	pop	{r4, r5, pc}
  403edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ede:	9101      	str	r1, [sp, #4]
  403ee0:	f000 fc18 	bl	404714 <__retarget_lock_acquire_recursive>
  403ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ee8:	9901      	ldr	r1, [sp, #4]
  403eea:	b29a      	uxth	r2, r3
  403eec:	e7d9      	b.n	403ea2 <_fputwc_r+0x1a>
  403eee:	bf00      	nop

00403ef0 <_fread_r>:
  403ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ef4:	b085      	sub	sp, #20
  403ef6:	fb02 f703 	mul.w	r7, r2, r3
  403efa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403efc:	2f00      	cmp	r7, #0
  403efe:	d050      	beq.n	403fa2 <_fread_r+0xb2>
  403f00:	4606      	mov	r6, r0
  403f02:	460d      	mov	r5, r1
  403f04:	9301      	str	r3, [sp, #4]
  403f06:	9202      	str	r2, [sp, #8]
  403f08:	b118      	cbz	r0, 403f12 <_fread_r+0x22>
  403f0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403f0c:	2b00      	cmp	r3, #0
  403f0e:	f000 80be 	beq.w	40408e <_fread_r+0x19e>
  403f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403f14:	f013 0f01 	tst.w	r3, #1
  403f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f1c:	b29a      	uxth	r2, r3
  403f1e:	d102      	bne.n	403f26 <_fread_r+0x36>
  403f20:	0590      	lsls	r0, r2, #22
  403f22:	f140 80b7 	bpl.w	404094 <_fread_r+0x1a4>
  403f26:	0491      	lsls	r1, r2, #18
  403f28:	d407      	bmi.n	403f3a <_fread_r+0x4a>
  403f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403f30:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  403f34:	81a3      	strh	r3, [r4, #12]
  403f36:	b29a      	uxth	r2, r3
  403f38:	6661      	str	r1, [r4, #100]	; 0x64
  403f3a:	f8d4 9004 	ldr.w	r9, [r4, #4]
  403f3e:	f1b9 0f00 	cmp.w	r9, #0
  403f42:	db49      	blt.n	403fd8 <_fread_r+0xe8>
  403f44:	0792      	lsls	r2, r2, #30
  403f46:	464b      	mov	r3, r9
  403f48:	d44c      	bmi.n	403fe4 <_fread_r+0xf4>
  403f4a:	46b0      	mov	r8, r6
  403f4c:	46ba      	mov	sl, r7
  403f4e:	464e      	mov	r6, r9
  403f50:	e00e      	b.n	403f70 <_fread_r+0x80>
  403f52:	6821      	ldr	r1, [r4, #0]
  403f54:	f7fd ffec 	bl	401f30 <memcpy>
  403f58:	6823      	ldr	r3, [r4, #0]
  403f5a:	4433      	add	r3, r6
  403f5c:	6023      	str	r3, [r4, #0]
  403f5e:	4621      	mov	r1, r4
  403f60:	4640      	mov	r0, r8
  403f62:	4435      	add	r5, r6
  403f64:	ebaa 0a06 	sub.w	sl, sl, r6
  403f68:	f001 f9c2 	bl	4052f0 <__srefill_r>
  403f6c:	bb10      	cbnz	r0, 403fb4 <_fread_r+0xc4>
  403f6e:	6866      	ldr	r6, [r4, #4]
  403f70:	45b2      	cmp	sl, r6
  403f72:	4632      	mov	r2, r6
  403f74:	4628      	mov	r0, r5
  403f76:	d8ec      	bhi.n	403f52 <_fread_r+0x62>
  403f78:	4652      	mov	r2, sl
  403f7a:	6821      	ldr	r1, [r4, #0]
  403f7c:	f7fd ffd8 	bl	401f30 <memcpy>
  403f80:	6862      	ldr	r2, [r4, #4]
  403f82:	6823      	ldr	r3, [r4, #0]
  403f84:	eba2 020a 	sub.w	r2, r2, sl
  403f88:	4453      	add	r3, sl
  403f8a:	6062      	str	r2, [r4, #4]
  403f8c:	6023      	str	r3, [r4, #0]
  403f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403f90:	07da      	lsls	r2, r3, #31
  403f92:	d40a      	bmi.n	403faa <_fread_r+0xba>
  403f94:	89a3      	ldrh	r3, [r4, #12]
  403f96:	059b      	lsls	r3, r3, #22
  403f98:	d407      	bmi.n	403faa <_fread_r+0xba>
  403f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f9c:	f000 fbbc 	bl	404718 <__retarget_lock_release_recursive>
  403fa0:	9f01      	ldr	r7, [sp, #4]
  403fa2:	4638      	mov	r0, r7
  403fa4:	b005      	add	sp, #20
  403fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403faa:	9f01      	ldr	r7, [sp, #4]
  403fac:	4638      	mov	r0, r7
  403fae:	b005      	add	sp, #20
  403fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403fb6:	07d8      	lsls	r0, r3, #31
  403fb8:	d405      	bmi.n	403fc6 <_fread_r+0xd6>
  403fba:	89a3      	ldrh	r3, [r4, #12]
  403fbc:	0599      	lsls	r1, r3, #22
  403fbe:	d402      	bmi.n	403fc6 <_fread_r+0xd6>
  403fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403fc2:	f000 fba9 	bl	404718 <__retarget_lock_release_recursive>
  403fc6:	9b02      	ldr	r3, [sp, #8]
  403fc8:	eba7 070a 	sub.w	r7, r7, sl
  403fcc:	fbb7 f7f3 	udiv	r7, r7, r3
  403fd0:	4638      	mov	r0, r7
  403fd2:	b005      	add	sp, #20
  403fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fd8:	2100      	movs	r1, #0
  403fda:	0792      	lsls	r2, r2, #30
  403fdc:	460b      	mov	r3, r1
  403fde:	6061      	str	r1, [r4, #4]
  403fe0:	4689      	mov	r9, r1
  403fe2:	d5b2      	bpl.n	403f4a <_fread_r+0x5a>
  403fe4:	42bb      	cmp	r3, r7
  403fe6:	bf28      	it	cs
  403fe8:	463b      	movcs	r3, r7
  403fea:	461a      	mov	r2, r3
  403fec:	6821      	ldr	r1, [r4, #0]
  403fee:	9303      	str	r3, [sp, #12]
  403ff0:	4628      	mov	r0, r5
  403ff2:	f7fd ff9d 	bl	401f30 <memcpy>
  403ff6:	e894 0005 	ldmia.w	r4, {r0, r2}
  403ffa:	9b03      	ldr	r3, [sp, #12]
  403ffc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403ffe:	eb00 0903 	add.w	r9, r0, r3
  404002:	1ad2      	subs	r2, r2, r3
  404004:	f8c4 9000 	str.w	r9, [r4]
  404008:	6062      	str	r2, [r4, #4]
  40400a:	eba7 0803 	sub.w	r8, r7, r3
  40400e:	2900      	cmp	r1, #0
  404010:	d04b      	beq.n	4040aa <_fread_r+0x1ba>
  404012:	f1b8 0f00 	cmp.w	r8, #0
  404016:	d0ba      	beq.n	403f8e <_fread_r+0x9e>
  404018:	f104 0040 	add.w	r0, r4, #64	; 0x40
  40401c:	4281      	cmp	r1, r0
  40401e:	d005      	beq.n	40402c <_fread_r+0x13c>
  404020:	4630      	mov	r0, r6
  404022:	f000 f897 	bl	404154 <_free_r>
  404026:	f8d4 9000 	ldr.w	r9, [r4]
  40402a:	9b03      	ldr	r3, [sp, #12]
  40402c:	2100      	movs	r1, #0
  40402e:	6321      	str	r1, [r4, #48]	; 0x30
  404030:	463a      	mov	r2, r7
  404032:	441d      	add	r5, r3
  404034:	4633      	mov	r3, r6
  404036:	464f      	mov	r7, r9
  404038:	4646      	mov	r6, r8
  40403a:	f8d4 b010 	ldr.w	fp, [r4, #16]
  40403e:	f8d4 a014 	ldr.w	sl, [r4, #20]
  404042:	4698      	mov	r8, r3
  404044:	4691      	mov	r9, r2
  404046:	e001      	b.n	40404c <_fread_r+0x15c>
  404048:	2e00      	cmp	r6, #0
  40404a:	d0a0      	beq.n	403f8e <_fread_r+0x9e>
  40404c:	6125      	str	r5, [r4, #16]
  40404e:	6166      	str	r6, [r4, #20]
  404050:	6025      	str	r5, [r4, #0]
  404052:	4621      	mov	r1, r4
  404054:	4640      	mov	r0, r8
  404056:	f001 f94b 	bl	4052f0 <__srefill_r>
  40405a:	6863      	ldr	r3, [r4, #4]
  40405c:	f8c4 b010 	str.w	fp, [r4, #16]
  404060:	1af6      	subs	r6, r6, r3
  404062:	441d      	add	r5, r3
  404064:	2300      	movs	r3, #0
  404066:	f8c4 a014 	str.w	sl, [r4, #20]
  40406a:	6027      	str	r7, [r4, #0]
  40406c:	6063      	str	r3, [r4, #4]
  40406e:	2800      	cmp	r0, #0
  404070:	d0ea      	beq.n	404048 <_fread_r+0x158>
  404072:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404074:	46b0      	mov	r8, r6
  404076:	07de      	lsls	r6, r3, #31
  404078:	464f      	mov	r7, r9
  40407a:	d402      	bmi.n	404082 <_fread_r+0x192>
  40407c:	89a3      	ldrh	r3, [r4, #12]
  40407e:	059d      	lsls	r5, r3, #22
  404080:	d50f      	bpl.n	4040a2 <_fread_r+0x1b2>
  404082:	eba7 0708 	sub.w	r7, r7, r8
  404086:	9b02      	ldr	r3, [sp, #8]
  404088:	fbb7 f7f3 	udiv	r7, r7, r3
  40408c:	e789      	b.n	403fa2 <_fread_r+0xb2>
  40408e:	f7ff fe59 	bl	403d44 <__sinit>
  404092:	e73e      	b.n	403f12 <_fread_r+0x22>
  404094:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404096:	f000 fb3d 	bl	404714 <__retarget_lock_acquire_recursive>
  40409a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40409e:	b29a      	uxth	r2, r3
  4040a0:	e741      	b.n	403f26 <_fread_r+0x36>
  4040a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040a4:	f000 fb38 	bl	404718 <__retarget_lock_release_recursive>
  4040a8:	e7eb      	b.n	404082 <_fread_r+0x192>
  4040aa:	f1b8 0f00 	cmp.w	r8, #0
  4040ae:	d1bf      	bne.n	404030 <_fread_r+0x140>
  4040b0:	e76d      	b.n	403f8e <_fread_r+0x9e>
  4040b2:	bf00      	nop

004040b4 <_malloc_trim_r>:
  4040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040b6:	4f24      	ldr	r7, [pc, #144]	; (404148 <_malloc_trim_r+0x94>)
  4040b8:	460c      	mov	r4, r1
  4040ba:	4606      	mov	r6, r0
  4040bc:	f000 ff5c 	bl	404f78 <__malloc_lock>
  4040c0:	68bb      	ldr	r3, [r7, #8]
  4040c2:	685d      	ldr	r5, [r3, #4]
  4040c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4040c8:	310f      	adds	r1, #15
  4040ca:	f025 0503 	bic.w	r5, r5, #3
  4040ce:	4429      	add	r1, r5
  4040d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4040d4:	f021 010f 	bic.w	r1, r1, #15
  4040d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4040dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4040e0:	db07      	blt.n	4040f2 <_malloc_trim_r+0x3e>
  4040e2:	2100      	movs	r1, #0
  4040e4:	4630      	mov	r0, r6
  4040e6:	f001 f98d 	bl	405404 <_sbrk_r>
  4040ea:	68bb      	ldr	r3, [r7, #8]
  4040ec:	442b      	add	r3, r5
  4040ee:	4298      	cmp	r0, r3
  4040f0:	d004      	beq.n	4040fc <_malloc_trim_r+0x48>
  4040f2:	4630      	mov	r0, r6
  4040f4:	f000 ff46 	bl	404f84 <__malloc_unlock>
  4040f8:	2000      	movs	r0, #0
  4040fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040fc:	4261      	negs	r1, r4
  4040fe:	4630      	mov	r0, r6
  404100:	f001 f980 	bl	405404 <_sbrk_r>
  404104:	3001      	adds	r0, #1
  404106:	d00d      	beq.n	404124 <_malloc_trim_r+0x70>
  404108:	4b10      	ldr	r3, [pc, #64]	; (40414c <_malloc_trim_r+0x98>)
  40410a:	68ba      	ldr	r2, [r7, #8]
  40410c:	6819      	ldr	r1, [r3, #0]
  40410e:	1b2d      	subs	r5, r5, r4
  404110:	f045 0501 	orr.w	r5, r5, #1
  404114:	4630      	mov	r0, r6
  404116:	1b09      	subs	r1, r1, r4
  404118:	6055      	str	r5, [r2, #4]
  40411a:	6019      	str	r1, [r3, #0]
  40411c:	f000 ff32 	bl	404f84 <__malloc_unlock>
  404120:	2001      	movs	r0, #1
  404122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404124:	2100      	movs	r1, #0
  404126:	4630      	mov	r0, r6
  404128:	f001 f96c 	bl	405404 <_sbrk_r>
  40412c:	68ba      	ldr	r2, [r7, #8]
  40412e:	1a83      	subs	r3, r0, r2
  404130:	2b0f      	cmp	r3, #15
  404132:	ddde      	ble.n	4040f2 <_malloc_trim_r+0x3e>
  404134:	4c06      	ldr	r4, [pc, #24]	; (404150 <_malloc_trim_r+0x9c>)
  404136:	4905      	ldr	r1, [pc, #20]	; (40414c <_malloc_trim_r+0x98>)
  404138:	6824      	ldr	r4, [r4, #0]
  40413a:	f043 0301 	orr.w	r3, r3, #1
  40413e:	1b00      	subs	r0, r0, r4
  404140:	6053      	str	r3, [r2, #4]
  404142:	6008      	str	r0, [r1, #0]
  404144:	e7d5      	b.n	4040f2 <_malloc_trim_r+0x3e>
  404146:	bf00      	nop
  404148:	204005a8 	.word	0x204005a8
  40414c:	204015fc 	.word	0x204015fc
  404150:	204009b0 	.word	0x204009b0

00404154 <_free_r>:
  404154:	2900      	cmp	r1, #0
  404156:	d044      	beq.n	4041e2 <_free_r+0x8e>
  404158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40415c:	460d      	mov	r5, r1
  40415e:	4680      	mov	r8, r0
  404160:	f000 ff0a 	bl	404f78 <__malloc_lock>
  404164:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404168:	4969      	ldr	r1, [pc, #420]	; (404310 <_free_r+0x1bc>)
  40416a:	f027 0301 	bic.w	r3, r7, #1
  40416e:	f1a5 0408 	sub.w	r4, r5, #8
  404172:	18e2      	adds	r2, r4, r3
  404174:	688e      	ldr	r6, [r1, #8]
  404176:	6850      	ldr	r0, [r2, #4]
  404178:	42b2      	cmp	r2, r6
  40417a:	f020 0003 	bic.w	r0, r0, #3
  40417e:	d05e      	beq.n	40423e <_free_r+0xea>
  404180:	07fe      	lsls	r6, r7, #31
  404182:	6050      	str	r0, [r2, #4]
  404184:	d40b      	bmi.n	40419e <_free_r+0x4a>
  404186:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40418a:	1be4      	subs	r4, r4, r7
  40418c:	f101 0e08 	add.w	lr, r1, #8
  404190:	68a5      	ldr	r5, [r4, #8]
  404192:	4575      	cmp	r5, lr
  404194:	443b      	add	r3, r7
  404196:	d06d      	beq.n	404274 <_free_r+0x120>
  404198:	68e7      	ldr	r7, [r4, #12]
  40419a:	60ef      	str	r7, [r5, #12]
  40419c:	60bd      	str	r5, [r7, #8]
  40419e:	1815      	adds	r5, r2, r0
  4041a0:	686d      	ldr	r5, [r5, #4]
  4041a2:	07ed      	lsls	r5, r5, #31
  4041a4:	d53e      	bpl.n	404224 <_free_r+0xd0>
  4041a6:	f043 0201 	orr.w	r2, r3, #1
  4041aa:	6062      	str	r2, [r4, #4]
  4041ac:	50e3      	str	r3, [r4, r3]
  4041ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4041b2:	d217      	bcs.n	4041e4 <_free_r+0x90>
  4041b4:	08db      	lsrs	r3, r3, #3
  4041b6:	1c58      	adds	r0, r3, #1
  4041b8:	109a      	asrs	r2, r3, #2
  4041ba:	684d      	ldr	r5, [r1, #4]
  4041bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4041c0:	60a7      	str	r7, [r4, #8]
  4041c2:	2301      	movs	r3, #1
  4041c4:	4093      	lsls	r3, r2
  4041c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4041ca:	432b      	orrs	r3, r5
  4041cc:	3a08      	subs	r2, #8
  4041ce:	60e2      	str	r2, [r4, #12]
  4041d0:	604b      	str	r3, [r1, #4]
  4041d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4041d6:	60fc      	str	r4, [r7, #12]
  4041d8:	4640      	mov	r0, r8
  4041da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4041de:	f000 bed1 	b.w	404f84 <__malloc_unlock>
  4041e2:	4770      	bx	lr
  4041e4:	0a5a      	lsrs	r2, r3, #9
  4041e6:	2a04      	cmp	r2, #4
  4041e8:	d852      	bhi.n	404290 <_free_r+0x13c>
  4041ea:	099a      	lsrs	r2, r3, #6
  4041ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4041f0:	00ff      	lsls	r7, r7, #3
  4041f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4041f6:	19c8      	adds	r0, r1, r7
  4041f8:	59ca      	ldr	r2, [r1, r7]
  4041fa:	3808      	subs	r0, #8
  4041fc:	4290      	cmp	r0, r2
  4041fe:	d04f      	beq.n	4042a0 <_free_r+0x14c>
  404200:	6851      	ldr	r1, [r2, #4]
  404202:	f021 0103 	bic.w	r1, r1, #3
  404206:	428b      	cmp	r3, r1
  404208:	d232      	bcs.n	404270 <_free_r+0x11c>
  40420a:	6892      	ldr	r2, [r2, #8]
  40420c:	4290      	cmp	r0, r2
  40420e:	d1f7      	bne.n	404200 <_free_r+0xac>
  404210:	68c3      	ldr	r3, [r0, #12]
  404212:	60a0      	str	r0, [r4, #8]
  404214:	60e3      	str	r3, [r4, #12]
  404216:	609c      	str	r4, [r3, #8]
  404218:	60c4      	str	r4, [r0, #12]
  40421a:	4640      	mov	r0, r8
  40421c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404220:	f000 beb0 	b.w	404f84 <__malloc_unlock>
  404224:	6895      	ldr	r5, [r2, #8]
  404226:	4f3b      	ldr	r7, [pc, #236]	; (404314 <_free_r+0x1c0>)
  404228:	42bd      	cmp	r5, r7
  40422a:	4403      	add	r3, r0
  40422c:	d040      	beq.n	4042b0 <_free_r+0x15c>
  40422e:	68d0      	ldr	r0, [r2, #12]
  404230:	60e8      	str	r0, [r5, #12]
  404232:	f043 0201 	orr.w	r2, r3, #1
  404236:	6085      	str	r5, [r0, #8]
  404238:	6062      	str	r2, [r4, #4]
  40423a:	50e3      	str	r3, [r4, r3]
  40423c:	e7b7      	b.n	4041ae <_free_r+0x5a>
  40423e:	07ff      	lsls	r7, r7, #31
  404240:	4403      	add	r3, r0
  404242:	d407      	bmi.n	404254 <_free_r+0x100>
  404244:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404248:	1aa4      	subs	r4, r4, r2
  40424a:	4413      	add	r3, r2
  40424c:	68a0      	ldr	r0, [r4, #8]
  40424e:	68e2      	ldr	r2, [r4, #12]
  404250:	60c2      	str	r2, [r0, #12]
  404252:	6090      	str	r0, [r2, #8]
  404254:	4a30      	ldr	r2, [pc, #192]	; (404318 <_free_r+0x1c4>)
  404256:	6812      	ldr	r2, [r2, #0]
  404258:	f043 0001 	orr.w	r0, r3, #1
  40425c:	4293      	cmp	r3, r2
  40425e:	6060      	str	r0, [r4, #4]
  404260:	608c      	str	r4, [r1, #8]
  404262:	d3b9      	bcc.n	4041d8 <_free_r+0x84>
  404264:	4b2d      	ldr	r3, [pc, #180]	; (40431c <_free_r+0x1c8>)
  404266:	4640      	mov	r0, r8
  404268:	6819      	ldr	r1, [r3, #0]
  40426a:	f7ff ff23 	bl	4040b4 <_malloc_trim_r>
  40426e:	e7b3      	b.n	4041d8 <_free_r+0x84>
  404270:	4610      	mov	r0, r2
  404272:	e7cd      	b.n	404210 <_free_r+0xbc>
  404274:	1811      	adds	r1, r2, r0
  404276:	6849      	ldr	r1, [r1, #4]
  404278:	07c9      	lsls	r1, r1, #31
  40427a:	d444      	bmi.n	404306 <_free_r+0x1b2>
  40427c:	6891      	ldr	r1, [r2, #8]
  40427e:	68d2      	ldr	r2, [r2, #12]
  404280:	60ca      	str	r2, [r1, #12]
  404282:	4403      	add	r3, r0
  404284:	f043 0001 	orr.w	r0, r3, #1
  404288:	6091      	str	r1, [r2, #8]
  40428a:	6060      	str	r0, [r4, #4]
  40428c:	50e3      	str	r3, [r4, r3]
  40428e:	e7a3      	b.n	4041d8 <_free_r+0x84>
  404290:	2a14      	cmp	r2, #20
  404292:	d816      	bhi.n	4042c2 <_free_r+0x16e>
  404294:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404298:	00ff      	lsls	r7, r7, #3
  40429a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40429e:	e7aa      	b.n	4041f6 <_free_r+0xa2>
  4042a0:	10aa      	asrs	r2, r5, #2
  4042a2:	2301      	movs	r3, #1
  4042a4:	684d      	ldr	r5, [r1, #4]
  4042a6:	4093      	lsls	r3, r2
  4042a8:	432b      	orrs	r3, r5
  4042aa:	604b      	str	r3, [r1, #4]
  4042ac:	4603      	mov	r3, r0
  4042ae:	e7b0      	b.n	404212 <_free_r+0xbe>
  4042b0:	f043 0201 	orr.w	r2, r3, #1
  4042b4:	614c      	str	r4, [r1, #20]
  4042b6:	610c      	str	r4, [r1, #16]
  4042b8:	60e5      	str	r5, [r4, #12]
  4042ba:	60a5      	str	r5, [r4, #8]
  4042bc:	6062      	str	r2, [r4, #4]
  4042be:	50e3      	str	r3, [r4, r3]
  4042c0:	e78a      	b.n	4041d8 <_free_r+0x84>
  4042c2:	2a54      	cmp	r2, #84	; 0x54
  4042c4:	d806      	bhi.n	4042d4 <_free_r+0x180>
  4042c6:	0b1a      	lsrs	r2, r3, #12
  4042c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4042cc:	00ff      	lsls	r7, r7, #3
  4042ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4042d2:	e790      	b.n	4041f6 <_free_r+0xa2>
  4042d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4042d8:	d806      	bhi.n	4042e8 <_free_r+0x194>
  4042da:	0bda      	lsrs	r2, r3, #15
  4042dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4042e0:	00ff      	lsls	r7, r7, #3
  4042e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4042e6:	e786      	b.n	4041f6 <_free_r+0xa2>
  4042e8:	f240 5054 	movw	r0, #1364	; 0x554
  4042ec:	4282      	cmp	r2, r0
  4042ee:	d806      	bhi.n	4042fe <_free_r+0x1aa>
  4042f0:	0c9a      	lsrs	r2, r3, #18
  4042f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4042f6:	00ff      	lsls	r7, r7, #3
  4042f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4042fc:	e77b      	b.n	4041f6 <_free_r+0xa2>
  4042fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404302:	257e      	movs	r5, #126	; 0x7e
  404304:	e777      	b.n	4041f6 <_free_r+0xa2>
  404306:	f043 0101 	orr.w	r1, r3, #1
  40430a:	6061      	str	r1, [r4, #4]
  40430c:	6013      	str	r3, [r2, #0]
  40430e:	e763      	b.n	4041d8 <_free_r+0x84>
  404310:	204005a8 	.word	0x204005a8
  404314:	204005b0 	.word	0x204005b0
  404318:	204009b4 	.word	0x204009b4
  40431c:	2040162c 	.word	0x2040162c

00404320 <__sfvwrite_r>:
  404320:	6893      	ldr	r3, [r2, #8]
  404322:	2b00      	cmp	r3, #0
  404324:	d073      	beq.n	40440e <__sfvwrite_r+0xee>
  404326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40432a:	898b      	ldrh	r3, [r1, #12]
  40432c:	b083      	sub	sp, #12
  40432e:	460c      	mov	r4, r1
  404330:	0719      	lsls	r1, r3, #28
  404332:	9000      	str	r0, [sp, #0]
  404334:	4616      	mov	r6, r2
  404336:	d526      	bpl.n	404386 <__sfvwrite_r+0x66>
  404338:	6922      	ldr	r2, [r4, #16]
  40433a:	b322      	cbz	r2, 404386 <__sfvwrite_r+0x66>
  40433c:	f013 0002 	ands.w	r0, r3, #2
  404340:	6835      	ldr	r5, [r6, #0]
  404342:	d02c      	beq.n	40439e <__sfvwrite_r+0x7e>
  404344:	f04f 0900 	mov.w	r9, #0
  404348:	4fb0      	ldr	r7, [pc, #704]	; (40460c <__sfvwrite_r+0x2ec>)
  40434a:	46c8      	mov	r8, r9
  40434c:	46b2      	mov	sl, r6
  40434e:	45b8      	cmp	r8, r7
  404350:	4643      	mov	r3, r8
  404352:	464a      	mov	r2, r9
  404354:	bf28      	it	cs
  404356:	463b      	movcs	r3, r7
  404358:	9800      	ldr	r0, [sp, #0]
  40435a:	f1b8 0f00 	cmp.w	r8, #0
  40435e:	d050      	beq.n	404402 <__sfvwrite_r+0xe2>
  404360:	69e1      	ldr	r1, [r4, #28]
  404362:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404364:	47b0      	blx	r6
  404366:	2800      	cmp	r0, #0
  404368:	dd58      	ble.n	40441c <__sfvwrite_r+0xfc>
  40436a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40436e:	1a1b      	subs	r3, r3, r0
  404370:	4481      	add	r9, r0
  404372:	eba8 0800 	sub.w	r8, r8, r0
  404376:	f8ca 3008 	str.w	r3, [sl, #8]
  40437a:	2b00      	cmp	r3, #0
  40437c:	d1e7      	bne.n	40434e <__sfvwrite_r+0x2e>
  40437e:	2000      	movs	r0, #0
  404380:	b003      	add	sp, #12
  404382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404386:	4621      	mov	r1, r4
  404388:	9800      	ldr	r0, [sp, #0]
  40438a:	f7ff fb5d 	bl	403a48 <__swsetup_r>
  40438e:	2800      	cmp	r0, #0
  404390:	f040 8133 	bne.w	4045fa <__sfvwrite_r+0x2da>
  404394:	89a3      	ldrh	r3, [r4, #12]
  404396:	6835      	ldr	r5, [r6, #0]
  404398:	f013 0002 	ands.w	r0, r3, #2
  40439c:	d1d2      	bne.n	404344 <__sfvwrite_r+0x24>
  40439e:	f013 0901 	ands.w	r9, r3, #1
  4043a2:	d145      	bne.n	404430 <__sfvwrite_r+0x110>
  4043a4:	464f      	mov	r7, r9
  4043a6:	9601      	str	r6, [sp, #4]
  4043a8:	b337      	cbz	r7, 4043f8 <__sfvwrite_r+0xd8>
  4043aa:	059a      	lsls	r2, r3, #22
  4043ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4043b0:	f140 8083 	bpl.w	4044ba <__sfvwrite_r+0x19a>
  4043b4:	4547      	cmp	r7, r8
  4043b6:	46c3      	mov	fp, r8
  4043b8:	f0c0 80ab 	bcc.w	404512 <__sfvwrite_r+0x1f2>
  4043bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4043c0:	f040 80ac 	bne.w	40451c <__sfvwrite_r+0x1fc>
  4043c4:	6820      	ldr	r0, [r4, #0]
  4043c6:	46ba      	mov	sl, r7
  4043c8:	465a      	mov	r2, fp
  4043ca:	4649      	mov	r1, r9
  4043cc:	f000 fd70 	bl	404eb0 <memmove>
  4043d0:	68a2      	ldr	r2, [r4, #8]
  4043d2:	6823      	ldr	r3, [r4, #0]
  4043d4:	eba2 0208 	sub.w	r2, r2, r8
  4043d8:	445b      	add	r3, fp
  4043da:	60a2      	str	r2, [r4, #8]
  4043dc:	6023      	str	r3, [r4, #0]
  4043de:	9a01      	ldr	r2, [sp, #4]
  4043e0:	6893      	ldr	r3, [r2, #8]
  4043e2:	eba3 030a 	sub.w	r3, r3, sl
  4043e6:	44d1      	add	r9, sl
  4043e8:	eba7 070a 	sub.w	r7, r7, sl
  4043ec:	6093      	str	r3, [r2, #8]
  4043ee:	2b00      	cmp	r3, #0
  4043f0:	d0c5      	beq.n	40437e <__sfvwrite_r+0x5e>
  4043f2:	89a3      	ldrh	r3, [r4, #12]
  4043f4:	2f00      	cmp	r7, #0
  4043f6:	d1d8      	bne.n	4043aa <__sfvwrite_r+0x8a>
  4043f8:	f8d5 9000 	ldr.w	r9, [r5]
  4043fc:	686f      	ldr	r7, [r5, #4]
  4043fe:	3508      	adds	r5, #8
  404400:	e7d2      	b.n	4043a8 <__sfvwrite_r+0x88>
  404402:	f8d5 9000 	ldr.w	r9, [r5]
  404406:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40440a:	3508      	adds	r5, #8
  40440c:	e79f      	b.n	40434e <__sfvwrite_r+0x2e>
  40440e:	2000      	movs	r0, #0
  404410:	4770      	bx	lr
  404412:	4621      	mov	r1, r4
  404414:	9800      	ldr	r0, [sp, #0]
  404416:	f7ff fc2b 	bl	403c70 <_fflush_r>
  40441a:	b370      	cbz	r0, 40447a <__sfvwrite_r+0x15a>
  40441c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404424:	f04f 30ff 	mov.w	r0, #4294967295
  404428:	81a3      	strh	r3, [r4, #12]
  40442a:	b003      	add	sp, #12
  40442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404430:	4681      	mov	r9, r0
  404432:	4633      	mov	r3, r6
  404434:	464e      	mov	r6, r9
  404436:	46a8      	mov	r8, r5
  404438:	469a      	mov	sl, r3
  40443a:	464d      	mov	r5, r9
  40443c:	b34e      	cbz	r6, 404492 <__sfvwrite_r+0x172>
  40443e:	b380      	cbz	r0, 4044a2 <__sfvwrite_r+0x182>
  404440:	6820      	ldr	r0, [r4, #0]
  404442:	6923      	ldr	r3, [r4, #16]
  404444:	6962      	ldr	r2, [r4, #20]
  404446:	45b1      	cmp	r9, r6
  404448:	46cb      	mov	fp, r9
  40444a:	bf28      	it	cs
  40444c:	46b3      	movcs	fp, r6
  40444e:	4298      	cmp	r0, r3
  404450:	465f      	mov	r7, fp
  404452:	d904      	bls.n	40445e <__sfvwrite_r+0x13e>
  404454:	68a3      	ldr	r3, [r4, #8]
  404456:	4413      	add	r3, r2
  404458:	459b      	cmp	fp, r3
  40445a:	f300 80a6 	bgt.w	4045aa <__sfvwrite_r+0x28a>
  40445e:	4593      	cmp	fp, r2
  404460:	db4b      	blt.n	4044fa <__sfvwrite_r+0x1da>
  404462:	4613      	mov	r3, r2
  404464:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404466:	69e1      	ldr	r1, [r4, #28]
  404468:	9800      	ldr	r0, [sp, #0]
  40446a:	462a      	mov	r2, r5
  40446c:	47b8      	blx	r7
  40446e:	1e07      	subs	r7, r0, #0
  404470:	ddd4      	ble.n	40441c <__sfvwrite_r+0xfc>
  404472:	ebb9 0907 	subs.w	r9, r9, r7
  404476:	d0cc      	beq.n	404412 <__sfvwrite_r+0xf2>
  404478:	2001      	movs	r0, #1
  40447a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40447e:	1bdb      	subs	r3, r3, r7
  404480:	443d      	add	r5, r7
  404482:	1bf6      	subs	r6, r6, r7
  404484:	f8ca 3008 	str.w	r3, [sl, #8]
  404488:	2b00      	cmp	r3, #0
  40448a:	f43f af78 	beq.w	40437e <__sfvwrite_r+0x5e>
  40448e:	2e00      	cmp	r6, #0
  404490:	d1d5      	bne.n	40443e <__sfvwrite_r+0x11e>
  404492:	f108 0308 	add.w	r3, r8, #8
  404496:	e913 0060 	ldmdb	r3, {r5, r6}
  40449a:	4698      	mov	r8, r3
  40449c:	3308      	adds	r3, #8
  40449e:	2e00      	cmp	r6, #0
  4044a0:	d0f9      	beq.n	404496 <__sfvwrite_r+0x176>
  4044a2:	4632      	mov	r2, r6
  4044a4:	210a      	movs	r1, #10
  4044a6:	4628      	mov	r0, r5
  4044a8:	f000 fcb2 	bl	404e10 <memchr>
  4044ac:	2800      	cmp	r0, #0
  4044ae:	f000 80a1 	beq.w	4045f4 <__sfvwrite_r+0x2d4>
  4044b2:	3001      	adds	r0, #1
  4044b4:	eba0 0905 	sub.w	r9, r0, r5
  4044b8:	e7c2      	b.n	404440 <__sfvwrite_r+0x120>
  4044ba:	6820      	ldr	r0, [r4, #0]
  4044bc:	6923      	ldr	r3, [r4, #16]
  4044be:	4298      	cmp	r0, r3
  4044c0:	d802      	bhi.n	4044c8 <__sfvwrite_r+0x1a8>
  4044c2:	6963      	ldr	r3, [r4, #20]
  4044c4:	429f      	cmp	r7, r3
  4044c6:	d25d      	bcs.n	404584 <__sfvwrite_r+0x264>
  4044c8:	45b8      	cmp	r8, r7
  4044ca:	bf28      	it	cs
  4044cc:	46b8      	movcs	r8, r7
  4044ce:	4642      	mov	r2, r8
  4044d0:	4649      	mov	r1, r9
  4044d2:	f000 fced 	bl	404eb0 <memmove>
  4044d6:	68a3      	ldr	r3, [r4, #8]
  4044d8:	6822      	ldr	r2, [r4, #0]
  4044da:	eba3 0308 	sub.w	r3, r3, r8
  4044de:	4442      	add	r2, r8
  4044e0:	60a3      	str	r3, [r4, #8]
  4044e2:	6022      	str	r2, [r4, #0]
  4044e4:	b10b      	cbz	r3, 4044ea <__sfvwrite_r+0x1ca>
  4044e6:	46c2      	mov	sl, r8
  4044e8:	e779      	b.n	4043de <__sfvwrite_r+0xbe>
  4044ea:	4621      	mov	r1, r4
  4044ec:	9800      	ldr	r0, [sp, #0]
  4044ee:	f7ff fbbf 	bl	403c70 <_fflush_r>
  4044f2:	2800      	cmp	r0, #0
  4044f4:	d192      	bne.n	40441c <__sfvwrite_r+0xfc>
  4044f6:	46c2      	mov	sl, r8
  4044f8:	e771      	b.n	4043de <__sfvwrite_r+0xbe>
  4044fa:	465a      	mov	r2, fp
  4044fc:	4629      	mov	r1, r5
  4044fe:	f000 fcd7 	bl	404eb0 <memmove>
  404502:	68a2      	ldr	r2, [r4, #8]
  404504:	6823      	ldr	r3, [r4, #0]
  404506:	eba2 020b 	sub.w	r2, r2, fp
  40450a:	445b      	add	r3, fp
  40450c:	60a2      	str	r2, [r4, #8]
  40450e:	6023      	str	r3, [r4, #0]
  404510:	e7af      	b.n	404472 <__sfvwrite_r+0x152>
  404512:	6820      	ldr	r0, [r4, #0]
  404514:	46b8      	mov	r8, r7
  404516:	46ba      	mov	sl, r7
  404518:	46bb      	mov	fp, r7
  40451a:	e755      	b.n	4043c8 <__sfvwrite_r+0xa8>
  40451c:	6962      	ldr	r2, [r4, #20]
  40451e:	6820      	ldr	r0, [r4, #0]
  404520:	6921      	ldr	r1, [r4, #16]
  404522:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404526:	eba0 0a01 	sub.w	sl, r0, r1
  40452a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40452e:	f10a 0001 	add.w	r0, sl, #1
  404532:	ea4f 0868 	mov.w	r8, r8, asr #1
  404536:	4438      	add	r0, r7
  404538:	4540      	cmp	r0, r8
  40453a:	4642      	mov	r2, r8
  40453c:	bf84      	itt	hi
  40453e:	4680      	movhi	r8, r0
  404540:	4642      	movhi	r2, r8
  404542:	055b      	lsls	r3, r3, #21
  404544:	d544      	bpl.n	4045d0 <__sfvwrite_r+0x2b0>
  404546:	4611      	mov	r1, r2
  404548:	9800      	ldr	r0, [sp, #0]
  40454a:	f000 f967 	bl	40481c <_malloc_r>
  40454e:	4683      	mov	fp, r0
  404550:	2800      	cmp	r0, #0
  404552:	d055      	beq.n	404600 <__sfvwrite_r+0x2e0>
  404554:	4652      	mov	r2, sl
  404556:	6921      	ldr	r1, [r4, #16]
  404558:	f7fd fcea 	bl	401f30 <memcpy>
  40455c:	89a3      	ldrh	r3, [r4, #12]
  40455e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404566:	81a3      	strh	r3, [r4, #12]
  404568:	eb0b 000a 	add.w	r0, fp, sl
  40456c:	eba8 030a 	sub.w	r3, r8, sl
  404570:	f8c4 b010 	str.w	fp, [r4, #16]
  404574:	f8c4 8014 	str.w	r8, [r4, #20]
  404578:	6020      	str	r0, [r4, #0]
  40457a:	60a3      	str	r3, [r4, #8]
  40457c:	46b8      	mov	r8, r7
  40457e:	46ba      	mov	sl, r7
  404580:	46bb      	mov	fp, r7
  404582:	e721      	b.n	4043c8 <__sfvwrite_r+0xa8>
  404584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404588:	42b9      	cmp	r1, r7
  40458a:	bf28      	it	cs
  40458c:	4639      	movcs	r1, r7
  40458e:	464a      	mov	r2, r9
  404590:	fb91 f1f3 	sdiv	r1, r1, r3
  404594:	9800      	ldr	r0, [sp, #0]
  404596:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404598:	fb03 f301 	mul.w	r3, r3, r1
  40459c:	69e1      	ldr	r1, [r4, #28]
  40459e:	47b0      	blx	r6
  4045a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4045a4:	f73f af1b 	bgt.w	4043de <__sfvwrite_r+0xbe>
  4045a8:	e738      	b.n	40441c <__sfvwrite_r+0xfc>
  4045aa:	461a      	mov	r2, r3
  4045ac:	4629      	mov	r1, r5
  4045ae:	9301      	str	r3, [sp, #4]
  4045b0:	f000 fc7e 	bl	404eb0 <memmove>
  4045b4:	6822      	ldr	r2, [r4, #0]
  4045b6:	9b01      	ldr	r3, [sp, #4]
  4045b8:	9800      	ldr	r0, [sp, #0]
  4045ba:	441a      	add	r2, r3
  4045bc:	6022      	str	r2, [r4, #0]
  4045be:	4621      	mov	r1, r4
  4045c0:	f7ff fb56 	bl	403c70 <_fflush_r>
  4045c4:	9b01      	ldr	r3, [sp, #4]
  4045c6:	2800      	cmp	r0, #0
  4045c8:	f47f af28 	bne.w	40441c <__sfvwrite_r+0xfc>
  4045cc:	461f      	mov	r7, r3
  4045ce:	e750      	b.n	404472 <__sfvwrite_r+0x152>
  4045d0:	9800      	ldr	r0, [sp, #0]
  4045d2:	f000 fcdd 	bl	404f90 <_realloc_r>
  4045d6:	4683      	mov	fp, r0
  4045d8:	2800      	cmp	r0, #0
  4045da:	d1c5      	bne.n	404568 <__sfvwrite_r+0x248>
  4045dc:	9d00      	ldr	r5, [sp, #0]
  4045de:	6921      	ldr	r1, [r4, #16]
  4045e0:	4628      	mov	r0, r5
  4045e2:	f7ff fdb7 	bl	404154 <_free_r>
  4045e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045ea:	220c      	movs	r2, #12
  4045ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4045f0:	602a      	str	r2, [r5, #0]
  4045f2:	e715      	b.n	404420 <__sfvwrite_r+0x100>
  4045f4:	f106 0901 	add.w	r9, r6, #1
  4045f8:	e722      	b.n	404440 <__sfvwrite_r+0x120>
  4045fa:	f04f 30ff 	mov.w	r0, #4294967295
  4045fe:	e6bf      	b.n	404380 <__sfvwrite_r+0x60>
  404600:	9a00      	ldr	r2, [sp, #0]
  404602:	230c      	movs	r3, #12
  404604:	6013      	str	r3, [r2, #0]
  404606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40460a:	e709      	b.n	404420 <__sfvwrite_r+0x100>
  40460c:	7ffffc00 	.word	0x7ffffc00

00404610 <_fwalk>:
  404610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404614:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404618:	d01b      	beq.n	404652 <_fwalk+0x42>
  40461a:	4688      	mov	r8, r1
  40461c:	2600      	movs	r6, #0
  40461e:	687d      	ldr	r5, [r7, #4]
  404620:	68bc      	ldr	r4, [r7, #8]
  404622:	3d01      	subs	r5, #1
  404624:	d40f      	bmi.n	404646 <_fwalk+0x36>
  404626:	89a3      	ldrh	r3, [r4, #12]
  404628:	2b01      	cmp	r3, #1
  40462a:	f105 35ff 	add.w	r5, r5, #4294967295
  40462e:	d906      	bls.n	40463e <_fwalk+0x2e>
  404630:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404634:	3301      	adds	r3, #1
  404636:	4620      	mov	r0, r4
  404638:	d001      	beq.n	40463e <_fwalk+0x2e>
  40463a:	47c0      	blx	r8
  40463c:	4306      	orrs	r6, r0
  40463e:	1c6b      	adds	r3, r5, #1
  404640:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404644:	d1ef      	bne.n	404626 <_fwalk+0x16>
  404646:	683f      	ldr	r7, [r7, #0]
  404648:	2f00      	cmp	r7, #0
  40464a:	d1e8      	bne.n	40461e <_fwalk+0xe>
  40464c:	4630      	mov	r0, r6
  40464e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404652:	463e      	mov	r6, r7
  404654:	4630      	mov	r0, r6
  404656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40465a:	bf00      	nop

0040465c <_fwalk_reent>:
  40465c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404660:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404664:	d01f      	beq.n	4046a6 <_fwalk_reent+0x4a>
  404666:	4688      	mov	r8, r1
  404668:	4606      	mov	r6, r0
  40466a:	f04f 0900 	mov.w	r9, #0
  40466e:	687d      	ldr	r5, [r7, #4]
  404670:	68bc      	ldr	r4, [r7, #8]
  404672:	3d01      	subs	r5, #1
  404674:	d411      	bmi.n	40469a <_fwalk_reent+0x3e>
  404676:	89a3      	ldrh	r3, [r4, #12]
  404678:	2b01      	cmp	r3, #1
  40467a:	f105 35ff 	add.w	r5, r5, #4294967295
  40467e:	d908      	bls.n	404692 <_fwalk_reent+0x36>
  404680:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404684:	3301      	adds	r3, #1
  404686:	4621      	mov	r1, r4
  404688:	4630      	mov	r0, r6
  40468a:	d002      	beq.n	404692 <_fwalk_reent+0x36>
  40468c:	47c0      	blx	r8
  40468e:	ea49 0900 	orr.w	r9, r9, r0
  404692:	1c6b      	adds	r3, r5, #1
  404694:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404698:	d1ed      	bne.n	404676 <_fwalk_reent+0x1a>
  40469a:	683f      	ldr	r7, [r7, #0]
  40469c:	2f00      	cmp	r7, #0
  40469e:	d1e6      	bne.n	40466e <_fwalk_reent+0x12>
  4046a0:	4648      	mov	r0, r9
  4046a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046a6:	46b9      	mov	r9, r7
  4046a8:	4648      	mov	r0, r9
  4046aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046ae:	bf00      	nop

004046b0 <iswspace>:
  4046b0:	28ff      	cmp	r0, #255	; 0xff
  4046b2:	d901      	bls.n	4046b8 <iswspace+0x8>
  4046b4:	2000      	movs	r0, #0
  4046b6:	4770      	bx	lr
  4046b8:	b510      	push	{r4, lr}
  4046ba:	4604      	mov	r4, r0
  4046bc:	f000 f818 	bl	4046f0 <__locale_ctype_ptr>
  4046c0:	4420      	add	r0, r4
  4046c2:	7840      	ldrb	r0, [r0, #1]
  4046c4:	f000 0008 	and.w	r0, r0, #8
  4046c8:	bd10      	pop	{r4, pc}
  4046ca:	bf00      	nop

004046cc <__locale_mb_cur_max>:
  4046cc:	4b04      	ldr	r3, [pc, #16]	; (4046e0 <__locale_mb_cur_max+0x14>)
  4046ce:	4a05      	ldr	r2, [pc, #20]	; (4046e4 <__locale_mb_cur_max+0x18>)
  4046d0:	681b      	ldr	r3, [r3, #0]
  4046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4046d4:	2b00      	cmp	r3, #0
  4046d6:	bf08      	it	eq
  4046d8:	4613      	moveq	r3, r2
  4046da:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4046de:	4770      	bx	lr
  4046e0:	20400008 	.word	0x20400008
  4046e4:	2040043c 	.word	0x2040043c

004046e8 <__locale_ctype_ptr_l>:
  4046e8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  4046ec:	4770      	bx	lr
  4046ee:	bf00      	nop

004046f0 <__locale_ctype_ptr>:
  4046f0:	4b04      	ldr	r3, [pc, #16]	; (404704 <__locale_ctype_ptr+0x14>)
  4046f2:	4a05      	ldr	r2, [pc, #20]	; (404708 <__locale_ctype_ptr+0x18>)
  4046f4:	681b      	ldr	r3, [r3, #0]
  4046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4046f8:	2b00      	cmp	r3, #0
  4046fa:	bf08      	it	eq
  4046fc:	4613      	moveq	r3, r2
  4046fe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  404702:	4770      	bx	lr
  404704:	20400008 	.word	0x20400008
  404708:	2040043c 	.word	0x2040043c

0040470c <__retarget_lock_init_recursive>:
  40470c:	4770      	bx	lr
  40470e:	bf00      	nop

00404710 <__retarget_lock_close_recursive>:
  404710:	4770      	bx	lr
  404712:	bf00      	nop

00404714 <__retarget_lock_acquire_recursive>:
  404714:	4770      	bx	lr
  404716:	bf00      	nop

00404718 <__retarget_lock_release_recursive>:
  404718:	4770      	bx	lr
  40471a:	bf00      	nop

0040471c <__swhatbuf_r>:
  40471c:	b570      	push	{r4, r5, r6, lr}
  40471e:	460c      	mov	r4, r1
  404720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404724:	2900      	cmp	r1, #0
  404726:	b090      	sub	sp, #64	; 0x40
  404728:	4615      	mov	r5, r2
  40472a:	461e      	mov	r6, r3
  40472c:	db14      	blt.n	404758 <__swhatbuf_r+0x3c>
  40472e:	aa01      	add	r2, sp, #4
  404730:	f001 fcf4 	bl	40611c <_fstat_r>
  404734:	2800      	cmp	r0, #0
  404736:	db0f      	blt.n	404758 <__swhatbuf_r+0x3c>
  404738:	9a02      	ldr	r2, [sp, #8]
  40473a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40473e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404742:	fab2 f282 	clz	r2, r2
  404746:	0952      	lsrs	r2, r2, #5
  404748:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40474c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404750:	6032      	str	r2, [r6, #0]
  404752:	602b      	str	r3, [r5, #0]
  404754:	b010      	add	sp, #64	; 0x40
  404756:	bd70      	pop	{r4, r5, r6, pc}
  404758:	89a2      	ldrh	r2, [r4, #12]
  40475a:	2300      	movs	r3, #0
  40475c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404760:	6033      	str	r3, [r6, #0]
  404762:	d004      	beq.n	40476e <__swhatbuf_r+0x52>
  404764:	2240      	movs	r2, #64	; 0x40
  404766:	4618      	mov	r0, r3
  404768:	602a      	str	r2, [r5, #0]
  40476a:	b010      	add	sp, #64	; 0x40
  40476c:	bd70      	pop	{r4, r5, r6, pc}
  40476e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404772:	602b      	str	r3, [r5, #0]
  404774:	b010      	add	sp, #64	; 0x40
  404776:	bd70      	pop	{r4, r5, r6, pc}

00404778 <__smakebuf_r>:
  404778:	898a      	ldrh	r2, [r1, #12]
  40477a:	0792      	lsls	r2, r2, #30
  40477c:	460b      	mov	r3, r1
  40477e:	d506      	bpl.n	40478e <__smakebuf_r+0x16>
  404780:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404784:	2101      	movs	r1, #1
  404786:	601a      	str	r2, [r3, #0]
  404788:	611a      	str	r2, [r3, #16]
  40478a:	6159      	str	r1, [r3, #20]
  40478c:	4770      	bx	lr
  40478e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404790:	b083      	sub	sp, #12
  404792:	ab01      	add	r3, sp, #4
  404794:	466a      	mov	r2, sp
  404796:	460c      	mov	r4, r1
  404798:	4606      	mov	r6, r0
  40479a:	f7ff ffbf 	bl	40471c <__swhatbuf_r>
  40479e:	9900      	ldr	r1, [sp, #0]
  4047a0:	4605      	mov	r5, r0
  4047a2:	4630      	mov	r0, r6
  4047a4:	f000 f83a 	bl	40481c <_malloc_r>
  4047a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ac:	b1d8      	cbz	r0, 4047e6 <__smakebuf_r+0x6e>
  4047ae:	9a01      	ldr	r2, [sp, #4]
  4047b0:	4f15      	ldr	r7, [pc, #84]	; (404808 <__smakebuf_r+0x90>)
  4047b2:	9900      	ldr	r1, [sp, #0]
  4047b4:	63f7      	str	r7, [r6, #60]	; 0x3c
  4047b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4047ba:	81a3      	strh	r3, [r4, #12]
  4047bc:	6020      	str	r0, [r4, #0]
  4047be:	6120      	str	r0, [r4, #16]
  4047c0:	6161      	str	r1, [r4, #20]
  4047c2:	b91a      	cbnz	r2, 4047cc <__smakebuf_r+0x54>
  4047c4:	432b      	orrs	r3, r5
  4047c6:	81a3      	strh	r3, [r4, #12]
  4047c8:	b003      	add	sp, #12
  4047ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047cc:	4630      	mov	r0, r6
  4047ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4047d2:	f001 fcb7 	bl	406144 <_isatty_r>
  4047d6:	b1a0      	cbz	r0, 404802 <__smakebuf_r+0x8a>
  4047d8:	89a3      	ldrh	r3, [r4, #12]
  4047da:	f023 0303 	bic.w	r3, r3, #3
  4047de:	f043 0301 	orr.w	r3, r3, #1
  4047e2:	b21b      	sxth	r3, r3
  4047e4:	e7ee      	b.n	4047c4 <__smakebuf_r+0x4c>
  4047e6:	059a      	lsls	r2, r3, #22
  4047e8:	d4ee      	bmi.n	4047c8 <__smakebuf_r+0x50>
  4047ea:	f023 0303 	bic.w	r3, r3, #3
  4047ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4047f2:	f043 0302 	orr.w	r3, r3, #2
  4047f6:	2101      	movs	r1, #1
  4047f8:	81a3      	strh	r3, [r4, #12]
  4047fa:	6022      	str	r2, [r4, #0]
  4047fc:	6122      	str	r2, [r4, #16]
  4047fe:	6161      	str	r1, [r4, #20]
  404800:	e7e2      	b.n	4047c8 <__smakebuf_r+0x50>
  404802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404806:	e7dd      	b.n	4047c4 <__smakebuf_r+0x4c>
  404808:	00403ce9 	.word	0x00403ce9

0040480c <malloc>:
  40480c:	4b02      	ldr	r3, [pc, #8]	; (404818 <malloc+0xc>)
  40480e:	4601      	mov	r1, r0
  404810:	6818      	ldr	r0, [r3, #0]
  404812:	f000 b803 	b.w	40481c <_malloc_r>
  404816:	bf00      	nop
  404818:	20400008 	.word	0x20400008

0040481c <_malloc_r>:
  40481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404820:	f101 060b 	add.w	r6, r1, #11
  404824:	2e16      	cmp	r6, #22
  404826:	b083      	sub	sp, #12
  404828:	4605      	mov	r5, r0
  40482a:	f240 809e 	bls.w	40496a <_malloc_r+0x14e>
  40482e:	f036 0607 	bics.w	r6, r6, #7
  404832:	f100 80bd 	bmi.w	4049b0 <_malloc_r+0x194>
  404836:	42b1      	cmp	r1, r6
  404838:	f200 80ba 	bhi.w	4049b0 <_malloc_r+0x194>
  40483c:	f000 fb9c 	bl	404f78 <__malloc_lock>
  404840:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404844:	f0c0 8293 	bcc.w	404d6e <_malloc_r+0x552>
  404848:	0a73      	lsrs	r3, r6, #9
  40484a:	f000 80b8 	beq.w	4049be <_malloc_r+0x1a2>
  40484e:	2b04      	cmp	r3, #4
  404850:	f200 8179 	bhi.w	404b46 <_malloc_r+0x32a>
  404854:	09b3      	lsrs	r3, r6, #6
  404856:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40485a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40485e:	00c3      	lsls	r3, r0, #3
  404860:	4fbf      	ldr	r7, [pc, #764]	; (404b60 <_malloc_r+0x344>)
  404862:	443b      	add	r3, r7
  404864:	f1a3 0108 	sub.w	r1, r3, #8
  404868:	685c      	ldr	r4, [r3, #4]
  40486a:	42a1      	cmp	r1, r4
  40486c:	d106      	bne.n	40487c <_malloc_r+0x60>
  40486e:	e00c      	b.n	40488a <_malloc_r+0x6e>
  404870:	2a00      	cmp	r2, #0
  404872:	f280 80aa 	bge.w	4049ca <_malloc_r+0x1ae>
  404876:	68e4      	ldr	r4, [r4, #12]
  404878:	42a1      	cmp	r1, r4
  40487a:	d006      	beq.n	40488a <_malloc_r+0x6e>
  40487c:	6863      	ldr	r3, [r4, #4]
  40487e:	f023 0303 	bic.w	r3, r3, #3
  404882:	1b9a      	subs	r2, r3, r6
  404884:	2a0f      	cmp	r2, #15
  404886:	ddf3      	ble.n	404870 <_malloc_r+0x54>
  404888:	4670      	mov	r0, lr
  40488a:	693c      	ldr	r4, [r7, #16]
  40488c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404b74 <_malloc_r+0x358>
  404890:	4574      	cmp	r4, lr
  404892:	f000 81ab 	beq.w	404bec <_malloc_r+0x3d0>
  404896:	6863      	ldr	r3, [r4, #4]
  404898:	f023 0303 	bic.w	r3, r3, #3
  40489c:	1b9a      	subs	r2, r3, r6
  40489e:	2a0f      	cmp	r2, #15
  4048a0:	f300 8190 	bgt.w	404bc4 <_malloc_r+0x3a8>
  4048a4:	2a00      	cmp	r2, #0
  4048a6:	f8c7 e014 	str.w	lr, [r7, #20]
  4048aa:	f8c7 e010 	str.w	lr, [r7, #16]
  4048ae:	f280 809d 	bge.w	4049ec <_malloc_r+0x1d0>
  4048b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4048b6:	f080 8161 	bcs.w	404b7c <_malloc_r+0x360>
  4048ba:	08db      	lsrs	r3, r3, #3
  4048bc:	f103 0c01 	add.w	ip, r3, #1
  4048c0:	1099      	asrs	r1, r3, #2
  4048c2:	687a      	ldr	r2, [r7, #4]
  4048c4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4048c8:	f8c4 8008 	str.w	r8, [r4, #8]
  4048cc:	2301      	movs	r3, #1
  4048ce:	408b      	lsls	r3, r1
  4048d0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4048d4:	4313      	orrs	r3, r2
  4048d6:	3908      	subs	r1, #8
  4048d8:	60e1      	str	r1, [r4, #12]
  4048da:	607b      	str	r3, [r7, #4]
  4048dc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4048e0:	f8c8 400c 	str.w	r4, [r8, #12]
  4048e4:	1082      	asrs	r2, r0, #2
  4048e6:	2401      	movs	r4, #1
  4048e8:	4094      	lsls	r4, r2
  4048ea:	429c      	cmp	r4, r3
  4048ec:	f200 808b 	bhi.w	404a06 <_malloc_r+0x1ea>
  4048f0:	421c      	tst	r4, r3
  4048f2:	d106      	bne.n	404902 <_malloc_r+0xe6>
  4048f4:	f020 0003 	bic.w	r0, r0, #3
  4048f8:	0064      	lsls	r4, r4, #1
  4048fa:	421c      	tst	r4, r3
  4048fc:	f100 0004 	add.w	r0, r0, #4
  404900:	d0fa      	beq.n	4048f8 <_malloc_r+0xdc>
  404902:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404906:	46cc      	mov	ip, r9
  404908:	4680      	mov	r8, r0
  40490a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40490e:	459c      	cmp	ip, r3
  404910:	d107      	bne.n	404922 <_malloc_r+0x106>
  404912:	e16d      	b.n	404bf0 <_malloc_r+0x3d4>
  404914:	2a00      	cmp	r2, #0
  404916:	f280 817b 	bge.w	404c10 <_malloc_r+0x3f4>
  40491a:	68db      	ldr	r3, [r3, #12]
  40491c:	459c      	cmp	ip, r3
  40491e:	f000 8167 	beq.w	404bf0 <_malloc_r+0x3d4>
  404922:	6859      	ldr	r1, [r3, #4]
  404924:	f021 0103 	bic.w	r1, r1, #3
  404928:	1b8a      	subs	r2, r1, r6
  40492a:	2a0f      	cmp	r2, #15
  40492c:	ddf2      	ble.n	404914 <_malloc_r+0xf8>
  40492e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404932:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404936:	9300      	str	r3, [sp, #0]
  404938:	199c      	adds	r4, r3, r6
  40493a:	4628      	mov	r0, r5
  40493c:	f046 0601 	orr.w	r6, r6, #1
  404940:	f042 0501 	orr.w	r5, r2, #1
  404944:	605e      	str	r6, [r3, #4]
  404946:	f8c8 c00c 	str.w	ip, [r8, #12]
  40494a:	f8cc 8008 	str.w	r8, [ip, #8]
  40494e:	617c      	str	r4, [r7, #20]
  404950:	613c      	str	r4, [r7, #16]
  404952:	f8c4 e00c 	str.w	lr, [r4, #12]
  404956:	f8c4 e008 	str.w	lr, [r4, #8]
  40495a:	6065      	str	r5, [r4, #4]
  40495c:	505a      	str	r2, [r3, r1]
  40495e:	f000 fb11 	bl	404f84 <__malloc_unlock>
  404962:	9b00      	ldr	r3, [sp, #0]
  404964:	f103 0408 	add.w	r4, r3, #8
  404968:	e01e      	b.n	4049a8 <_malloc_r+0x18c>
  40496a:	2910      	cmp	r1, #16
  40496c:	d820      	bhi.n	4049b0 <_malloc_r+0x194>
  40496e:	f000 fb03 	bl	404f78 <__malloc_lock>
  404972:	2610      	movs	r6, #16
  404974:	2318      	movs	r3, #24
  404976:	2002      	movs	r0, #2
  404978:	4f79      	ldr	r7, [pc, #484]	; (404b60 <_malloc_r+0x344>)
  40497a:	443b      	add	r3, r7
  40497c:	f1a3 0208 	sub.w	r2, r3, #8
  404980:	685c      	ldr	r4, [r3, #4]
  404982:	4294      	cmp	r4, r2
  404984:	f000 813d 	beq.w	404c02 <_malloc_r+0x3e6>
  404988:	6863      	ldr	r3, [r4, #4]
  40498a:	68e1      	ldr	r1, [r4, #12]
  40498c:	68a6      	ldr	r6, [r4, #8]
  40498e:	f023 0303 	bic.w	r3, r3, #3
  404992:	4423      	add	r3, r4
  404994:	4628      	mov	r0, r5
  404996:	685a      	ldr	r2, [r3, #4]
  404998:	60f1      	str	r1, [r6, #12]
  40499a:	f042 0201 	orr.w	r2, r2, #1
  40499e:	608e      	str	r6, [r1, #8]
  4049a0:	605a      	str	r2, [r3, #4]
  4049a2:	f000 faef 	bl	404f84 <__malloc_unlock>
  4049a6:	3408      	adds	r4, #8
  4049a8:	4620      	mov	r0, r4
  4049aa:	b003      	add	sp, #12
  4049ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049b0:	2400      	movs	r4, #0
  4049b2:	230c      	movs	r3, #12
  4049b4:	4620      	mov	r0, r4
  4049b6:	602b      	str	r3, [r5, #0]
  4049b8:	b003      	add	sp, #12
  4049ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049be:	2040      	movs	r0, #64	; 0x40
  4049c0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4049c4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4049c8:	e74a      	b.n	404860 <_malloc_r+0x44>
  4049ca:	4423      	add	r3, r4
  4049cc:	68e1      	ldr	r1, [r4, #12]
  4049ce:	685a      	ldr	r2, [r3, #4]
  4049d0:	68a6      	ldr	r6, [r4, #8]
  4049d2:	f042 0201 	orr.w	r2, r2, #1
  4049d6:	60f1      	str	r1, [r6, #12]
  4049d8:	4628      	mov	r0, r5
  4049da:	608e      	str	r6, [r1, #8]
  4049dc:	605a      	str	r2, [r3, #4]
  4049de:	f000 fad1 	bl	404f84 <__malloc_unlock>
  4049e2:	3408      	adds	r4, #8
  4049e4:	4620      	mov	r0, r4
  4049e6:	b003      	add	sp, #12
  4049e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049ec:	4423      	add	r3, r4
  4049ee:	4628      	mov	r0, r5
  4049f0:	685a      	ldr	r2, [r3, #4]
  4049f2:	f042 0201 	orr.w	r2, r2, #1
  4049f6:	605a      	str	r2, [r3, #4]
  4049f8:	f000 fac4 	bl	404f84 <__malloc_unlock>
  4049fc:	3408      	adds	r4, #8
  4049fe:	4620      	mov	r0, r4
  404a00:	b003      	add	sp, #12
  404a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a06:	68bc      	ldr	r4, [r7, #8]
  404a08:	6863      	ldr	r3, [r4, #4]
  404a0a:	f023 0803 	bic.w	r8, r3, #3
  404a0e:	45b0      	cmp	r8, r6
  404a10:	d304      	bcc.n	404a1c <_malloc_r+0x200>
  404a12:	eba8 0306 	sub.w	r3, r8, r6
  404a16:	2b0f      	cmp	r3, #15
  404a18:	f300 8085 	bgt.w	404b26 <_malloc_r+0x30a>
  404a1c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404b78 <_malloc_r+0x35c>
  404a20:	4b50      	ldr	r3, [pc, #320]	; (404b64 <_malloc_r+0x348>)
  404a22:	f8d9 2000 	ldr.w	r2, [r9]
  404a26:	681b      	ldr	r3, [r3, #0]
  404a28:	3201      	adds	r2, #1
  404a2a:	4433      	add	r3, r6
  404a2c:	eb04 0a08 	add.w	sl, r4, r8
  404a30:	f000 8155 	beq.w	404cde <_malloc_r+0x4c2>
  404a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404a38:	330f      	adds	r3, #15
  404a3a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404a3e:	f02b 0b0f 	bic.w	fp, fp, #15
  404a42:	4659      	mov	r1, fp
  404a44:	4628      	mov	r0, r5
  404a46:	f000 fcdd 	bl	405404 <_sbrk_r>
  404a4a:	1c41      	adds	r1, r0, #1
  404a4c:	4602      	mov	r2, r0
  404a4e:	f000 80fc 	beq.w	404c4a <_malloc_r+0x42e>
  404a52:	4582      	cmp	sl, r0
  404a54:	f200 80f7 	bhi.w	404c46 <_malloc_r+0x42a>
  404a58:	4b43      	ldr	r3, [pc, #268]	; (404b68 <_malloc_r+0x34c>)
  404a5a:	6819      	ldr	r1, [r3, #0]
  404a5c:	4459      	add	r1, fp
  404a5e:	6019      	str	r1, [r3, #0]
  404a60:	f000 814d 	beq.w	404cfe <_malloc_r+0x4e2>
  404a64:	f8d9 0000 	ldr.w	r0, [r9]
  404a68:	3001      	adds	r0, #1
  404a6a:	bf1b      	ittet	ne
  404a6c:	eba2 0a0a 	subne.w	sl, r2, sl
  404a70:	4451      	addne	r1, sl
  404a72:	f8c9 2000 	streq.w	r2, [r9]
  404a76:	6019      	strne	r1, [r3, #0]
  404a78:	f012 0107 	ands.w	r1, r2, #7
  404a7c:	f000 8115 	beq.w	404caa <_malloc_r+0x48e>
  404a80:	f1c1 0008 	rsb	r0, r1, #8
  404a84:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404a88:	4402      	add	r2, r0
  404a8a:	3108      	adds	r1, #8
  404a8c:	eb02 090b 	add.w	r9, r2, fp
  404a90:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404a94:	eba1 0909 	sub.w	r9, r1, r9
  404a98:	4649      	mov	r1, r9
  404a9a:	4628      	mov	r0, r5
  404a9c:	9301      	str	r3, [sp, #4]
  404a9e:	9200      	str	r2, [sp, #0]
  404aa0:	f000 fcb0 	bl	405404 <_sbrk_r>
  404aa4:	1c43      	adds	r3, r0, #1
  404aa6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404aaa:	f000 8143 	beq.w	404d34 <_malloc_r+0x518>
  404aae:	1a80      	subs	r0, r0, r2
  404ab0:	4448      	add	r0, r9
  404ab2:	f040 0001 	orr.w	r0, r0, #1
  404ab6:	6819      	ldr	r1, [r3, #0]
  404ab8:	60ba      	str	r2, [r7, #8]
  404aba:	4449      	add	r1, r9
  404abc:	42bc      	cmp	r4, r7
  404abe:	6050      	str	r0, [r2, #4]
  404ac0:	6019      	str	r1, [r3, #0]
  404ac2:	d017      	beq.n	404af4 <_malloc_r+0x2d8>
  404ac4:	f1b8 0f0f 	cmp.w	r8, #15
  404ac8:	f240 80fb 	bls.w	404cc2 <_malloc_r+0x4a6>
  404acc:	6860      	ldr	r0, [r4, #4]
  404ace:	f1a8 020c 	sub.w	r2, r8, #12
  404ad2:	f022 0207 	bic.w	r2, r2, #7
  404ad6:	eb04 0e02 	add.w	lr, r4, r2
  404ada:	f000 0001 	and.w	r0, r0, #1
  404ade:	f04f 0c05 	mov.w	ip, #5
  404ae2:	4310      	orrs	r0, r2
  404ae4:	2a0f      	cmp	r2, #15
  404ae6:	6060      	str	r0, [r4, #4]
  404ae8:	f8ce c004 	str.w	ip, [lr, #4]
  404aec:	f8ce c008 	str.w	ip, [lr, #8]
  404af0:	f200 8117 	bhi.w	404d22 <_malloc_r+0x506>
  404af4:	4b1d      	ldr	r3, [pc, #116]	; (404b6c <_malloc_r+0x350>)
  404af6:	68bc      	ldr	r4, [r7, #8]
  404af8:	681a      	ldr	r2, [r3, #0]
  404afa:	4291      	cmp	r1, r2
  404afc:	bf88      	it	hi
  404afe:	6019      	strhi	r1, [r3, #0]
  404b00:	4b1b      	ldr	r3, [pc, #108]	; (404b70 <_malloc_r+0x354>)
  404b02:	681a      	ldr	r2, [r3, #0]
  404b04:	4291      	cmp	r1, r2
  404b06:	6862      	ldr	r2, [r4, #4]
  404b08:	bf88      	it	hi
  404b0a:	6019      	strhi	r1, [r3, #0]
  404b0c:	f022 0203 	bic.w	r2, r2, #3
  404b10:	4296      	cmp	r6, r2
  404b12:	eba2 0306 	sub.w	r3, r2, r6
  404b16:	d801      	bhi.n	404b1c <_malloc_r+0x300>
  404b18:	2b0f      	cmp	r3, #15
  404b1a:	dc04      	bgt.n	404b26 <_malloc_r+0x30a>
  404b1c:	4628      	mov	r0, r5
  404b1e:	f000 fa31 	bl	404f84 <__malloc_unlock>
  404b22:	2400      	movs	r4, #0
  404b24:	e740      	b.n	4049a8 <_malloc_r+0x18c>
  404b26:	19a2      	adds	r2, r4, r6
  404b28:	f043 0301 	orr.w	r3, r3, #1
  404b2c:	f046 0601 	orr.w	r6, r6, #1
  404b30:	6066      	str	r6, [r4, #4]
  404b32:	4628      	mov	r0, r5
  404b34:	60ba      	str	r2, [r7, #8]
  404b36:	6053      	str	r3, [r2, #4]
  404b38:	f000 fa24 	bl	404f84 <__malloc_unlock>
  404b3c:	3408      	adds	r4, #8
  404b3e:	4620      	mov	r0, r4
  404b40:	b003      	add	sp, #12
  404b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b46:	2b14      	cmp	r3, #20
  404b48:	d971      	bls.n	404c2e <_malloc_r+0x412>
  404b4a:	2b54      	cmp	r3, #84	; 0x54
  404b4c:	f200 80a3 	bhi.w	404c96 <_malloc_r+0x47a>
  404b50:	0b33      	lsrs	r3, r6, #12
  404b52:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404b56:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404b5a:	00c3      	lsls	r3, r0, #3
  404b5c:	e680      	b.n	404860 <_malloc_r+0x44>
  404b5e:	bf00      	nop
  404b60:	204005a8 	.word	0x204005a8
  404b64:	2040162c 	.word	0x2040162c
  404b68:	204015fc 	.word	0x204015fc
  404b6c:	20401624 	.word	0x20401624
  404b70:	20401628 	.word	0x20401628
  404b74:	204005b0 	.word	0x204005b0
  404b78:	204009b0 	.word	0x204009b0
  404b7c:	0a5a      	lsrs	r2, r3, #9
  404b7e:	2a04      	cmp	r2, #4
  404b80:	d95b      	bls.n	404c3a <_malloc_r+0x41e>
  404b82:	2a14      	cmp	r2, #20
  404b84:	f200 80ae 	bhi.w	404ce4 <_malloc_r+0x4c8>
  404b88:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404b8c:	00c9      	lsls	r1, r1, #3
  404b8e:	325b      	adds	r2, #91	; 0x5b
  404b90:	eb07 0c01 	add.w	ip, r7, r1
  404b94:	5879      	ldr	r1, [r7, r1]
  404b96:	f1ac 0c08 	sub.w	ip, ip, #8
  404b9a:	458c      	cmp	ip, r1
  404b9c:	f000 8088 	beq.w	404cb0 <_malloc_r+0x494>
  404ba0:	684a      	ldr	r2, [r1, #4]
  404ba2:	f022 0203 	bic.w	r2, r2, #3
  404ba6:	4293      	cmp	r3, r2
  404ba8:	d273      	bcs.n	404c92 <_malloc_r+0x476>
  404baa:	6889      	ldr	r1, [r1, #8]
  404bac:	458c      	cmp	ip, r1
  404bae:	d1f7      	bne.n	404ba0 <_malloc_r+0x384>
  404bb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404bb4:	687b      	ldr	r3, [r7, #4]
  404bb6:	60e2      	str	r2, [r4, #12]
  404bb8:	f8c4 c008 	str.w	ip, [r4, #8]
  404bbc:	6094      	str	r4, [r2, #8]
  404bbe:	f8cc 400c 	str.w	r4, [ip, #12]
  404bc2:	e68f      	b.n	4048e4 <_malloc_r+0xc8>
  404bc4:	19a1      	adds	r1, r4, r6
  404bc6:	f046 0c01 	orr.w	ip, r6, #1
  404bca:	f042 0601 	orr.w	r6, r2, #1
  404bce:	f8c4 c004 	str.w	ip, [r4, #4]
  404bd2:	4628      	mov	r0, r5
  404bd4:	6179      	str	r1, [r7, #20]
  404bd6:	6139      	str	r1, [r7, #16]
  404bd8:	f8c1 e00c 	str.w	lr, [r1, #12]
  404bdc:	f8c1 e008 	str.w	lr, [r1, #8]
  404be0:	604e      	str	r6, [r1, #4]
  404be2:	50e2      	str	r2, [r4, r3]
  404be4:	f000 f9ce 	bl	404f84 <__malloc_unlock>
  404be8:	3408      	adds	r4, #8
  404bea:	e6dd      	b.n	4049a8 <_malloc_r+0x18c>
  404bec:	687b      	ldr	r3, [r7, #4]
  404bee:	e679      	b.n	4048e4 <_malloc_r+0xc8>
  404bf0:	f108 0801 	add.w	r8, r8, #1
  404bf4:	f018 0f03 	tst.w	r8, #3
  404bf8:	f10c 0c08 	add.w	ip, ip, #8
  404bfc:	f47f ae85 	bne.w	40490a <_malloc_r+0xee>
  404c00:	e02d      	b.n	404c5e <_malloc_r+0x442>
  404c02:	68dc      	ldr	r4, [r3, #12]
  404c04:	42a3      	cmp	r3, r4
  404c06:	bf08      	it	eq
  404c08:	3002      	addeq	r0, #2
  404c0a:	f43f ae3e 	beq.w	40488a <_malloc_r+0x6e>
  404c0e:	e6bb      	b.n	404988 <_malloc_r+0x16c>
  404c10:	4419      	add	r1, r3
  404c12:	461c      	mov	r4, r3
  404c14:	684a      	ldr	r2, [r1, #4]
  404c16:	68db      	ldr	r3, [r3, #12]
  404c18:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404c1c:	f042 0201 	orr.w	r2, r2, #1
  404c20:	604a      	str	r2, [r1, #4]
  404c22:	4628      	mov	r0, r5
  404c24:	60f3      	str	r3, [r6, #12]
  404c26:	609e      	str	r6, [r3, #8]
  404c28:	f000 f9ac 	bl	404f84 <__malloc_unlock>
  404c2c:	e6bc      	b.n	4049a8 <_malloc_r+0x18c>
  404c2e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404c32:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404c36:	00c3      	lsls	r3, r0, #3
  404c38:	e612      	b.n	404860 <_malloc_r+0x44>
  404c3a:	099a      	lsrs	r2, r3, #6
  404c3c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404c40:	00c9      	lsls	r1, r1, #3
  404c42:	3238      	adds	r2, #56	; 0x38
  404c44:	e7a4      	b.n	404b90 <_malloc_r+0x374>
  404c46:	42bc      	cmp	r4, r7
  404c48:	d054      	beq.n	404cf4 <_malloc_r+0x4d8>
  404c4a:	68bc      	ldr	r4, [r7, #8]
  404c4c:	6862      	ldr	r2, [r4, #4]
  404c4e:	f022 0203 	bic.w	r2, r2, #3
  404c52:	e75d      	b.n	404b10 <_malloc_r+0x2f4>
  404c54:	f859 3908 	ldr.w	r3, [r9], #-8
  404c58:	4599      	cmp	r9, r3
  404c5a:	f040 8086 	bne.w	404d6a <_malloc_r+0x54e>
  404c5e:	f010 0f03 	tst.w	r0, #3
  404c62:	f100 30ff 	add.w	r0, r0, #4294967295
  404c66:	d1f5      	bne.n	404c54 <_malloc_r+0x438>
  404c68:	687b      	ldr	r3, [r7, #4]
  404c6a:	ea23 0304 	bic.w	r3, r3, r4
  404c6e:	607b      	str	r3, [r7, #4]
  404c70:	0064      	lsls	r4, r4, #1
  404c72:	429c      	cmp	r4, r3
  404c74:	f63f aec7 	bhi.w	404a06 <_malloc_r+0x1ea>
  404c78:	2c00      	cmp	r4, #0
  404c7a:	f43f aec4 	beq.w	404a06 <_malloc_r+0x1ea>
  404c7e:	421c      	tst	r4, r3
  404c80:	4640      	mov	r0, r8
  404c82:	f47f ae3e 	bne.w	404902 <_malloc_r+0xe6>
  404c86:	0064      	lsls	r4, r4, #1
  404c88:	421c      	tst	r4, r3
  404c8a:	f100 0004 	add.w	r0, r0, #4
  404c8e:	d0fa      	beq.n	404c86 <_malloc_r+0x46a>
  404c90:	e637      	b.n	404902 <_malloc_r+0xe6>
  404c92:	468c      	mov	ip, r1
  404c94:	e78c      	b.n	404bb0 <_malloc_r+0x394>
  404c96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404c9a:	d815      	bhi.n	404cc8 <_malloc_r+0x4ac>
  404c9c:	0bf3      	lsrs	r3, r6, #15
  404c9e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404ca2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404ca6:	00c3      	lsls	r3, r0, #3
  404ca8:	e5da      	b.n	404860 <_malloc_r+0x44>
  404caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404cae:	e6ed      	b.n	404a8c <_malloc_r+0x270>
  404cb0:	687b      	ldr	r3, [r7, #4]
  404cb2:	1092      	asrs	r2, r2, #2
  404cb4:	2101      	movs	r1, #1
  404cb6:	fa01 f202 	lsl.w	r2, r1, r2
  404cba:	4313      	orrs	r3, r2
  404cbc:	607b      	str	r3, [r7, #4]
  404cbe:	4662      	mov	r2, ip
  404cc0:	e779      	b.n	404bb6 <_malloc_r+0x39a>
  404cc2:	2301      	movs	r3, #1
  404cc4:	6053      	str	r3, [r2, #4]
  404cc6:	e729      	b.n	404b1c <_malloc_r+0x300>
  404cc8:	f240 5254 	movw	r2, #1364	; 0x554
  404ccc:	4293      	cmp	r3, r2
  404cce:	d822      	bhi.n	404d16 <_malloc_r+0x4fa>
  404cd0:	0cb3      	lsrs	r3, r6, #18
  404cd2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404cd6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404cda:	00c3      	lsls	r3, r0, #3
  404cdc:	e5c0      	b.n	404860 <_malloc_r+0x44>
  404cde:	f103 0b10 	add.w	fp, r3, #16
  404ce2:	e6ae      	b.n	404a42 <_malloc_r+0x226>
  404ce4:	2a54      	cmp	r2, #84	; 0x54
  404ce6:	d829      	bhi.n	404d3c <_malloc_r+0x520>
  404ce8:	0b1a      	lsrs	r2, r3, #12
  404cea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404cee:	00c9      	lsls	r1, r1, #3
  404cf0:	326e      	adds	r2, #110	; 0x6e
  404cf2:	e74d      	b.n	404b90 <_malloc_r+0x374>
  404cf4:	4b20      	ldr	r3, [pc, #128]	; (404d78 <_malloc_r+0x55c>)
  404cf6:	6819      	ldr	r1, [r3, #0]
  404cf8:	4459      	add	r1, fp
  404cfa:	6019      	str	r1, [r3, #0]
  404cfc:	e6b2      	b.n	404a64 <_malloc_r+0x248>
  404cfe:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404d02:	2800      	cmp	r0, #0
  404d04:	f47f aeae 	bne.w	404a64 <_malloc_r+0x248>
  404d08:	eb08 030b 	add.w	r3, r8, fp
  404d0c:	68ba      	ldr	r2, [r7, #8]
  404d0e:	f043 0301 	orr.w	r3, r3, #1
  404d12:	6053      	str	r3, [r2, #4]
  404d14:	e6ee      	b.n	404af4 <_malloc_r+0x2d8>
  404d16:	207f      	movs	r0, #127	; 0x7f
  404d18:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404d1c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404d20:	e59e      	b.n	404860 <_malloc_r+0x44>
  404d22:	f104 0108 	add.w	r1, r4, #8
  404d26:	4628      	mov	r0, r5
  404d28:	9300      	str	r3, [sp, #0]
  404d2a:	f7ff fa13 	bl	404154 <_free_r>
  404d2e:	9b00      	ldr	r3, [sp, #0]
  404d30:	6819      	ldr	r1, [r3, #0]
  404d32:	e6df      	b.n	404af4 <_malloc_r+0x2d8>
  404d34:	2001      	movs	r0, #1
  404d36:	f04f 0900 	mov.w	r9, #0
  404d3a:	e6bc      	b.n	404ab6 <_malloc_r+0x29a>
  404d3c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404d40:	d805      	bhi.n	404d4e <_malloc_r+0x532>
  404d42:	0bda      	lsrs	r2, r3, #15
  404d44:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404d48:	00c9      	lsls	r1, r1, #3
  404d4a:	3277      	adds	r2, #119	; 0x77
  404d4c:	e720      	b.n	404b90 <_malloc_r+0x374>
  404d4e:	f240 5154 	movw	r1, #1364	; 0x554
  404d52:	428a      	cmp	r2, r1
  404d54:	d805      	bhi.n	404d62 <_malloc_r+0x546>
  404d56:	0c9a      	lsrs	r2, r3, #18
  404d58:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404d5c:	00c9      	lsls	r1, r1, #3
  404d5e:	327c      	adds	r2, #124	; 0x7c
  404d60:	e716      	b.n	404b90 <_malloc_r+0x374>
  404d62:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404d66:	227e      	movs	r2, #126	; 0x7e
  404d68:	e712      	b.n	404b90 <_malloc_r+0x374>
  404d6a:	687b      	ldr	r3, [r7, #4]
  404d6c:	e780      	b.n	404c70 <_malloc_r+0x454>
  404d6e:	08f0      	lsrs	r0, r6, #3
  404d70:	f106 0308 	add.w	r3, r6, #8
  404d74:	e600      	b.n	404978 <_malloc_r+0x15c>
  404d76:	bf00      	nop
  404d78:	204015fc 	.word	0x204015fc

00404d7c <_mbrtowc_r>:
  404d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404d7e:	b083      	sub	sp, #12
  404d80:	4607      	mov	r7, r0
  404d82:	9d08      	ldr	r5, [sp, #32]
  404d84:	b192      	cbz	r2, 404dac <_mbrtowc_r+0x30>
  404d86:	4c11      	ldr	r4, [pc, #68]	; (404dcc <_mbrtowc_r+0x50>)
  404d88:	4e11      	ldr	r6, [pc, #68]	; (404dd0 <_mbrtowc_r+0x54>)
  404d8a:	6824      	ldr	r4, [r4, #0]
  404d8c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404d8e:	9500      	str	r5, [sp, #0]
  404d90:	2c00      	cmp	r4, #0
  404d92:	bf08      	it	eq
  404d94:	4634      	moveq	r4, r6
  404d96:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
  404d9a:	47a0      	blx	r4
  404d9c:	1c43      	adds	r3, r0, #1
  404d9e:	d103      	bne.n	404da8 <_mbrtowc_r+0x2c>
  404da0:	2200      	movs	r2, #0
  404da2:	238a      	movs	r3, #138	; 0x8a
  404da4:	602a      	str	r2, [r5, #0]
  404da6:	603b      	str	r3, [r7, #0]
  404da8:	b003      	add	sp, #12
  404daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404dac:	4b07      	ldr	r3, [pc, #28]	; (404dcc <_mbrtowc_r+0x50>)
  404dae:	4908      	ldr	r1, [pc, #32]	; (404dd0 <_mbrtowc_r+0x54>)
  404db0:	681b      	ldr	r3, [r3, #0]
  404db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404db4:	9500      	str	r5, [sp, #0]
  404db6:	2b00      	cmp	r3, #0
  404db8:	bf08      	it	eq
  404dba:	460b      	moveq	r3, r1
  404dbc:	4614      	mov	r4, r2
  404dbe:	4621      	mov	r1, r4
  404dc0:	4a04      	ldr	r2, [pc, #16]	; (404dd4 <_mbrtowc_r+0x58>)
  404dc2:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
  404dc6:	2301      	movs	r3, #1
  404dc8:	47a0      	blx	r4
  404dca:	e7e7      	b.n	404d9c <_mbrtowc_r+0x20>
  404dcc:	20400008 	.word	0x20400008
  404dd0:	2040043c 	.word	0x2040043c
  404dd4:	00406628 	.word	0x00406628

00404dd8 <__ascii_mbtowc>:
  404dd8:	b082      	sub	sp, #8
  404dda:	b149      	cbz	r1, 404df0 <__ascii_mbtowc+0x18>
  404ddc:	b15a      	cbz	r2, 404df6 <__ascii_mbtowc+0x1e>
  404dde:	b16b      	cbz	r3, 404dfc <__ascii_mbtowc+0x24>
  404de0:	7813      	ldrb	r3, [r2, #0]
  404de2:	600b      	str	r3, [r1, #0]
  404de4:	7812      	ldrb	r2, [r2, #0]
  404de6:	1c10      	adds	r0, r2, #0
  404de8:	bf18      	it	ne
  404dea:	2001      	movne	r0, #1
  404dec:	b002      	add	sp, #8
  404dee:	4770      	bx	lr
  404df0:	a901      	add	r1, sp, #4
  404df2:	2a00      	cmp	r2, #0
  404df4:	d1f3      	bne.n	404dde <__ascii_mbtowc+0x6>
  404df6:	4610      	mov	r0, r2
  404df8:	b002      	add	sp, #8
  404dfa:	4770      	bx	lr
  404dfc:	f06f 0001 	mvn.w	r0, #1
  404e00:	e7f4      	b.n	404dec <__ascii_mbtowc+0x14>
  404e02:	bf00      	nop
	...

00404e10 <memchr>:
  404e10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e14:	2a10      	cmp	r2, #16
  404e16:	db2b      	blt.n	404e70 <memchr+0x60>
  404e18:	f010 0f07 	tst.w	r0, #7
  404e1c:	d008      	beq.n	404e30 <memchr+0x20>
  404e1e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e22:	3a01      	subs	r2, #1
  404e24:	428b      	cmp	r3, r1
  404e26:	d02d      	beq.n	404e84 <memchr+0x74>
  404e28:	f010 0f07 	tst.w	r0, #7
  404e2c:	b342      	cbz	r2, 404e80 <memchr+0x70>
  404e2e:	d1f6      	bne.n	404e1e <memchr+0xe>
  404e30:	b4f0      	push	{r4, r5, r6, r7}
  404e32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404e36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404e3a:	f022 0407 	bic.w	r4, r2, #7
  404e3e:	f07f 0700 	mvns.w	r7, #0
  404e42:	2300      	movs	r3, #0
  404e44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404e48:	3c08      	subs	r4, #8
  404e4a:	ea85 0501 	eor.w	r5, r5, r1
  404e4e:	ea86 0601 	eor.w	r6, r6, r1
  404e52:	fa85 f547 	uadd8	r5, r5, r7
  404e56:	faa3 f587 	sel	r5, r3, r7
  404e5a:	fa86 f647 	uadd8	r6, r6, r7
  404e5e:	faa5 f687 	sel	r6, r5, r7
  404e62:	b98e      	cbnz	r6, 404e88 <memchr+0x78>
  404e64:	d1ee      	bne.n	404e44 <memchr+0x34>
  404e66:	bcf0      	pop	{r4, r5, r6, r7}
  404e68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e6c:	f002 0207 	and.w	r2, r2, #7
  404e70:	b132      	cbz	r2, 404e80 <memchr+0x70>
  404e72:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e76:	3a01      	subs	r2, #1
  404e78:	ea83 0301 	eor.w	r3, r3, r1
  404e7c:	b113      	cbz	r3, 404e84 <memchr+0x74>
  404e7e:	d1f8      	bne.n	404e72 <memchr+0x62>
  404e80:	2000      	movs	r0, #0
  404e82:	4770      	bx	lr
  404e84:	3801      	subs	r0, #1
  404e86:	4770      	bx	lr
  404e88:	2d00      	cmp	r5, #0
  404e8a:	bf06      	itte	eq
  404e8c:	4635      	moveq	r5, r6
  404e8e:	3803      	subeq	r0, #3
  404e90:	3807      	subne	r0, #7
  404e92:	f015 0f01 	tst.w	r5, #1
  404e96:	d107      	bne.n	404ea8 <memchr+0x98>
  404e98:	3001      	adds	r0, #1
  404e9a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404e9e:	bf02      	ittt	eq
  404ea0:	3001      	addeq	r0, #1
  404ea2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404ea6:	3001      	addeq	r0, #1
  404ea8:	bcf0      	pop	{r4, r5, r6, r7}
  404eaa:	3801      	subs	r0, #1
  404eac:	4770      	bx	lr
  404eae:	bf00      	nop

00404eb0 <memmove>:
  404eb0:	4288      	cmp	r0, r1
  404eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
  404eb4:	d90d      	bls.n	404ed2 <memmove+0x22>
  404eb6:	188b      	adds	r3, r1, r2
  404eb8:	4298      	cmp	r0, r3
  404eba:	d20a      	bcs.n	404ed2 <memmove+0x22>
  404ebc:	1884      	adds	r4, r0, r2
  404ebe:	2a00      	cmp	r2, #0
  404ec0:	d051      	beq.n	404f66 <memmove+0xb6>
  404ec2:	4622      	mov	r2, r4
  404ec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404ec8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404ecc:	4299      	cmp	r1, r3
  404ece:	d1f9      	bne.n	404ec4 <memmove+0x14>
  404ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404ed2:	2a0f      	cmp	r2, #15
  404ed4:	d948      	bls.n	404f68 <memmove+0xb8>
  404ed6:	ea41 0300 	orr.w	r3, r1, r0
  404eda:	079b      	lsls	r3, r3, #30
  404edc:	d146      	bne.n	404f6c <memmove+0xbc>
  404ede:	f100 0410 	add.w	r4, r0, #16
  404ee2:	f101 0310 	add.w	r3, r1, #16
  404ee6:	4615      	mov	r5, r2
  404ee8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404eec:	f844 6c10 	str.w	r6, [r4, #-16]
  404ef0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404ef4:	f844 6c0c 	str.w	r6, [r4, #-12]
  404ef8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404efc:	f844 6c08 	str.w	r6, [r4, #-8]
  404f00:	3d10      	subs	r5, #16
  404f02:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404f06:	f844 6c04 	str.w	r6, [r4, #-4]
  404f0a:	2d0f      	cmp	r5, #15
  404f0c:	f103 0310 	add.w	r3, r3, #16
  404f10:	f104 0410 	add.w	r4, r4, #16
  404f14:	d8e8      	bhi.n	404ee8 <memmove+0x38>
  404f16:	f1a2 0310 	sub.w	r3, r2, #16
  404f1a:	f023 030f 	bic.w	r3, r3, #15
  404f1e:	f002 0e0f 	and.w	lr, r2, #15
  404f22:	3310      	adds	r3, #16
  404f24:	f1be 0f03 	cmp.w	lr, #3
  404f28:	4419      	add	r1, r3
  404f2a:	4403      	add	r3, r0
  404f2c:	d921      	bls.n	404f72 <memmove+0xc2>
  404f2e:	1f1e      	subs	r6, r3, #4
  404f30:	460d      	mov	r5, r1
  404f32:	4674      	mov	r4, lr
  404f34:	3c04      	subs	r4, #4
  404f36:	f855 7b04 	ldr.w	r7, [r5], #4
  404f3a:	f846 7f04 	str.w	r7, [r6, #4]!
  404f3e:	2c03      	cmp	r4, #3
  404f40:	d8f8      	bhi.n	404f34 <memmove+0x84>
  404f42:	f1ae 0404 	sub.w	r4, lr, #4
  404f46:	f024 0403 	bic.w	r4, r4, #3
  404f4a:	3404      	adds	r4, #4
  404f4c:	4421      	add	r1, r4
  404f4e:	4423      	add	r3, r4
  404f50:	f002 0203 	and.w	r2, r2, #3
  404f54:	b162      	cbz	r2, 404f70 <memmove+0xc0>
  404f56:	3b01      	subs	r3, #1
  404f58:	440a      	add	r2, r1
  404f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
  404f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
  404f62:	428a      	cmp	r2, r1
  404f64:	d1f9      	bne.n	404f5a <memmove+0xaa>
  404f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404f68:	4603      	mov	r3, r0
  404f6a:	e7f3      	b.n	404f54 <memmove+0xa4>
  404f6c:	4603      	mov	r3, r0
  404f6e:	e7f2      	b.n	404f56 <memmove+0xa6>
  404f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404f72:	4672      	mov	r2, lr
  404f74:	e7ee      	b.n	404f54 <memmove+0xa4>
  404f76:	bf00      	nop

00404f78 <__malloc_lock>:
  404f78:	4801      	ldr	r0, [pc, #4]	; (404f80 <__malloc_lock+0x8>)
  404f7a:	f7ff bbcb 	b.w	404714 <__retarget_lock_acquire_recursive>
  404f7e:	bf00      	nop
  404f80:	2040167c 	.word	0x2040167c

00404f84 <__malloc_unlock>:
  404f84:	4801      	ldr	r0, [pc, #4]	; (404f8c <__malloc_unlock+0x8>)
  404f86:	f7ff bbc7 	b.w	404718 <__retarget_lock_release_recursive>
  404f8a:	bf00      	nop
  404f8c:	2040167c 	.word	0x2040167c

00404f90 <_realloc_r>:
  404f90:	2900      	cmp	r1, #0
  404f92:	f000 8095 	beq.w	4050c0 <_realloc_r+0x130>
  404f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f9a:	460d      	mov	r5, r1
  404f9c:	4616      	mov	r6, r2
  404f9e:	b083      	sub	sp, #12
  404fa0:	4680      	mov	r8, r0
  404fa2:	f106 070b 	add.w	r7, r6, #11
  404fa6:	f7ff ffe7 	bl	404f78 <__malloc_lock>
  404faa:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404fae:	2f16      	cmp	r7, #22
  404fb0:	f02e 0403 	bic.w	r4, lr, #3
  404fb4:	f1a5 0908 	sub.w	r9, r5, #8
  404fb8:	d83c      	bhi.n	405034 <_realloc_r+0xa4>
  404fba:	2210      	movs	r2, #16
  404fbc:	4617      	mov	r7, r2
  404fbe:	42be      	cmp	r6, r7
  404fc0:	d83d      	bhi.n	40503e <_realloc_r+0xae>
  404fc2:	4294      	cmp	r4, r2
  404fc4:	da43      	bge.n	40504e <_realloc_r+0xbe>
  404fc6:	4bc4      	ldr	r3, [pc, #784]	; (4052d8 <_realloc_r+0x348>)
  404fc8:	6899      	ldr	r1, [r3, #8]
  404fca:	eb09 0004 	add.w	r0, r9, r4
  404fce:	4288      	cmp	r0, r1
  404fd0:	f000 80b4 	beq.w	40513c <_realloc_r+0x1ac>
  404fd4:	6843      	ldr	r3, [r0, #4]
  404fd6:	f023 0101 	bic.w	r1, r3, #1
  404fda:	4401      	add	r1, r0
  404fdc:	6849      	ldr	r1, [r1, #4]
  404fde:	07c9      	lsls	r1, r1, #31
  404fe0:	d54c      	bpl.n	40507c <_realloc_r+0xec>
  404fe2:	f01e 0f01 	tst.w	lr, #1
  404fe6:	f000 809b 	beq.w	405120 <_realloc_r+0x190>
  404fea:	4631      	mov	r1, r6
  404fec:	4640      	mov	r0, r8
  404fee:	f7ff fc15 	bl	40481c <_malloc_r>
  404ff2:	4606      	mov	r6, r0
  404ff4:	2800      	cmp	r0, #0
  404ff6:	d03a      	beq.n	40506e <_realloc_r+0xde>
  404ff8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404ffc:	f023 0301 	bic.w	r3, r3, #1
  405000:	444b      	add	r3, r9
  405002:	f1a0 0208 	sub.w	r2, r0, #8
  405006:	429a      	cmp	r2, r3
  405008:	f000 8121 	beq.w	40524e <_realloc_r+0x2be>
  40500c:	1f22      	subs	r2, r4, #4
  40500e:	2a24      	cmp	r2, #36	; 0x24
  405010:	f200 8107 	bhi.w	405222 <_realloc_r+0x292>
  405014:	2a13      	cmp	r2, #19
  405016:	f200 80db 	bhi.w	4051d0 <_realloc_r+0x240>
  40501a:	4603      	mov	r3, r0
  40501c:	462a      	mov	r2, r5
  40501e:	6811      	ldr	r1, [r2, #0]
  405020:	6019      	str	r1, [r3, #0]
  405022:	6851      	ldr	r1, [r2, #4]
  405024:	6059      	str	r1, [r3, #4]
  405026:	6892      	ldr	r2, [r2, #8]
  405028:	609a      	str	r2, [r3, #8]
  40502a:	4629      	mov	r1, r5
  40502c:	4640      	mov	r0, r8
  40502e:	f7ff f891 	bl	404154 <_free_r>
  405032:	e01c      	b.n	40506e <_realloc_r+0xde>
  405034:	f027 0707 	bic.w	r7, r7, #7
  405038:	2f00      	cmp	r7, #0
  40503a:	463a      	mov	r2, r7
  40503c:	dabf      	bge.n	404fbe <_realloc_r+0x2e>
  40503e:	2600      	movs	r6, #0
  405040:	230c      	movs	r3, #12
  405042:	4630      	mov	r0, r6
  405044:	f8c8 3000 	str.w	r3, [r8]
  405048:	b003      	add	sp, #12
  40504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40504e:	462e      	mov	r6, r5
  405050:	1be3      	subs	r3, r4, r7
  405052:	2b0f      	cmp	r3, #15
  405054:	d81e      	bhi.n	405094 <_realloc_r+0x104>
  405056:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40505a:	f003 0301 	and.w	r3, r3, #1
  40505e:	4323      	orrs	r3, r4
  405060:	444c      	add	r4, r9
  405062:	f8c9 3004 	str.w	r3, [r9, #4]
  405066:	6863      	ldr	r3, [r4, #4]
  405068:	f043 0301 	orr.w	r3, r3, #1
  40506c:	6063      	str	r3, [r4, #4]
  40506e:	4640      	mov	r0, r8
  405070:	f7ff ff88 	bl	404f84 <__malloc_unlock>
  405074:	4630      	mov	r0, r6
  405076:	b003      	add	sp, #12
  405078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40507c:	f023 0303 	bic.w	r3, r3, #3
  405080:	18e1      	adds	r1, r4, r3
  405082:	4291      	cmp	r1, r2
  405084:	db1f      	blt.n	4050c6 <_realloc_r+0x136>
  405086:	68c3      	ldr	r3, [r0, #12]
  405088:	6882      	ldr	r2, [r0, #8]
  40508a:	462e      	mov	r6, r5
  40508c:	60d3      	str	r3, [r2, #12]
  40508e:	460c      	mov	r4, r1
  405090:	609a      	str	r2, [r3, #8]
  405092:	e7dd      	b.n	405050 <_realloc_r+0xc0>
  405094:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405098:	eb09 0107 	add.w	r1, r9, r7
  40509c:	f002 0201 	and.w	r2, r2, #1
  4050a0:	444c      	add	r4, r9
  4050a2:	f043 0301 	orr.w	r3, r3, #1
  4050a6:	4317      	orrs	r7, r2
  4050a8:	f8c9 7004 	str.w	r7, [r9, #4]
  4050ac:	604b      	str	r3, [r1, #4]
  4050ae:	6863      	ldr	r3, [r4, #4]
  4050b0:	f043 0301 	orr.w	r3, r3, #1
  4050b4:	3108      	adds	r1, #8
  4050b6:	6063      	str	r3, [r4, #4]
  4050b8:	4640      	mov	r0, r8
  4050ba:	f7ff f84b 	bl	404154 <_free_r>
  4050be:	e7d6      	b.n	40506e <_realloc_r+0xde>
  4050c0:	4611      	mov	r1, r2
  4050c2:	f7ff bbab 	b.w	40481c <_malloc_r>
  4050c6:	f01e 0f01 	tst.w	lr, #1
  4050ca:	d18e      	bne.n	404fea <_realloc_r+0x5a>
  4050cc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4050d0:	eba9 0a01 	sub.w	sl, r9, r1
  4050d4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4050d8:	f021 0103 	bic.w	r1, r1, #3
  4050dc:	440b      	add	r3, r1
  4050de:	4423      	add	r3, r4
  4050e0:	4293      	cmp	r3, r2
  4050e2:	db25      	blt.n	405130 <_realloc_r+0x1a0>
  4050e4:	68c2      	ldr	r2, [r0, #12]
  4050e6:	6881      	ldr	r1, [r0, #8]
  4050e8:	4656      	mov	r6, sl
  4050ea:	60ca      	str	r2, [r1, #12]
  4050ec:	6091      	str	r1, [r2, #8]
  4050ee:	f8da 100c 	ldr.w	r1, [sl, #12]
  4050f2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4050f6:	1f22      	subs	r2, r4, #4
  4050f8:	2a24      	cmp	r2, #36	; 0x24
  4050fa:	60c1      	str	r1, [r0, #12]
  4050fc:	6088      	str	r0, [r1, #8]
  4050fe:	f200 8094 	bhi.w	40522a <_realloc_r+0x29a>
  405102:	2a13      	cmp	r2, #19
  405104:	d96f      	bls.n	4051e6 <_realloc_r+0x256>
  405106:	6829      	ldr	r1, [r5, #0]
  405108:	f8ca 1008 	str.w	r1, [sl, #8]
  40510c:	6869      	ldr	r1, [r5, #4]
  40510e:	f8ca 100c 	str.w	r1, [sl, #12]
  405112:	2a1b      	cmp	r2, #27
  405114:	f200 80a2 	bhi.w	40525c <_realloc_r+0x2cc>
  405118:	3508      	adds	r5, #8
  40511a:	f10a 0210 	add.w	r2, sl, #16
  40511e:	e063      	b.n	4051e8 <_realloc_r+0x258>
  405120:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405124:	eba9 0a03 	sub.w	sl, r9, r3
  405128:	f8da 1004 	ldr.w	r1, [sl, #4]
  40512c:	f021 0103 	bic.w	r1, r1, #3
  405130:	1863      	adds	r3, r4, r1
  405132:	4293      	cmp	r3, r2
  405134:	f6ff af59 	blt.w	404fea <_realloc_r+0x5a>
  405138:	4656      	mov	r6, sl
  40513a:	e7d8      	b.n	4050ee <_realloc_r+0x15e>
  40513c:	6841      	ldr	r1, [r0, #4]
  40513e:	f021 0b03 	bic.w	fp, r1, #3
  405142:	44a3      	add	fp, r4
  405144:	f107 0010 	add.w	r0, r7, #16
  405148:	4583      	cmp	fp, r0
  40514a:	da56      	bge.n	4051fa <_realloc_r+0x26a>
  40514c:	f01e 0f01 	tst.w	lr, #1
  405150:	f47f af4b 	bne.w	404fea <_realloc_r+0x5a>
  405154:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405158:	eba9 0a01 	sub.w	sl, r9, r1
  40515c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405160:	f021 0103 	bic.w	r1, r1, #3
  405164:	448b      	add	fp, r1
  405166:	4558      	cmp	r0, fp
  405168:	dce2      	bgt.n	405130 <_realloc_r+0x1a0>
  40516a:	4656      	mov	r6, sl
  40516c:	f8da 100c 	ldr.w	r1, [sl, #12]
  405170:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405174:	1f22      	subs	r2, r4, #4
  405176:	2a24      	cmp	r2, #36	; 0x24
  405178:	60c1      	str	r1, [r0, #12]
  40517a:	6088      	str	r0, [r1, #8]
  40517c:	f200 808f 	bhi.w	40529e <_realloc_r+0x30e>
  405180:	2a13      	cmp	r2, #19
  405182:	f240 808a 	bls.w	40529a <_realloc_r+0x30a>
  405186:	6829      	ldr	r1, [r5, #0]
  405188:	f8ca 1008 	str.w	r1, [sl, #8]
  40518c:	6869      	ldr	r1, [r5, #4]
  40518e:	f8ca 100c 	str.w	r1, [sl, #12]
  405192:	2a1b      	cmp	r2, #27
  405194:	f200 808a 	bhi.w	4052ac <_realloc_r+0x31c>
  405198:	3508      	adds	r5, #8
  40519a:	f10a 0210 	add.w	r2, sl, #16
  40519e:	6829      	ldr	r1, [r5, #0]
  4051a0:	6011      	str	r1, [r2, #0]
  4051a2:	6869      	ldr	r1, [r5, #4]
  4051a4:	6051      	str	r1, [r2, #4]
  4051a6:	68a9      	ldr	r1, [r5, #8]
  4051a8:	6091      	str	r1, [r2, #8]
  4051aa:	eb0a 0107 	add.w	r1, sl, r7
  4051ae:	ebab 0207 	sub.w	r2, fp, r7
  4051b2:	f042 0201 	orr.w	r2, r2, #1
  4051b6:	6099      	str	r1, [r3, #8]
  4051b8:	604a      	str	r2, [r1, #4]
  4051ba:	f8da 3004 	ldr.w	r3, [sl, #4]
  4051be:	f003 0301 	and.w	r3, r3, #1
  4051c2:	431f      	orrs	r7, r3
  4051c4:	4640      	mov	r0, r8
  4051c6:	f8ca 7004 	str.w	r7, [sl, #4]
  4051ca:	f7ff fedb 	bl	404f84 <__malloc_unlock>
  4051ce:	e751      	b.n	405074 <_realloc_r+0xe4>
  4051d0:	682b      	ldr	r3, [r5, #0]
  4051d2:	6003      	str	r3, [r0, #0]
  4051d4:	686b      	ldr	r3, [r5, #4]
  4051d6:	6043      	str	r3, [r0, #4]
  4051d8:	2a1b      	cmp	r2, #27
  4051da:	d82d      	bhi.n	405238 <_realloc_r+0x2a8>
  4051dc:	f100 0308 	add.w	r3, r0, #8
  4051e0:	f105 0208 	add.w	r2, r5, #8
  4051e4:	e71b      	b.n	40501e <_realloc_r+0x8e>
  4051e6:	4632      	mov	r2, r6
  4051e8:	6829      	ldr	r1, [r5, #0]
  4051ea:	6011      	str	r1, [r2, #0]
  4051ec:	6869      	ldr	r1, [r5, #4]
  4051ee:	6051      	str	r1, [r2, #4]
  4051f0:	68a9      	ldr	r1, [r5, #8]
  4051f2:	6091      	str	r1, [r2, #8]
  4051f4:	461c      	mov	r4, r3
  4051f6:	46d1      	mov	r9, sl
  4051f8:	e72a      	b.n	405050 <_realloc_r+0xc0>
  4051fa:	eb09 0107 	add.w	r1, r9, r7
  4051fe:	ebab 0b07 	sub.w	fp, fp, r7
  405202:	f04b 0201 	orr.w	r2, fp, #1
  405206:	6099      	str	r1, [r3, #8]
  405208:	604a      	str	r2, [r1, #4]
  40520a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40520e:	f003 0301 	and.w	r3, r3, #1
  405212:	431f      	orrs	r7, r3
  405214:	4640      	mov	r0, r8
  405216:	f845 7c04 	str.w	r7, [r5, #-4]
  40521a:	f7ff feb3 	bl	404f84 <__malloc_unlock>
  40521e:	462e      	mov	r6, r5
  405220:	e728      	b.n	405074 <_realloc_r+0xe4>
  405222:	4629      	mov	r1, r5
  405224:	f7ff fe44 	bl	404eb0 <memmove>
  405228:	e6ff      	b.n	40502a <_realloc_r+0x9a>
  40522a:	4629      	mov	r1, r5
  40522c:	4630      	mov	r0, r6
  40522e:	461c      	mov	r4, r3
  405230:	46d1      	mov	r9, sl
  405232:	f7ff fe3d 	bl	404eb0 <memmove>
  405236:	e70b      	b.n	405050 <_realloc_r+0xc0>
  405238:	68ab      	ldr	r3, [r5, #8]
  40523a:	6083      	str	r3, [r0, #8]
  40523c:	68eb      	ldr	r3, [r5, #12]
  40523e:	60c3      	str	r3, [r0, #12]
  405240:	2a24      	cmp	r2, #36	; 0x24
  405242:	d017      	beq.n	405274 <_realloc_r+0x2e4>
  405244:	f100 0310 	add.w	r3, r0, #16
  405248:	f105 0210 	add.w	r2, r5, #16
  40524c:	e6e7      	b.n	40501e <_realloc_r+0x8e>
  40524e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405252:	f023 0303 	bic.w	r3, r3, #3
  405256:	441c      	add	r4, r3
  405258:	462e      	mov	r6, r5
  40525a:	e6f9      	b.n	405050 <_realloc_r+0xc0>
  40525c:	68a9      	ldr	r1, [r5, #8]
  40525e:	f8ca 1010 	str.w	r1, [sl, #16]
  405262:	68e9      	ldr	r1, [r5, #12]
  405264:	f8ca 1014 	str.w	r1, [sl, #20]
  405268:	2a24      	cmp	r2, #36	; 0x24
  40526a:	d00c      	beq.n	405286 <_realloc_r+0x2f6>
  40526c:	3510      	adds	r5, #16
  40526e:	f10a 0218 	add.w	r2, sl, #24
  405272:	e7b9      	b.n	4051e8 <_realloc_r+0x258>
  405274:	692b      	ldr	r3, [r5, #16]
  405276:	6103      	str	r3, [r0, #16]
  405278:	696b      	ldr	r3, [r5, #20]
  40527a:	6143      	str	r3, [r0, #20]
  40527c:	f105 0218 	add.w	r2, r5, #24
  405280:	f100 0318 	add.w	r3, r0, #24
  405284:	e6cb      	b.n	40501e <_realloc_r+0x8e>
  405286:	692a      	ldr	r2, [r5, #16]
  405288:	f8ca 2018 	str.w	r2, [sl, #24]
  40528c:	696a      	ldr	r2, [r5, #20]
  40528e:	f8ca 201c 	str.w	r2, [sl, #28]
  405292:	3518      	adds	r5, #24
  405294:	f10a 0220 	add.w	r2, sl, #32
  405298:	e7a6      	b.n	4051e8 <_realloc_r+0x258>
  40529a:	4632      	mov	r2, r6
  40529c:	e77f      	b.n	40519e <_realloc_r+0x20e>
  40529e:	4629      	mov	r1, r5
  4052a0:	4630      	mov	r0, r6
  4052a2:	9301      	str	r3, [sp, #4]
  4052a4:	f7ff fe04 	bl	404eb0 <memmove>
  4052a8:	9b01      	ldr	r3, [sp, #4]
  4052aa:	e77e      	b.n	4051aa <_realloc_r+0x21a>
  4052ac:	68a9      	ldr	r1, [r5, #8]
  4052ae:	f8ca 1010 	str.w	r1, [sl, #16]
  4052b2:	68e9      	ldr	r1, [r5, #12]
  4052b4:	f8ca 1014 	str.w	r1, [sl, #20]
  4052b8:	2a24      	cmp	r2, #36	; 0x24
  4052ba:	d003      	beq.n	4052c4 <_realloc_r+0x334>
  4052bc:	3510      	adds	r5, #16
  4052be:	f10a 0218 	add.w	r2, sl, #24
  4052c2:	e76c      	b.n	40519e <_realloc_r+0x20e>
  4052c4:	692a      	ldr	r2, [r5, #16]
  4052c6:	f8ca 2018 	str.w	r2, [sl, #24]
  4052ca:	696a      	ldr	r2, [r5, #20]
  4052cc:	f8ca 201c 	str.w	r2, [sl, #28]
  4052d0:	3518      	adds	r5, #24
  4052d2:	f10a 0220 	add.w	r2, sl, #32
  4052d6:	e762      	b.n	40519e <_realloc_r+0x20e>
  4052d8:	204005a8 	.word	0x204005a8

004052dc <lflush>:
  4052dc:	8983      	ldrh	r3, [r0, #12]
  4052de:	f003 0309 	and.w	r3, r3, #9
  4052e2:	2b09      	cmp	r3, #9
  4052e4:	d001      	beq.n	4052ea <lflush+0xe>
  4052e6:	2000      	movs	r0, #0
  4052e8:	4770      	bx	lr
  4052ea:	f7fe bceb 	b.w	403cc4 <fflush>
  4052ee:	bf00      	nop

004052f0 <__srefill_r>:
  4052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4052f2:	460c      	mov	r4, r1
  4052f4:	4605      	mov	r5, r0
  4052f6:	b110      	cbz	r0, 4052fe <__srefill_r+0xe>
  4052f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4052fa:	2b00      	cmp	r3, #0
  4052fc:	d045      	beq.n	40538a <__srefill_r+0x9a>
  4052fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405302:	b29a      	uxth	r2, r3
  405304:	0497      	lsls	r7, r2, #18
  405306:	d407      	bmi.n	405318 <__srefill_r+0x28>
  405308:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40530a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40530e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405312:	6662      	str	r2, [r4, #100]	; 0x64
  405314:	81a3      	strh	r3, [r4, #12]
  405316:	b29a      	uxth	r2, r3
  405318:	2100      	movs	r1, #0
  40531a:	0696      	lsls	r6, r2, #26
  40531c:	6061      	str	r1, [r4, #4]
  40531e:	d431      	bmi.n	405384 <__srefill_r+0x94>
  405320:	0750      	lsls	r0, r2, #29
  405322:	d522      	bpl.n	40536a <__srefill_r+0x7a>
  405324:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405326:	b161      	cbz	r1, 405342 <__srefill_r+0x52>
  405328:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40532c:	4299      	cmp	r1, r3
  40532e:	d002      	beq.n	405336 <__srefill_r+0x46>
  405330:	4628      	mov	r0, r5
  405332:	f7fe ff0f 	bl	404154 <_free_r>
  405336:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  405338:	6063      	str	r3, [r4, #4]
  40533a:	2000      	movs	r0, #0
  40533c:	6320      	str	r0, [r4, #48]	; 0x30
  40533e:	2b00      	cmp	r3, #0
  405340:	d13f      	bne.n	4053c2 <__srefill_r+0xd2>
  405342:	6923      	ldr	r3, [r4, #16]
  405344:	2b00      	cmp	r3, #0
  405346:	d04c      	beq.n	4053e2 <__srefill_r+0xf2>
  405348:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  40534c:	b2be      	uxth	r6, r7
  40534e:	07b3      	lsls	r3, r6, #30
  405350:	d11e      	bne.n	405390 <__srefill_r+0xa0>
  405352:	6922      	ldr	r2, [r4, #16]
  405354:	6022      	str	r2, [r4, #0]
  405356:	4628      	mov	r0, r5
  405358:	6963      	ldr	r3, [r4, #20]
  40535a:	6a25      	ldr	r5, [r4, #32]
  40535c:	69e1      	ldr	r1, [r4, #28]
  40535e:	47a8      	blx	r5
  405360:	2800      	cmp	r0, #0
  405362:	6060      	str	r0, [r4, #4]
  405364:	dd09      	ble.n	40537a <__srefill_r+0x8a>
  405366:	2000      	movs	r0, #0
  405368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40536a:	06d1      	lsls	r1, r2, #27
  40536c:	d53e      	bpl.n	4053ec <__srefill_r+0xfc>
  40536e:	0712      	lsls	r2, r2, #28
  405370:	d42a      	bmi.n	4053c8 <__srefill_r+0xd8>
  405372:	f043 0304 	orr.w	r3, r3, #4
  405376:	81a3      	strh	r3, [r4, #12]
  405378:	e7e3      	b.n	405342 <__srefill_r+0x52>
  40537a:	89a3      	ldrh	r3, [r4, #12]
  40537c:	d119      	bne.n	4053b2 <__srefill_r+0xc2>
  40537e:	f043 0320 	orr.w	r3, r3, #32
  405382:	81a3      	strh	r3, [r4, #12]
  405384:	f04f 30ff 	mov.w	r0, #4294967295
  405388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40538a:	f7fe fcdb 	bl	403d44 <__sinit>
  40538e:	e7b6      	b.n	4052fe <__srefill_r+0xe>
  405390:	4b1a      	ldr	r3, [pc, #104]	; (4053fc <__srefill_r+0x10c>)
  405392:	491b      	ldr	r1, [pc, #108]	; (405400 <__srefill_r+0x110>)
  405394:	6818      	ldr	r0, [r3, #0]
  405396:	2301      	movs	r3, #1
  405398:	81a3      	strh	r3, [r4, #12]
  40539a:	f006 0609 	and.w	r6, r6, #9
  40539e:	f7ff f937 	bl	404610 <_fwalk>
  4053a2:	2e09      	cmp	r6, #9
  4053a4:	81a7      	strh	r7, [r4, #12]
  4053a6:	d1d4      	bne.n	405352 <__srefill_r+0x62>
  4053a8:	4621      	mov	r1, r4
  4053aa:	4628      	mov	r0, r5
  4053ac:	f7fe fbc0 	bl	403b30 <__sflush_r>
  4053b0:	e7cf      	b.n	405352 <__srefill_r+0x62>
  4053b2:	2200      	movs	r2, #0
  4053b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053b8:	81a3      	strh	r3, [r4, #12]
  4053ba:	6062      	str	r2, [r4, #4]
  4053bc:	f04f 30ff 	mov.w	r0, #4294967295
  4053c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4053c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4053c4:	6023      	str	r3, [r4, #0]
  4053c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4053c8:	4621      	mov	r1, r4
  4053ca:	4628      	mov	r0, r5
  4053cc:	f7fe fc50 	bl	403c70 <_fflush_r>
  4053d0:	2800      	cmp	r0, #0
  4053d2:	d1d7      	bne.n	405384 <__srefill_r+0x94>
  4053d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053d8:	60a0      	str	r0, [r4, #8]
  4053da:	61a0      	str	r0, [r4, #24]
  4053dc:	f023 0308 	bic.w	r3, r3, #8
  4053e0:	e7c7      	b.n	405372 <__srefill_r+0x82>
  4053e2:	4621      	mov	r1, r4
  4053e4:	4628      	mov	r0, r5
  4053e6:	f7ff f9c7 	bl	404778 <__smakebuf_r>
  4053ea:	e7ad      	b.n	405348 <__srefill_r+0x58>
  4053ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053f0:	2209      	movs	r2, #9
  4053f2:	602a      	str	r2, [r5, #0]
  4053f4:	f04f 30ff 	mov.w	r0, #4294967295
  4053f8:	81a3      	strh	r3, [r4, #12]
  4053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4053fc:	004068c4 	.word	0x004068c4
  405400:	004052dd 	.word	0x004052dd

00405404 <_sbrk_r>:
  405404:	b538      	push	{r3, r4, r5, lr}
  405406:	4c07      	ldr	r4, [pc, #28]	; (405424 <_sbrk_r+0x20>)
  405408:	2300      	movs	r3, #0
  40540a:	4605      	mov	r5, r0
  40540c:	4608      	mov	r0, r1
  40540e:	6023      	str	r3, [r4, #0]
  405410:	f7fb ff16 	bl	401240 <_sbrk>
  405414:	1c43      	adds	r3, r0, #1
  405416:	d000      	beq.n	40541a <_sbrk_r+0x16>
  405418:	bd38      	pop	{r3, r4, r5, pc}
  40541a:	6823      	ldr	r3, [r4, #0]
  40541c:	2b00      	cmp	r3, #0
  40541e:	d0fb      	beq.n	405418 <_sbrk_r+0x14>
  405420:	602b      	str	r3, [r5, #0]
  405422:	bd38      	pop	{r3, r4, r5, pc}
  405424:	20401690 	.word	0x20401690

00405428 <__sccl>:
  405428:	b470      	push	{r4, r5, r6}
  40542a:	780c      	ldrb	r4, [r1, #0]
  40542c:	2c5e      	cmp	r4, #94	; 0x5e
  40542e:	d02f      	beq.n	405490 <__sccl+0x68>
  405430:	2200      	movs	r2, #0
  405432:	1c4d      	adds	r5, r1, #1
  405434:	4616      	mov	r6, r2
  405436:	1e43      	subs	r3, r0, #1
  405438:	f100 01ff 	add.w	r1, r0, #255	; 0xff
  40543c:	f803 2f01 	strb.w	r2, [r3, #1]!
  405440:	428b      	cmp	r3, r1
  405442:	d1fb      	bne.n	40543c <__sccl+0x14>
  405444:	b174      	cbz	r4, 405464 <__sccl+0x3c>
  405446:	f086 0201 	eor.w	r2, r6, #1
  40544a:	5502      	strb	r2, [r0, r4]
  40544c:	1c6e      	adds	r6, r5, #1
  40544e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  405452:	2b2d      	cmp	r3, #45	; 0x2d
  405454:	4631      	mov	r1, r6
  405456:	d00d      	beq.n	405474 <__sccl+0x4c>
  405458:	2b5d      	cmp	r3, #93	; 0x5d
  40545a:	d004      	beq.n	405466 <__sccl+0x3e>
  40545c:	b133      	cbz	r3, 40546c <__sccl+0x44>
  40545e:	461c      	mov	r4, r3
  405460:	4635      	mov	r5, r6
  405462:	e7f2      	b.n	40544a <__sccl+0x22>
  405464:	1e69      	subs	r1, r5, #1
  405466:	4608      	mov	r0, r1
  405468:	bc70      	pop	{r4, r5, r6}
  40546a:	4770      	bx	lr
  40546c:	4629      	mov	r1, r5
  40546e:	4608      	mov	r0, r1
  405470:	bc70      	pop	{r4, r5, r6}
  405472:	4770      	bx	lr
  405474:	7869      	ldrb	r1, [r5, #1]
  405476:	295d      	cmp	r1, #93	; 0x5d
  405478:	d0f1      	beq.n	40545e <__sccl+0x36>
  40547a:	428c      	cmp	r4, r1
  40547c:	dcef      	bgt.n	40545e <__sccl+0x36>
  40547e:	3502      	adds	r5, #2
  405480:	1903      	adds	r3, r0, r4
  405482:	3401      	adds	r4, #1
  405484:	42a1      	cmp	r1, r4
  405486:	f803 2f01 	strb.w	r2, [r3, #1]!
  40548a:	dcfa      	bgt.n	405482 <__sccl+0x5a>
  40548c:	3602      	adds	r6, #2
  40548e:	e7de      	b.n	40544e <__sccl+0x26>
  405490:	2201      	movs	r2, #1
  405492:	784c      	ldrb	r4, [r1, #1]
  405494:	4616      	mov	r6, r2
  405496:	1c8d      	adds	r5, r1, #2
  405498:	e7cd      	b.n	405436 <__sccl+0xe>
  40549a:	bf00      	nop

0040549c <__sread>:
  40549c:	b510      	push	{r4, lr}
  40549e:	460c      	mov	r4, r1
  4054a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4054a4:	f000 fe76 	bl	406194 <_read_r>
  4054a8:	2800      	cmp	r0, #0
  4054aa:	db03      	blt.n	4054b4 <__sread+0x18>
  4054ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4054ae:	4403      	add	r3, r0
  4054b0:	6523      	str	r3, [r4, #80]	; 0x50
  4054b2:	bd10      	pop	{r4, pc}
  4054b4:	89a3      	ldrh	r3, [r4, #12]
  4054b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4054ba:	81a3      	strh	r3, [r4, #12]
  4054bc:	bd10      	pop	{r4, pc}
  4054be:	bf00      	nop

004054c0 <__swrite>:
  4054c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054c4:	4616      	mov	r6, r2
  4054c6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4054ca:	461f      	mov	r7, r3
  4054cc:	05d3      	lsls	r3, r2, #23
  4054ce:	460c      	mov	r4, r1
  4054d0:	4605      	mov	r5, r0
  4054d2:	d507      	bpl.n	4054e4 <__swrite+0x24>
  4054d4:	2200      	movs	r2, #0
  4054d6:	2302      	movs	r3, #2
  4054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4054dc:	f000 fe44 	bl	406168 <_lseek_r>
  4054e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4054e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4054e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4054ec:	81a2      	strh	r2, [r4, #12]
  4054ee:	463b      	mov	r3, r7
  4054f0:	4632      	mov	r2, r6
  4054f2:	4628      	mov	r0, r5
  4054f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4054f8:	f000 bd24 	b.w	405f44 <_write_r>

004054fc <__sseek>:
  4054fc:	b510      	push	{r4, lr}
  4054fe:	460c      	mov	r4, r1
  405500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405504:	f000 fe30 	bl	406168 <_lseek_r>
  405508:	89a3      	ldrh	r3, [r4, #12]
  40550a:	1c42      	adds	r2, r0, #1
  40550c:	bf0e      	itee	eq
  40550e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405516:	6520      	strne	r0, [r4, #80]	; 0x50
  405518:	81a3      	strh	r3, [r4, #12]
  40551a:	bd10      	pop	{r4, pc}

0040551c <__sclose>:
  40551c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405520:	f000 bd88 	b.w	406034 <_close_r>
	...

00405540 <strlen>:
  405540:	f890 f000 	pld	[r0]
  405544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405548:	f020 0107 	bic.w	r1, r0, #7
  40554c:	f06f 0c00 	mvn.w	ip, #0
  405550:	f010 0407 	ands.w	r4, r0, #7
  405554:	f891 f020 	pld	[r1, #32]
  405558:	f040 8049 	bne.w	4055ee <strlen+0xae>
  40555c:	f04f 0400 	mov.w	r4, #0
  405560:	f06f 0007 	mvn.w	r0, #7
  405564:	e9d1 2300 	ldrd	r2, r3, [r1]
  405568:	f891 f040 	pld	[r1, #64]	; 0x40
  40556c:	f100 0008 	add.w	r0, r0, #8
  405570:	fa82 f24c 	uadd8	r2, r2, ip
  405574:	faa4 f28c 	sel	r2, r4, ip
  405578:	fa83 f34c 	uadd8	r3, r3, ip
  40557c:	faa2 f38c 	sel	r3, r2, ip
  405580:	bb4b      	cbnz	r3, 4055d6 <strlen+0x96>
  405582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405586:	fa82 f24c 	uadd8	r2, r2, ip
  40558a:	f100 0008 	add.w	r0, r0, #8
  40558e:	faa4 f28c 	sel	r2, r4, ip
  405592:	fa83 f34c 	uadd8	r3, r3, ip
  405596:	faa2 f38c 	sel	r3, r2, ip
  40559a:	b9e3      	cbnz	r3, 4055d6 <strlen+0x96>
  40559c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4055a0:	fa82 f24c 	uadd8	r2, r2, ip
  4055a4:	f100 0008 	add.w	r0, r0, #8
  4055a8:	faa4 f28c 	sel	r2, r4, ip
  4055ac:	fa83 f34c 	uadd8	r3, r3, ip
  4055b0:	faa2 f38c 	sel	r3, r2, ip
  4055b4:	b97b      	cbnz	r3, 4055d6 <strlen+0x96>
  4055b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4055ba:	f101 0120 	add.w	r1, r1, #32
  4055be:	fa82 f24c 	uadd8	r2, r2, ip
  4055c2:	f100 0008 	add.w	r0, r0, #8
  4055c6:	faa4 f28c 	sel	r2, r4, ip
  4055ca:	fa83 f34c 	uadd8	r3, r3, ip
  4055ce:	faa2 f38c 	sel	r3, r2, ip
  4055d2:	2b00      	cmp	r3, #0
  4055d4:	d0c6      	beq.n	405564 <strlen+0x24>
  4055d6:	2a00      	cmp	r2, #0
  4055d8:	bf04      	itt	eq
  4055da:	3004      	addeq	r0, #4
  4055dc:	461a      	moveq	r2, r3
  4055de:	ba12      	rev	r2, r2
  4055e0:	fab2 f282 	clz	r2, r2
  4055e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4055e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4055ec:	4770      	bx	lr
  4055ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4055f2:	f004 0503 	and.w	r5, r4, #3
  4055f6:	f1c4 0000 	rsb	r0, r4, #0
  4055fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4055fe:	f014 0f04 	tst.w	r4, #4
  405602:	f891 f040 	pld	[r1, #64]	; 0x40
  405606:	fa0c f505 	lsl.w	r5, ip, r5
  40560a:	ea62 0205 	orn	r2, r2, r5
  40560e:	bf1c      	itt	ne
  405610:	ea63 0305 	ornne	r3, r3, r5
  405614:	4662      	movne	r2, ip
  405616:	f04f 0400 	mov.w	r4, #0
  40561a:	e7a9      	b.n	405570 <strlen+0x30>

0040561c <_strtol_l.isra.0>:
  40561c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405620:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405624:	460f      	mov	r7, r1
  405626:	4680      	mov	r8, r0
  405628:	4616      	mov	r6, r2
  40562a:	461d      	mov	r5, r3
  40562c:	468a      	mov	sl, r1
  40562e:	e000      	b.n	405632 <_strtol_l.isra.0+0x16>
  405630:	46a2      	mov	sl, r4
  405632:	4654      	mov	r4, sl
  405634:	4648      	mov	r0, r9
  405636:	f814 bb01 	ldrb.w	fp, [r4], #1
  40563a:	f7ff f855 	bl	4046e8 <__locale_ctype_ptr_l>
  40563e:	4458      	add	r0, fp
  405640:	7842      	ldrb	r2, [r0, #1]
  405642:	f012 0208 	ands.w	r2, r2, #8
  405646:	d1f3      	bne.n	405630 <_strtol_l.isra.0+0x14>
  405648:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  40564c:	d04f      	beq.n	4056ee <_strtol_l.isra.0+0xd2>
  40564e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  405652:	bf04      	itt	eq
  405654:	f894 b000 	ldrbeq.w	fp, [r4]
  405658:	f10a 0402 	addeq.w	r4, sl, #2
  40565c:	b11d      	cbz	r5, 405666 <_strtol_l.isra.0+0x4a>
  40565e:	2d10      	cmp	r5, #16
  405660:	d056      	beq.n	405710 <_strtol_l.isra.0+0xf4>
  405662:	46ac      	mov	ip, r5
  405664:	e004      	b.n	405670 <_strtol_l.isra.0+0x54>
  405666:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  40566a:	d060      	beq.n	40572e <_strtol_l.isra.0+0x112>
  40566c:	250a      	movs	r5, #10
  40566e:	46ac      	mov	ip, r5
  405670:	2a00      	cmp	r2, #0
  405672:	bf0c      	ite	eq
  405674:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  405678:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  40567c:	2100      	movs	r1, #0
  40567e:	fbb9 fefc 	udiv	lr, r9, ip
  405682:	4608      	mov	r0, r1
  405684:	fb0c 9a1e 	mls	sl, ip, lr, r9
  405688:	e005      	b.n	405696 <_strtol_l.isra.0+0x7a>
  40568a:	d029      	beq.n	4056e0 <_strtol_l.isra.0+0xc4>
  40568c:	fb0c 3000 	mla	r0, ip, r0, r3
  405690:	2101      	movs	r1, #1
  405692:	f814 bb01 	ldrb.w	fp, [r4], #1
  405696:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  40569a:	2b09      	cmp	r3, #9
  40569c:	d905      	bls.n	4056aa <_strtol_l.isra.0+0x8e>
  40569e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  4056a2:	2b19      	cmp	r3, #25
  4056a4:	d80b      	bhi.n	4056be <_strtol_l.isra.0+0xa2>
  4056a6:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  4056aa:	429d      	cmp	r5, r3
  4056ac:	dd0f      	ble.n	4056ce <_strtol_l.isra.0+0xb2>
  4056ae:	f1b1 3fff 	cmp.w	r1, #4294967295
  4056b2:	d0ee      	beq.n	405692 <_strtol_l.isra.0+0x76>
  4056b4:	4586      	cmp	lr, r0
  4056b6:	d2e8      	bcs.n	40568a <_strtol_l.isra.0+0x6e>
  4056b8:	f04f 31ff 	mov.w	r1, #4294967295
  4056bc:	e7e9      	b.n	405692 <_strtol_l.isra.0+0x76>
  4056be:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  4056c2:	2b19      	cmp	r3, #25
  4056c4:	d803      	bhi.n	4056ce <_strtol_l.isra.0+0xb2>
  4056c6:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  4056ca:	429d      	cmp	r5, r3
  4056cc:	dcef      	bgt.n	4056ae <_strtol_l.isra.0+0x92>
  4056ce:	1c4b      	adds	r3, r1, #1
  4056d0:	d013      	beq.n	4056fa <_strtol_l.isra.0+0xde>
  4056d2:	b102      	cbz	r2, 4056d6 <_strtol_l.isra.0+0xba>
  4056d4:	4240      	negs	r0, r0
  4056d6:	b146      	cbz	r6, 4056ea <_strtol_l.isra.0+0xce>
  4056d8:	b9c1      	cbnz	r1, 40570c <_strtol_l.isra.0+0xf0>
  4056da:	6037      	str	r7, [r6, #0]
  4056dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056e0:	459a      	cmp	sl, r3
  4056e2:	dad3      	bge.n	40568c <_strtol_l.isra.0+0x70>
  4056e4:	f04f 31ff 	mov.w	r1, #4294967295
  4056e8:	e7d3      	b.n	405692 <_strtol_l.isra.0+0x76>
  4056ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056ee:	f894 b000 	ldrb.w	fp, [r4]
  4056f2:	2201      	movs	r2, #1
  4056f4:	f10a 0402 	add.w	r4, sl, #2
  4056f8:	e7b0      	b.n	40565c <_strtol_l.isra.0+0x40>
  4056fa:	2322      	movs	r3, #34	; 0x22
  4056fc:	f8c8 3000 	str.w	r3, [r8]
  405700:	b1ee      	cbz	r6, 40573e <_strtol_l.isra.0+0x122>
  405702:	1e67      	subs	r7, r4, #1
  405704:	4648      	mov	r0, r9
  405706:	6037      	str	r7, [r6, #0]
  405708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40570c:	4681      	mov	r9, r0
  40570e:	e7f8      	b.n	405702 <_strtol_l.isra.0+0xe6>
  405710:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  405714:	d1a5      	bne.n	405662 <_strtol_l.isra.0+0x46>
  405716:	7823      	ldrb	r3, [r4, #0]
  405718:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40571c:	2b58      	cmp	r3, #88	; 0x58
  40571e:	d1a0      	bne.n	405662 <_strtol_l.isra.0+0x46>
  405720:	f04f 0c10 	mov.w	ip, #16
  405724:	f894 b001 	ldrb.w	fp, [r4, #1]
  405728:	4665      	mov	r5, ip
  40572a:	3402      	adds	r4, #2
  40572c:	e7a0      	b.n	405670 <_strtol_l.isra.0+0x54>
  40572e:	7823      	ldrb	r3, [r4, #0]
  405730:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405734:	2b58      	cmp	r3, #88	; 0x58
  405736:	d0f3      	beq.n	405720 <_strtol_l.isra.0+0x104>
  405738:	2508      	movs	r5, #8
  40573a:	46ac      	mov	ip, r5
  40573c:	e798      	b.n	405670 <_strtol_l.isra.0+0x54>
  40573e:	4648      	mov	r0, r9
  405740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405744 <_strtol_r>:
  405744:	b530      	push	{r4, r5, lr}
  405746:	4c06      	ldr	r4, [pc, #24]	; (405760 <_strtol_r+0x1c>)
  405748:	4d06      	ldr	r5, [pc, #24]	; (405764 <_strtol_r+0x20>)
  40574a:	6824      	ldr	r4, [r4, #0]
  40574c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40574e:	b083      	sub	sp, #12
  405750:	2c00      	cmp	r4, #0
  405752:	bf08      	it	eq
  405754:	462c      	moveq	r4, r5
  405756:	9400      	str	r4, [sp, #0]
  405758:	f7ff ff60 	bl	40561c <_strtol_l.isra.0>
  40575c:	b003      	add	sp, #12
  40575e:	bd30      	pop	{r4, r5, pc}
  405760:	20400008 	.word	0x20400008
  405764:	2040043c 	.word	0x2040043c

00405768 <_strtoll_l.isra.0>:
  405768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40576c:	b085      	sub	sp, #20
  40576e:	461e      	mov	r6, r3
  405770:	9102      	str	r1, [sp, #8]
  405772:	9003      	str	r0, [sp, #12]
  405774:	9200      	str	r2, [sp, #0]
  405776:	4688      	mov	r8, r1
  405778:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40577a:	e000      	b.n	40577e <_strtoll_l.isra.0+0x16>
  40577c:	46a8      	mov	r8, r5
  40577e:	4645      	mov	r5, r8
  405780:	4638      	mov	r0, r7
  405782:	f815 4b01 	ldrb.w	r4, [r5], #1
  405786:	f7fe ffaf 	bl	4046e8 <__locale_ctype_ptr_l>
  40578a:	4420      	add	r0, r4
  40578c:	7843      	ldrb	r3, [r0, #1]
  40578e:	f013 0308 	ands.w	r3, r3, #8
  405792:	d1f3      	bne.n	40577c <_strtoll_l.isra.0+0x14>
  405794:	2c2d      	cmp	r4, #45	; 0x2d
  405796:	f000 8081 	beq.w	40589c <_strtoll_l.isra.0+0x134>
  40579a:	2c2b      	cmp	r4, #43	; 0x2b
  40579c:	bf03      	ittte	eq
  40579e:	782c      	ldrbeq	r4, [r5, #0]
  4057a0:	9301      	streq	r3, [sp, #4]
  4057a2:	f108 0502 	addeq.w	r5, r8, #2
  4057a6:	9301      	strne	r3, [sp, #4]
  4057a8:	b166      	cbz	r6, 4057c4 <_strtoll_l.isra.0+0x5c>
  4057aa:	2e10      	cmp	r6, #16
  4057ac:	f000 8088 	beq.w	4058c0 <_strtoll_l.isra.0+0x158>
  4057b0:	9b01      	ldr	r3, [sp, #4]
  4057b2:	46b0      	mov	r8, r6
  4057b4:	ea4f 79e6 	mov.w	r9, r6, asr #31
  4057b8:	b97b      	cbnz	r3, 4057da <_strtoll_l.isra.0+0x72>
  4057ba:	f04f 3aff 	mov.w	sl, #4294967295
  4057be:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  4057c2:	e00e      	b.n	4057e2 <_strtoll_l.isra.0+0x7a>
  4057c4:	2c30      	cmp	r4, #48	; 0x30
  4057c6:	f000 808a 	beq.w	4058de <_strtoll_l.isra.0+0x176>
  4057ca:	f04f 080a 	mov.w	r8, #10
  4057ce:	f04f 0900 	mov.w	r9, #0
  4057d2:	260a      	movs	r6, #10
  4057d4:	9b01      	ldr	r3, [sp, #4]
  4057d6:	2b00      	cmp	r3, #0
  4057d8:	d0ef      	beq.n	4057ba <_strtoll_l.isra.0+0x52>
  4057da:	f04f 0a00 	mov.w	sl, #0
  4057de:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  4057e2:	4642      	mov	r2, r8
  4057e4:	464b      	mov	r3, r9
  4057e6:	4650      	mov	r0, sl
  4057e8:	4639      	mov	r1, r7
  4057ea:	f000 fce9 	bl	4061c0 <__aeabi_uldivmod>
  4057ee:	464b      	mov	r3, r9
  4057f0:	4693      	mov	fp, r2
  4057f2:	4650      	mov	r0, sl
  4057f4:	4642      	mov	r2, r8
  4057f6:	4639      	mov	r1, r7
  4057f8:	f000 fce2 	bl	4061c0 <__aeabi_uldivmod>
  4057fc:	f04f 0e00 	mov.w	lr, #0
  405800:	2200      	movs	r2, #0
  405802:	2300      	movs	r3, #0
  405804:	e00f      	b.n	405826 <_strtoll_l.isra.0+0xbe>
  405806:	d044      	beq.n	405892 <_strtoll_l.isra.0+0x12a>
  405808:	fb02 f409 	mul.w	r4, r2, r9
  40580c:	fb08 4403 	mla	r4, r8, r3, r4
  405810:	fba2 2308 	umull	r2, r3, r2, r8
  405814:	4423      	add	r3, r4
  405816:	eb12 020c 	adds.w	r2, r2, ip
  40581a:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
  40581e:	f04f 0e01 	mov.w	lr, #1
  405822:	f815 4b01 	ldrb.w	r4, [r5], #1
  405826:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  40582a:	f1bc 0f09 	cmp.w	ip, #9
  40582e:	d906      	bls.n	40583e <_strtoll_l.isra.0+0xd6>
  405830:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
  405834:	f1bc 0f19 	cmp.w	ip, #25
  405838:	d80d      	bhi.n	405856 <_strtoll_l.isra.0+0xee>
  40583a:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
  40583e:	4566      	cmp	r6, ip
  405840:	dd12      	ble.n	405868 <_strtoll_l.isra.0+0x100>
  405842:	f1be 3fff 	cmp.w	lr, #4294967295
  405846:	d0ec      	beq.n	405822 <_strtoll_l.isra.0+0xba>
  405848:	4299      	cmp	r1, r3
  40584a:	bf08      	it	eq
  40584c:	4290      	cmpeq	r0, r2
  40584e:	d2da      	bcs.n	405806 <_strtoll_l.isra.0+0x9e>
  405850:	f04f 3eff 	mov.w	lr, #4294967295
  405854:	e7e5      	b.n	405822 <_strtoll_l.isra.0+0xba>
  405856:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
  40585a:	f1bc 0f19 	cmp.w	ip, #25
  40585e:	d803      	bhi.n	405868 <_strtoll_l.isra.0+0x100>
  405860:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
  405864:	4566      	cmp	r6, ip
  405866:	dcec      	bgt.n	405842 <_strtoll_l.isra.0+0xda>
  405868:	f1be 3fff 	cmp.w	lr, #4294967295
  40586c:	d01c      	beq.n	4058a8 <_strtoll_l.isra.0+0x140>
  40586e:	9901      	ldr	r1, [sp, #4]
  405870:	b111      	cbz	r1, 405878 <_strtoll_l.isra.0+0x110>
  405872:	4252      	negs	r2, r2
  405874:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405878:	9900      	ldr	r1, [sp, #0]
  40587a:	b129      	cbz	r1, 405888 <_strtoll_l.isra.0+0x120>
  40587c:	f1be 0f00 	cmp.w	lr, #0
  405880:	d11b      	bne.n	4058ba <_strtoll_l.isra.0+0x152>
  405882:	9d02      	ldr	r5, [sp, #8]
  405884:	9900      	ldr	r1, [sp, #0]
  405886:	600d      	str	r5, [r1, #0]
  405888:	4610      	mov	r0, r2
  40588a:	4619      	mov	r1, r3
  40588c:	b005      	add	sp, #20
  40588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405892:	45e3      	cmp	fp, ip
  405894:	dab8      	bge.n	405808 <_strtoll_l.isra.0+0xa0>
  405896:	f04f 3eff 	mov.w	lr, #4294967295
  40589a:	e7c2      	b.n	405822 <_strtoll_l.isra.0+0xba>
  40589c:	2301      	movs	r3, #1
  40589e:	782c      	ldrb	r4, [r5, #0]
  4058a0:	9301      	str	r3, [sp, #4]
  4058a2:	f108 0502 	add.w	r5, r8, #2
  4058a6:	e77f      	b.n	4057a8 <_strtoll_l.isra.0+0x40>
  4058a8:	9a03      	ldr	r2, [sp, #12]
  4058aa:	2322      	movs	r3, #34	; 0x22
  4058ac:	6013      	str	r3, [r2, #0]
  4058ae:	9b00      	ldr	r3, [sp, #0]
  4058b0:	b32b      	cbz	r3, 4058fe <_strtoll_l.isra.0+0x196>
  4058b2:	4652      	mov	r2, sl
  4058b4:	463b      	mov	r3, r7
  4058b6:	3d01      	subs	r5, #1
  4058b8:	e7e4      	b.n	405884 <_strtoll_l.isra.0+0x11c>
  4058ba:	4692      	mov	sl, r2
  4058bc:	461f      	mov	r7, r3
  4058be:	e7f8      	b.n	4058b2 <_strtoll_l.isra.0+0x14a>
  4058c0:	2c30      	cmp	r4, #48	; 0x30
  4058c2:	d117      	bne.n	4058f4 <_strtoll_l.isra.0+0x18c>
  4058c4:	782b      	ldrb	r3, [r5, #0]
  4058c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4058ca:	2b58      	cmp	r3, #88	; 0x58
  4058cc:	d112      	bne.n	4058f4 <_strtoll_l.isra.0+0x18c>
  4058ce:	786c      	ldrb	r4, [r5, #1]
  4058d0:	f04f 0810 	mov.w	r8, #16
  4058d4:	f04f 0900 	mov.w	r9, #0
  4058d8:	3502      	adds	r5, #2
  4058da:	2610      	movs	r6, #16
  4058dc:	e77a      	b.n	4057d4 <_strtoll_l.isra.0+0x6c>
  4058de:	782b      	ldrb	r3, [r5, #0]
  4058e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4058e4:	2b58      	cmp	r3, #88	; 0x58
  4058e6:	d0f2      	beq.n	4058ce <_strtoll_l.isra.0+0x166>
  4058e8:	f04f 0808 	mov.w	r8, #8
  4058ec:	f04f 0900 	mov.w	r9, #0
  4058f0:	2608      	movs	r6, #8
  4058f2:	e76f      	b.n	4057d4 <_strtoll_l.isra.0+0x6c>
  4058f4:	f04f 0810 	mov.w	r8, #16
  4058f8:	f04f 0900 	mov.w	r9, #0
  4058fc:	e76a      	b.n	4057d4 <_strtoll_l.isra.0+0x6c>
  4058fe:	4652      	mov	r2, sl
  405900:	463b      	mov	r3, r7
  405902:	e7c1      	b.n	405888 <_strtoll_l.isra.0+0x120>

00405904 <_strtoll_r>:
  405904:	b530      	push	{r4, r5, lr}
  405906:	4c06      	ldr	r4, [pc, #24]	; (405920 <_strtoll_r+0x1c>)
  405908:	4d06      	ldr	r5, [pc, #24]	; (405924 <_strtoll_r+0x20>)
  40590a:	6824      	ldr	r4, [r4, #0]
  40590c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40590e:	b083      	sub	sp, #12
  405910:	2c00      	cmp	r4, #0
  405912:	bf08      	it	eq
  405914:	462c      	moveq	r4, r5
  405916:	9400      	str	r4, [sp, #0]
  405918:	f7ff ff26 	bl	405768 <_strtoll_l.isra.0>
  40591c:	b003      	add	sp, #12
  40591e:	bd30      	pop	{r4, r5, pc}
  405920:	20400008 	.word	0x20400008
  405924:	2040043c 	.word	0x2040043c

00405928 <_strtoul_l.isra.0>:
  405928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40592c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405930:	460e      	mov	r6, r1
  405932:	4607      	mov	r7, r0
  405934:	4615      	mov	r5, r2
  405936:	4698      	mov	r8, r3
  405938:	468a      	mov	sl, r1
  40593a:	e000      	b.n	40593e <_strtoul_l.isra.0+0x16>
  40593c:	46a2      	mov	sl, r4
  40593e:	4654      	mov	r4, sl
  405940:	4648      	mov	r0, r9
  405942:	f814 bb01 	ldrb.w	fp, [r4], #1
  405946:	f7fe fecf 	bl	4046e8 <__locale_ctype_ptr_l>
  40594a:	4458      	add	r0, fp
  40594c:	7840      	ldrb	r0, [r0, #1]
  40594e:	f010 0008 	ands.w	r0, r0, #8
  405952:	d1f3      	bne.n	40593c <_strtoul_l.isra.0+0x14>
  405954:	4659      	mov	r1, fp
  405956:	292d      	cmp	r1, #45	; 0x2d
  405958:	d059      	beq.n	405a0e <_strtoul_l.isra.0+0xe6>
  40595a:	292b      	cmp	r1, #43	; 0x2b
  40595c:	bf04      	itt	eq
  40595e:	7821      	ldrbeq	r1, [r4, #0]
  405960:	f10a 0402 	addeq.w	r4, sl, #2
  405964:	f1b8 0f00 	cmp.w	r8, #0
  405968:	d00c      	beq.n	405984 <_strtoul_l.isra.0+0x5c>
  40596a:	f1b8 0f10 	cmp.w	r8, #16
  40596e:	d053      	beq.n	405a18 <_strtoul_l.isra.0+0xf0>
  405970:	f04f 3cff 	mov.w	ip, #4294967295
  405974:	fbbc fcf8 	udiv	ip, ip, r8
  405978:	fb08 fa0c 	mul.w	sl, r8, ip
  40597c:	ea6f 0a0a 	mvn.w	sl, sl
  405980:	46c1      	mov	r9, r8
  405982:	e008      	b.n	405996 <_strtoul_l.isra.0+0x6e>
  405984:	2930      	cmp	r1, #48	; 0x30
  405986:	d058      	beq.n	405a3a <_strtoul_l.isra.0+0x112>
  405988:	f04f 080a 	mov.w	r8, #10
  40598c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 405a6c <_strtoul_l.isra.0+0x144>
  405990:	46c1      	mov	r9, r8
  405992:	f04f 0a05 	mov.w	sl, #5
  405996:	2300      	movs	r3, #0
  405998:	469e      	mov	lr, r3
  40599a:	e005      	b.n	4059a8 <_strtoul_l.isra.0+0x80>
  40599c:	d02a      	beq.n	4059f4 <_strtoul_l.isra.0+0xcc>
  40599e:	fb09 2e0e 	mla	lr, r9, lr, r2
  4059a2:	2301      	movs	r3, #1
  4059a4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4059a8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
  4059ac:	2a09      	cmp	r2, #9
  4059ae:	d905      	bls.n	4059bc <_strtoul_l.isra.0+0x94>
  4059b0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
  4059b4:	2a19      	cmp	r2, #25
  4059b6:	d80a      	bhi.n	4059ce <_strtoul_l.isra.0+0xa6>
  4059b8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
  4059bc:	4590      	cmp	r8, r2
  4059be:	dd0e      	ble.n	4059de <_strtoul_l.isra.0+0xb6>
  4059c0:	2b00      	cmp	r3, #0
  4059c2:	db01      	blt.n	4059c8 <_strtoul_l.isra.0+0xa0>
  4059c4:	45e6      	cmp	lr, ip
  4059c6:	d9e9      	bls.n	40599c <_strtoul_l.isra.0+0x74>
  4059c8:	f04f 33ff 	mov.w	r3, #4294967295
  4059cc:	e7ea      	b.n	4059a4 <_strtoul_l.isra.0+0x7c>
  4059ce:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
  4059d2:	2a19      	cmp	r2, #25
  4059d4:	d803      	bhi.n	4059de <_strtoul_l.isra.0+0xb6>
  4059d6:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
  4059da:	4590      	cmp	r8, r2
  4059dc:	dcf0      	bgt.n	4059c0 <_strtoul_l.isra.0+0x98>
  4059de:	2b00      	cmp	r3, #0
  4059e0:	db0d      	blt.n	4059fe <_strtoul_l.isra.0+0xd6>
  4059e2:	b108      	cbz	r0, 4059e8 <_strtoul_l.isra.0+0xc0>
  4059e4:	f1ce 0e00 	rsb	lr, lr, #0
  4059e8:	b10d      	cbz	r5, 4059ee <_strtoul_l.isra.0+0xc6>
  4059ea:	b973      	cbnz	r3, 405a0a <_strtoul_l.isra.0+0xe2>
  4059ec:	602e      	str	r6, [r5, #0]
  4059ee:	4670      	mov	r0, lr
  4059f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059f4:	4552      	cmp	r2, sl
  4059f6:	ddd2      	ble.n	40599e <_strtoul_l.isra.0+0x76>
  4059f8:	f04f 33ff 	mov.w	r3, #4294967295
  4059fc:	e7d2      	b.n	4059a4 <_strtoul_l.isra.0+0x7c>
  4059fe:	2322      	movs	r3, #34	; 0x22
  405a00:	603b      	str	r3, [r7, #0]
  405a02:	f04f 3eff 	mov.w	lr, #4294967295
  405a06:	2d00      	cmp	r5, #0
  405a08:	d0f1      	beq.n	4059ee <_strtoul_l.isra.0+0xc6>
  405a0a:	1e66      	subs	r6, r4, #1
  405a0c:	e7ee      	b.n	4059ec <_strtoul_l.isra.0+0xc4>
  405a0e:	7821      	ldrb	r1, [r4, #0]
  405a10:	2001      	movs	r0, #1
  405a12:	f10a 0402 	add.w	r4, sl, #2
  405a16:	e7a5      	b.n	405964 <_strtoul_l.isra.0+0x3c>
  405a18:	2930      	cmp	r1, #48	; 0x30
  405a1a:	d11b      	bne.n	405a54 <_strtoul_l.isra.0+0x12c>
  405a1c:	7823      	ldrb	r3, [r4, #0]
  405a1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405a22:	2b58      	cmp	r3, #88	; 0x58
  405a24:	d11c      	bne.n	405a60 <_strtoul_l.isra.0+0x138>
  405a26:	f04f 0910 	mov.w	r9, #16
  405a2a:	7861      	ldrb	r1, [r4, #1]
  405a2c:	46c8      	mov	r8, r9
  405a2e:	f04f 0a0f 	mov.w	sl, #15
  405a32:	3402      	adds	r4, #2
  405a34:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  405a38:	e7ad      	b.n	405996 <_strtoul_l.isra.0+0x6e>
  405a3a:	7823      	ldrb	r3, [r4, #0]
  405a3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405a40:	2b58      	cmp	r3, #88	; 0x58
  405a42:	d0f0      	beq.n	405a26 <_strtoul_l.isra.0+0xfe>
  405a44:	f04f 0808 	mov.w	r8, #8
  405a48:	46c1      	mov	r9, r8
  405a4a:	f04f 0a07 	mov.w	sl, #7
  405a4e:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
  405a52:	e7a0      	b.n	405996 <_strtoul_l.isra.0+0x6e>
  405a54:	f04f 0a0f 	mov.w	sl, #15
  405a58:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  405a5c:	46c1      	mov	r9, r8
  405a5e:	e79a      	b.n	405996 <_strtoul_l.isra.0+0x6e>
  405a60:	46c1      	mov	r9, r8
  405a62:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  405a66:	f04f 0a0f 	mov.w	sl, #15
  405a6a:	e794      	b.n	405996 <_strtoul_l.isra.0+0x6e>
  405a6c:	19999999 	.word	0x19999999

00405a70 <_strtoul_r>:
  405a70:	b530      	push	{r4, r5, lr}
  405a72:	4c06      	ldr	r4, [pc, #24]	; (405a8c <_strtoul_r+0x1c>)
  405a74:	4d06      	ldr	r5, [pc, #24]	; (405a90 <_strtoul_r+0x20>)
  405a76:	6824      	ldr	r4, [r4, #0]
  405a78:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405a7a:	b083      	sub	sp, #12
  405a7c:	2c00      	cmp	r4, #0
  405a7e:	bf08      	it	eq
  405a80:	462c      	moveq	r4, r5
  405a82:	9400      	str	r4, [sp, #0]
  405a84:	f7ff ff50 	bl	405928 <_strtoul_l.isra.0>
  405a88:	b003      	add	sp, #12
  405a8a:	bd30      	pop	{r4, r5, pc}
  405a8c:	20400008 	.word	0x20400008
  405a90:	2040043c 	.word	0x2040043c

00405a94 <_strtoull_l.isra.0>:
  405a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a98:	b085      	sub	sp, #20
  405a9a:	4693      	mov	fp, r2
  405a9c:	9102      	str	r1, [sp, #8]
  405a9e:	9003      	str	r0, [sp, #12]
  405aa0:	469a      	mov	sl, r3
  405aa2:	460f      	mov	r7, r1
  405aa4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  405aa6:	e000      	b.n	405aaa <_strtoull_l.isra.0+0x16>
  405aa8:	462f      	mov	r7, r5
  405aaa:	463d      	mov	r5, r7
  405aac:	4630      	mov	r0, r6
  405aae:	f815 4b01 	ldrb.w	r4, [r5], #1
  405ab2:	f7fe fe19 	bl	4046e8 <__locale_ctype_ptr_l>
  405ab6:	4420      	add	r0, r4
  405ab8:	7843      	ldrb	r3, [r0, #1]
  405aba:	f013 0308 	ands.w	r3, r3, #8
  405abe:	d1f3      	bne.n	405aa8 <_strtoull_l.isra.0+0x14>
  405ac0:	2c2d      	cmp	r4, #45	; 0x2d
  405ac2:	f000 8089 	beq.w	405bd8 <_strtoull_l.isra.0+0x144>
  405ac6:	2c2b      	cmp	r4, #43	; 0x2b
  405ac8:	bf03      	ittte	eq
  405aca:	782c      	ldrbeq	r4, [r5, #0]
  405acc:	9301      	streq	r3, [sp, #4]
  405ace:	1cbd      	addeq	r5, r7, #2
  405ad0:	9301      	strne	r3, [sp, #4]
  405ad2:	f1ba 0f00 	cmp.w	sl, #0
  405ad6:	d019      	beq.n	405b0c <_strtoull_l.isra.0+0x78>
  405ad8:	f1ba 0f10 	cmp.w	sl, #16
  405adc:	f000 8081 	beq.w	405be2 <_strtoull_l.isra.0+0x14e>
  405ae0:	46d0      	mov	r8, sl
  405ae2:	ea4f 79ea 	mov.w	r9, sl, asr #31
  405ae6:	4642      	mov	r2, r8
  405ae8:	464b      	mov	r3, r9
  405aea:	f04f 30ff 	mov.w	r0, #4294967295
  405aee:	f04f 31ff 	mov.w	r1, #4294967295
  405af2:	f000 fb65 	bl	4061c0 <__aeabi_uldivmod>
  405af6:	4642      	mov	r2, r8
  405af8:	4606      	mov	r6, r0
  405afa:	460f      	mov	r7, r1
  405afc:	464b      	mov	r3, r9
  405afe:	f04f 30ff 	mov.w	r0, #4294967295
  405b02:	f04f 31ff 	mov.w	r1, #4294967295
  405b06:	f000 fb5b 	bl	4061c0 <__aeabi_uldivmod>
  405b0a:	e00b      	b.n	405b24 <_strtoull_l.isra.0+0x90>
  405b0c:	2c30      	cmp	r4, #48	; 0x30
  405b0e:	d07d      	beq.n	405c0c <_strtoull_l.isra.0+0x178>
  405b10:	4f4e      	ldr	r7, [pc, #312]	; (405c4c <_strtoull_l.isra.0+0x1b8>)
  405b12:	2205      	movs	r2, #5
  405b14:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
  405b18:	f04f 080a 	mov.w	r8, #10
  405b1c:	f04f 0900 	mov.w	r9, #0
  405b20:	f04f 0a0a 	mov.w	sl, #10
  405b24:	f04f 0e00 	mov.w	lr, #0
  405b28:	2000      	movs	r0, #0
  405b2a:	2100      	movs	r1, #0
  405b2c:	e011      	b.n	405b52 <_strtoull_l.isra.0+0xbe>
  405b2e:	42b9      	cmp	r1, r7
  405b30:	bf08      	it	eq
  405b32:	42b0      	cmpeq	r0, r6
  405b34:	d03f      	beq.n	405bb6 <_strtoull_l.isra.0+0x122>
  405b36:	fb00 f409 	mul.w	r4, r0, r9
  405b3a:	fb08 4401 	mla	r4, r8, r1, r4
  405b3e:	fba0 0108 	umull	r0, r1, r0, r8
  405b42:	4421      	add	r1, r4
  405b44:	18c0      	adds	r0, r0, r3
  405b46:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
  405b4a:	f04f 0e01 	mov.w	lr, #1
  405b4e:	f815 4b01 	ldrb.w	r4, [r5], #1
  405b52:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  405b56:	2b09      	cmp	r3, #9
  405b58:	d905      	bls.n	405b66 <_strtoull_l.isra.0+0xd2>
  405b5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  405b5e:	2b19      	cmp	r3, #25
  405b60:	d80d      	bhi.n	405b7e <_strtoull_l.isra.0+0xea>
  405b62:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
  405b66:	459a      	cmp	sl, r3
  405b68:	dd11      	ble.n	405b8e <_strtoull_l.isra.0+0xfa>
  405b6a:	f1be 0f00 	cmp.w	lr, #0
  405b6e:	db03      	blt.n	405b78 <_strtoull_l.isra.0+0xe4>
  405b70:	428f      	cmp	r7, r1
  405b72:	bf08      	it	eq
  405b74:	4286      	cmpeq	r6, r0
  405b76:	d2da      	bcs.n	405b2e <_strtoull_l.isra.0+0x9a>
  405b78:	f04f 3eff 	mov.w	lr, #4294967295
  405b7c:	e7e7      	b.n	405b4e <_strtoull_l.isra.0+0xba>
  405b7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
  405b82:	2b19      	cmp	r3, #25
  405b84:	d803      	bhi.n	405b8e <_strtoull_l.isra.0+0xfa>
  405b86:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
  405b8a:	459a      	cmp	sl, r3
  405b8c:	dced      	bgt.n	405b6a <_strtoull_l.isra.0+0xd6>
  405b8e:	f1be 0f00 	cmp.w	lr, #0
  405b92:	db15      	blt.n	405bc0 <_strtoull_l.isra.0+0x12c>
  405b94:	9b01      	ldr	r3, [sp, #4]
  405b96:	b113      	cbz	r3, 405b9e <_strtoull_l.isra.0+0x10a>
  405b98:	4240      	negs	r0, r0
  405b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405b9e:	f1bb 0f00 	cmp.w	fp, #0
  405ba2:	d005      	beq.n	405bb0 <_strtoull_l.isra.0+0x11c>
  405ba4:	f1be 0f00 	cmp.w	lr, #0
  405ba8:	d114      	bne.n	405bd4 <_strtoull_l.isra.0+0x140>
  405baa:	9d02      	ldr	r5, [sp, #8]
  405bac:	f8cb 5000 	str.w	r5, [fp]
  405bb0:	b005      	add	sp, #20
  405bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bb6:	4293      	cmp	r3, r2
  405bb8:	ddbd      	ble.n	405b36 <_strtoull_l.isra.0+0xa2>
  405bba:	f04f 3eff 	mov.w	lr, #4294967295
  405bbe:	e7c6      	b.n	405b4e <_strtoull_l.isra.0+0xba>
  405bc0:	9a03      	ldr	r2, [sp, #12]
  405bc2:	2322      	movs	r3, #34	; 0x22
  405bc4:	6013      	str	r3, [r2, #0]
  405bc6:	f04f 30ff 	mov.w	r0, #4294967295
  405bca:	f04f 31ff 	mov.w	r1, #4294967295
  405bce:	f1bb 0f00 	cmp.w	fp, #0
  405bd2:	d0ed      	beq.n	405bb0 <_strtoull_l.isra.0+0x11c>
  405bd4:	3d01      	subs	r5, #1
  405bd6:	e7e9      	b.n	405bac <_strtoull_l.isra.0+0x118>
  405bd8:	2301      	movs	r3, #1
  405bda:	782c      	ldrb	r4, [r5, #0]
  405bdc:	9301      	str	r3, [sp, #4]
  405bde:	1cbd      	adds	r5, r7, #2
  405be0:	e777      	b.n	405ad2 <_strtoull_l.isra.0+0x3e>
  405be2:	2c30      	cmp	r4, #48	; 0x30
  405be4:	d123      	bne.n	405c2e <_strtoull_l.isra.0+0x19a>
  405be6:	782b      	ldrb	r3, [r5, #0]
  405be8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405bec:	2b58      	cmp	r3, #88	; 0x58
  405bee:	d128      	bne.n	405c42 <_strtoull_l.isra.0+0x1ae>
  405bf0:	786c      	ldrb	r4, [r5, #1]
  405bf2:	220f      	movs	r2, #15
  405bf4:	3502      	adds	r5, #2
  405bf6:	f04f 36ff 	mov.w	r6, #4294967295
  405bfa:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  405bfe:	f04f 0810 	mov.w	r8, #16
  405c02:	f04f 0900 	mov.w	r9, #0
  405c06:	f04f 0a10 	mov.w	sl, #16
  405c0a:	e78b      	b.n	405b24 <_strtoull_l.isra.0+0x90>
  405c0c:	782b      	ldrb	r3, [r5, #0]
  405c0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405c12:	2b58      	cmp	r3, #88	; 0x58
  405c14:	d0ec      	beq.n	405bf0 <_strtoull_l.isra.0+0x15c>
  405c16:	2207      	movs	r2, #7
  405c18:	f04f 36ff 	mov.w	r6, #4294967295
  405c1c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
  405c20:	f04f 0808 	mov.w	r8, #8
  405c24:	f04f 0900 	mov.w	r9, #0
  405c28:	f04f 0a08 	mov.w	sl, #8
  405c2c:	e77a      	b.n	405b24 <_strtoull_l.isra.0+0x90>
  405c2e:	220f      	movs	r2, #15
  405c30:	f04f 36ff 	mov.w	r6, #4294967295
  405c34:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  405c38:	f04f 0810 	mov.w	r8, #16
  405c3c:	f04f 0900 	mov.w	r9, #0
  405c40:	e770      	b.n	405b24 <_strtoull_l.isra.0+0x90>
  405c42:	f04f 0810 	mov.w	r8, #16
  405c46:	f04f 0900 	mov.w	r9, #0
  405c4a:	e74c      	b.n	405ae6 <_strtoull_l.isra.0+0x52>
  405c4c:	19999999 	.word	0x19999999

00405c50 <_strtoull_r>:
  405c50:	b530      	push	{r4, r5, lr}
  405c52:	4c06      	ldr	r4, [pc, #24]	; (405c6c <_strtoull_r+0x1c>)
  405c54:	4d06      	ldr	r5, [pc, #24]	; (405c70 <_strtoull_r+0x20>)
  405c56:	6824      	ldr	r4, [r4, #0]
  405c58:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405c5a:	b083      	sub	sp, #12
  405c5c:	2c00      	cmp	r4, #0
  405c5e:	bf08      	it	eq
  405c60:	462c      	moveq	r4, r5
  405c62:	9400      	str	r4, [sp, #0]
  405c64:	f7ff ff16 	bl	405a94 <_strtoull_l.isra.0>
  405c68:	b003      	add	sp, #12
  405c6a:	bd30      	pop	{r4, r5, pc}
  405c6c:	20400008 	.word	0x20400008
  405c70:	2040043c 	.word	0x2040043c

00405c74 <__submore>:
  405c74:	f101 0340 	add.w	r3, r1, #64	; 0x40
  405c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c7c:	460c      	mov	r4, r1
  405c7e:	6b09      	ldr	r1, [r1, #48]	; 0x30
  405c80:	4299      	cmp	r1, r3
  405c82:	d014      	beq.n	405cae <__submore+0x3a>
  405c84:	6b66      	ldr	r6, [r4, #52]	; 0x34
  405c86:	0077      	lsls	r7, r6, #1
  405c88:	463a      	mov	r2, r7
  405c8a:	f7ff f981 	bl	404f90 <_realloc_r>
  405c8e:	4605      	mov	r5, r0
  405c90:	b340      	cbz	r0, 405ce4 <__submore+0x70>
  405c92:	eb00 0806 	add.w	r8, r0, r6
  405c96:	4632      	mov	r2, r6
  405c98:	4640      	mov	r0, r8
  405c9a:	4629      	mov	r1, r5
  405c9c:	f7fc f948 	bl	401f30 <memcpy>
  405ca0:	f8c4 8000 	str.w	r8, [r4]
  405ca4:	6325      	str	r5, [r4, #48]	; 0x30
  405ca6:	6367      	str	r7, [r4, #52]	; 0x34
  405ca8:	2000      	movs	r0, #0
  405caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405cb2:	f7fe fdb3 	bl	40481c <_malloc_r>
  405cb6:	b1a8      	cbz	r0, 405ce4 <__submore+0x70>
  405cb8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  405cbc:	6320      	str	r0, [r4, #48]	; 0x30
  405cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405cc2:	6362      	str	r2, [r4, #52]	; 0x34
  405cc4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  405cc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  405ccc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  405cd0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  405cd4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  405cd8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  405cdc:	6020      	str	r0, [r4, #0]
  405cde:	2000      	movs	r0, #0
  405ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ce4:	f04f 30ff 	mov.w	r0, #4294967295
  405ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405cec <_ungetc_r>:
  405cec:	b570      	push	{r4, r5, r6, lr}
  405cee:	1c4c      	adds	r4, r1, #1
  405cf0:	d024      	beq.n	405d3c <_ungetc_r+0x50>
  405cf2:	4606      	mov	r6, r0
  405cf4:	4614      	mov	r4, r2
  405cf6:	460d      	mov	r5, r1
  405cf8:	b110      	cbz	r0, 405d00 <_ungetc_r+0x14>
  405cfa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405cfc:	2b00      	cmp	r3, #0
  405cfe:	d04d      	beq.n	405d9c <_ungetc_r+0xb0>
  405d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405d02:	f013 0f01 	tst.w	r3, #1
  405d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d0a:	b29a      	uxth	r2, r3
  405d0c:	d101      	bne.n	405d12 <_ungetc_r+0x26>
  405d0e:	0591      	lsls	r1, r2, #22
  405d10:	d559      	bpl.n	405dc6 <_ungetc_r+0xda>
  405d12:	0492      	lsls	r2, r2, #18
  405d14:	d405      	bmi.n	405d22 <_ungetc_r+0x36>
  405d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405d20:	6662      	str	r2, [r4, #100]	; 0x64
  405d22:	f023 0320 	bic.w	r3, r3, #32
  405d26:	b29a      	uxth	r2, r3
  405d28:	0750      	lsls	r0, r2, #29
  405d2a:	81a3      	strh	r3, [r4, #12]
  405d2c:	d41b      	bmi.n	405d66 <_ungetc_r+0x7a>
  405d2e:	06d1      	lsls	r1, r2, #27
  405d30:	d408      	bmi.n	405d44 <_ungetc_r+0x58>
  405d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405d34:	07d8      	lsls	r0, r3, #31
  405d36:	d401      	bmi.n	405d3c <_ungetc_r+0x50>
  405d38:	0591      	lsls	r1, r2, #22
  405d3a:	d53e      	bpl.n	405dba <_ungetc_r+0xce>
  405d3c:	f04f 35ff 	mov.w	r5, #4294967295
  405d40:	4628      	mov	r0, r5
  405d42:	bd70      	pop	{r4, r5, r6, pc}
  405d44:	0712      	lsls	r2, r2, #28
  405d46:	d50b      	bpl.n	405d60 <_ungetc_r+0x74>
  405d48:	4621      	mov	r1, r4
  405d4a:	4630      	mov	r0, r6
  405d4c:	f7fd ff90 	bl	403c70 <_fflush_r>
  405d50:	2800      	cmp	r0, #0
  405d52:	d12c      	bne.n	405dae <_ungetc_r+0xc2>
  405d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d58:	60a0      	str	r0, [r4, #8]
  405d5a:	61a0      	str	r0, [r4, #24]
  405d5c:	f023 0308 	bic.w	r3, r3, #8
  405d60:	f043 0304 	orr.w	r3, r3, #4
  405d64:	81a3      	strh	r3, [r4, #12]
  405d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405d68:	b2ed      	uxtb	r5, r5
  405d6a:	2b00      	cmp	r3, #0
  405d6c:	d034      	beq.n	405dd8 <_ungetc_r+0xec>
  405d6e:	6862      	ldr	r2, [r4, #4]
  405d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405d72:	429a      	cmp	r2, r3
  405d74:	da15      	bge.n	405da2 <_ungetc_r+0xb6>
  405d76:	6823      	ldr	r3, [r4, #0]
  405d78:	1e5a      	subs	r2, r3, #1
  405d7a:	6022      	str	r2, [r4, #0]
  405d7c:	f803 5c01 	strb.w	r5, [r3, #-1]
  405d80:	6863      	ldr	r3, [r4, #4]
  405d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405d84:	3301      	adds	r3, #1
  405d86:	07d0      	lsls	r0, r2, #31
  405d88:	6063      	str	r3, [r4, #4]
  405d8a:	d4d9      	bmi.n	405d40 <_ungetc_r+0x54>
  405d8c:	89a3      	ldrh	r3, [r4, #12]
  405d8e:	059b      	lsls	r3, r3, #22
  405d90:	d4d6      	bmi.n	405d40 <_ungetc_r+0x54>
  405d92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d94:	f7fe fcc0 	bl	404718 <__retarget_lock_release_recursive>
  405d98:	4628      	mov	r0, r5
  405d9a:	bd70      	pop	{r4, r5, r6, pc}
  405d9c:	f7fd ffd2 	bl	403d44 <__sinit>
  405da0:	e7ae      	b.n	405d00 <_ungetc_r+0x14>
  405da2:	4630      	mov	r0, r6
  405da4:	4621      	mov	r1, r4
  405da6:	f7ff ff65 	bl	405c74 <__submore>
  405daa:	2800      	cmp	r0, #0
  405dac:	d0e3      	beq.n	405d76 <_ungetc_r+0x8a>
  405dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405db0:	07de      	lsls	r6, r3, #31
  405db2:	d4c3      	bmi.n	405d3c <_ungetc_r+0x50>
  405db4:	89a3      	ldrh	r3, [r4, #12]
  405db6:	059d      	lsls	r5, r3, #22
  405db8:	d4c0      	bmi.n	405d3c <_ungetc_r+0x50>
  405dba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405dbc:	f7fe fcac 	bl	404718 <__retarget_lock_release_recursive>
  405dc0:	f04f 35ff 	mov.w	r5, #4294967295
  405dc4:	e7bc      	b.n	405d40 <_ungetc_r+0x54>
  405dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405dc8:	f7fe fca4 	bl	404714 <__retarget_lock_acquire_recursive>
  405dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405dd0:	b29a      	uxth	r2, r3
  405dd2:	0492      	lsls	r2, r2, #18
  405dd4:	d4a5      	bmi.n	405d22 <_ungetc_r+0x36>
  405dd6:	e79e      	b.n	405d16 <_ungetc_r+0x2a>
  405dd8:	6922      	ldr	r2, [r4, #16]
  405dda:	6823      	ldr	r3, [r4, #0]
  405ddc:	b172      	cbz	r2, 405dfc <_ungetc_r+0x110>
  405dde:	429a      	cmp	r2, r3
  405de0:	d20c      	bcs.n	405dfc <_ungetc_r+0x110>
  405de2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  405de6:	42aa      	cmp	r2, r5
  405de8:	d108      	bne.n	405dfc <_ungetc_r+0x110>
  405dea:	6862      	ldr	r2, [r4, #4]
  405dec:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405dee:	3b01      	subs	r3, #1
  405df0:	3201      	adds	r2, #1
  405df2:	07c9      	lsls	r1, r1, #31
  405df4:	6023      	str	r3, [r4, #0]
  405df6:	6062      	str	r2, [r4, #4]
  405df8:	d5c8      	bpl.n	405d8c <_ungetc_r+0xa0>
  405dfa:	e7a1      	b.n	405d40 <_ungetc_r+0x54>
  405dfc:	63a3      	str	r3, [r4, #56]	; 0x38
  405dfe:	4623      	mov	r3, r4
  405e00:	6860      	ldr	r0, [r4, #4]
  405e02:	63e0      	str	r0, [r4, #60]	; 0x3c
  405e04:	2203      	movs	r2, #3
  405e06:	f104 0140 	add.w	r1, r4, #64	; 0x40
  405e0a:	6362      	str	r2, [r4, #52]	; 0x34
  405e0c:	6321      	str	r1, [r4, #48]	; 0x30
  405e0e:	f803 5f42 	strb.w	r5, [r3, #66]!
  405e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405e14:	6023      	str	r3, [r4, #0]
  405e16:	07d2      	lsls	r2, r2, #31
  405e18:	f04f 0301 	mov.w	r3, #1
  405e1c:	6063      	str	r3, [r4, #4]
  405e1e:	d48f      	bmi.n	405d40 <_ungetc_r+0x54>
  405e20:	e7b4      	b.n	405d8c <_ungetc_r+0xa0>
  405e22:	bf00      	nop

00405e24 <__swbuf_r>:
  405e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405e26:	460d      	mov	r5, r1
  405e28:	4614      	mov	r4, r2
  405e2a:	4606      	mov	r6, r0
  405e2c:	b110      	cbz	r0, 405e34 <__swbuf_r+0x10>
  405e2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405e30:	2b00      	cmp	r3, #0
  405e32:	d04b      	beq.n	405ecc <__swbuf_r+0xa8>
  405e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405e38:	69a3      	ldr	r3, [r4, #24]
  405e3a:	60a3      	str	r3, [r4, #8]
  405e3c:	b291      	uxth	r1, r2
  405e3e:	0708      	lsls	r0, r1, #28
  405e40:	d539      	bpl.n	405eb6 <__swbuf_r+0x92>
  405e42:	6923      	ldr	r3, [r4, #16]
  405e44:	2b00      	cmp	r3, #0
  405e46:	d036      	beq.n	405eb6 <__swbuf_r+0x92>
  405e48:	b2ed      	uxtb	r5, r5
  405e4a:	0489      	lsls	r1, r1, #18
  405e4c:	462f      	mov	r7, r5
  405e4e:	d515      	bpl.n	405e7c <__swbuf_r+0x58>
  405e50:	6822      	ldr	r2, [r4, #0]
  405e52:	6961      	ldr	r1, [r4, #20]
  405e54:	1ad3      	subs	r3, r2, r3
  405e56:	428b      	cmp	r3, r1
  405e58:	da1c      	bge.n	405e94 <__swbuf_r+0x70>
  405e5a:	3301      	adds	r3, #1
  405e5c:	68a1      	ldr	r1, [r4, #8]
  405e5e:	1c50      	adds	r0, r2, #1
  405e60:	3901      	subs	r1, #1
  405e62:	60a1      	str	r1, [r4, #8]
  405e64:	6020      	str	r0, [r4, #0]
  405e66:	7015      	strb	r5, [r2, #0]
  405e68:	6962      	ldr	r2, [r4, #20]
  405e6a:	429a      	cmp	r2, r3
  405e6c:	d01a      	beq.n	405ea4 <__swbuf_r+0x80>
  405e6e:	89a3      	ldrh	r3, [r4, #12]
  405e70:	07db      	lsls	r3, r3, #31
  405e72:	d501      	bpl.n	405e78 <__swbuf_r+0x54>
  405e74:	2d0a      	cmp	r5, #10
  405e76:	d015      	beq.n	405ea4 <__swbuf_r+0x80>
  405e78:	4638      	mov	r0, r7
  405e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e7c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405e82:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405e86:	81a2      	strh	r2, [r4, #12]
  405e88:	6822      	ldr	r2, [r4, #0]
  405e8a:	6661      	str	r1, [r4, #100]	; 0x64
  405e8c:	6961      	ldr	r1, [r4, #20]
  405e8e:	1ad3      	subs	r3, r2, r3
  405e90:	428b      	cmp	r3, r1
  405e92:	dbe2      	blt.n	405e5a <__swbuf_r+0x36>
  405e94:	4621      	mov	r1, r4
  405e96:	4630      	mov	r0, r6
  405e98:	f7fd feea 	bl	403c70 <_fflush_r>
  405e9c:	b940      	cbnz	r0, 405eb0 <__swbuf_r+0x8c>
  405e9e:	6822      	ldr	r2, [r4, #0]
  405ea0:	2301      	movs	r3, #1
  405ea2:	e7db      	b.n	405e5c <__swbuf_r+0x38>
  405ea4:	4621      	mov	r1, r4
  405ea6:	4630      	mov	r0, r6
  405ea8:	f7fd fee2 	bl	403c70 <_fflush_r>
  405eac:	2800      	cmp	r0, #0
  405eae:	d0e3      	beq.n	405e78 <__swbuf_r+0x54>
  405eb0:	f04f 37ff 	mov.w	r7, #4294967295
  405eb4:	e7e0      	b.n	405e78 <__swbuf_r+0x54>
  405eb6:	4621      	mov	r1, r4
  405eb8:	4630      	mov	r0, r6
  405eba:	f7fd fdc5 	bl	403a48 <__swsetup_r>
  405ebe:	2800      	cmp	r0, #0
  405ec0:	d1f6      	bne.n	405eb0 <__swbuf_r+0x8c>
  405ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405ec6:	6923      	ldr	r3, [r4, #16]
  405ec8:	b291      	uxth	r1, r2
  405eca:	e7bd      	b.n	405e48 <__swbuf_r+0x24>
  405ecc:	f7fd ff3a 	bl	403d44 <__sinit>
  405ed0:	e7b0      	b.n	405e34 <__swbuf_r+0x10>
  405ed2:	bf00      	nop

00405ed4 <_wcrtomb_r>:
  405ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ed6:	4606      	mov	r6, r0
  405ed8:	b085      	sub	sp, #20
  405eda:	461f      	mov	r7, r3
  405edc:	b189      	cbz	r1, 405f02 <_wcrtomb_r+0x2e>
  405ede:	4c10      	ldr	r4, [pc, #64]	; (405f20 <_wcrtomb_r+0x4c>)
  405ee0:	4d10      	ldr	r5, [pc, #64]	; (405f24 <_wcrtomb_r+0x50>)
  405ee2:	6824      	ldr	r4, [r4, #0]
  405ee4:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405ee6:	2c00      	cmp	r4, #0
  405ee8:	bf08      	it	eq
  405eea:	462c      	moveq	r4, r5
  405eec:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405ef0:	47a0      	blx	r4
  405ef2:	1c43      	adds	r3, r0, #1
  405ef4:	d103      	bne.n	405efe <_wcrtomb_r+0x2a>
  405ef6:	2200      	movs	r2, #0
  405ef8:	238a      	movs	r3, #138	; 0x8a
  405efa:	603a      	str	r2, [r7, #0]
  405efc:	6033      	str	r3, [r6, #0]
  405efe:	b005      	add	sp, #20
  405f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f02:	460c      	mov	r4, r1
  405f04:	4906      	ldr	r1, [pc, #24]	; (405f20 <_wcrtomb_r+0x4c>)
  405f06:	4a07      	ldr	r2, [pc, #28]	; (405f24 <_wcrtomb_r+0x50>)
  405f08:	6809      	ldr	r1, [r1, #0]
  405f0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405f0c:	2900      	cmp	r1, #0
  405f0e:	bf08      	it	eq
  405f10:	4611      	moveq	r1, r2
  405f12:	4622      	mov	r2, r4
  405f14:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405f18:	a901      	add	r1, sp, #4
  405f1a:	47a0      	blx	r4
  405f1c:	e7e9      	b.n	405ef2 <_wcrtomb_r+0x1e>
  405f1e:	bf00      	nop
  405f20:	20400008 	.word	0x20400008
  405f24:	2040043c 	.word	0x2040043c

00405f28 <__ascii_wctomb>:
  405f28:	b121      	cbz	r1, 405f34 <__ascii_wctomb+0xc>
  405f2a:	2aff      	cmp	r2, #255	; 0xff
  405f2c:	d804      	bhi.n	405f38 <__ascii_wctomb+0x10>
  405f2e:	700a      	strb	r2, [r1, #0]
  405f30:	2001      	movs	r0, #1
  405f32:	4770      	bx	lr
  405f34:	4608      	mov	r0, r1
  405f36:	4770      	bx	lr
  405f38:	238a      	movs	r3, #138	; 0x8a
  405f3a:	6003      	str	r3, [r0, #0]
  405f3c:	f04f 30ff 	mov.w	r0, #4294967295
  405f40:	4770      	bx	lr
  405f42:	bf00      	nop

00405f44 <_write_r>:
  405f44:	b570      	push	{r4, r5, r6, lr}
  405f46:	460d      	mov	r5, r1
  405f48:	4c08      	ldr	r4, [pc, #32]	; (405f6c <_write_r+0x28>)
  405f4a:	4611      	mov	r1, r2
  405f4c:	4606      	mov	r6, r0
  405f4e:	461a      	mov	r2, r3
  405f50:	4628      	mov	r0, r5
  405f52:	2300      	movs	r3, #0
  405f54:	6023      	str	r3, [r4, #0]
  405f56:	f7fa f9b9 	bl	4002cc <_write>
  405f5a:	1c43      	adds	r3, r0, #1
  405f5c:	d000      	beq.n	405f60 <_write_r+0x1c>
  405f5e:	bd70      	pop	{r4, r5, r6, pc}
  405f60:	6823      	ldr	r3, [r4, #0]
  405f62:	2b00      	cmp	r3, #0
  405f64:	d0fb      	beq.n	405f5e <_write_r+0x1a>
  405f66:	6033      	str	r3, [r6, #0]
  405f68:	bd70      	pop	{r4, r5, r6, pc}
  405f6a:	bf00      	nop
  405f6c:	20401690 	.word	0x20401690

00405f70 <__register_exitproc>:
  405f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405f74:	4d2c      	ldr	r5, [pc, #176]	; (406028 <__register_exitproc+0xb8>)
  405f76:	4606      	mov	r6, r0
  405f78:	6828      	ldr	r0, [r5, #0]
  405f7a:	4698      	mov	r8, r3
  405f7c:	460f      	mov	r7, r1
  405f7e:	4691      	mov	r9, r2
  405f80:	f7fe fbc8 	bl	404714 <__retarget_lock_acquire_recursive>
  405f84:	4b29      	ldr	r3, [pc, #164]	; (40602c <__register_exitproc+0xbc>)
  405f86:	681c      	ldr	r4, [r3, #0]
  405f88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405f8c:	2b00      	cmp	r3, #0
  405f8e:	d03e      	beq.n	40600e <__register_exitproc+0x9e>
  405f90:	685a      	ldr	r2, [r3, #4]
  405f92:	2a1f      	cmp	r2, #31
  405f94:	dc1c      	bgt.n	405fd0 <__register_exitproc+0x60>
  405f96:	f102 0e01 	add.w	lr, r2, #1
  405f9a:	b176      	cbz	r6, 405fba <__register_exitproc+0x4a>
  405f9c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405fa0:	2401      	movs	r4, #1
  405fa2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405fa6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405faa:	4094      	lsls	r4, r2
  405fac:	4320      	orrs	r0, r4
  405fae:	2e02      	cmp	r6, #2
  405fb0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405fb4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405fb8:	d023      	beq.n	406002 <__register_exitproc+0x92>
  405fba:	3202      	adds	r2, #2
  405fbc:	f8c3 e004 	str.w	lr, [r3, #4]
  405fc0:	6828      	ldr	r0, [r5, #0]
  405fc2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405fc6:	f7fe fba7 	bl	404718 <__retarget_lock_release_recursive>
  405fca:	2000      	movs	r0, #0
  405fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405fd0:	4b17      	ldr	r3, [pc, #92]	; (406030 <__register_exitproc+0xc0>)
  405fd2:	b30b      	cbz	r3, 406018 <__register_exitproc+0xa8>
  405fd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405fd8:	f7fe fc18 	bl	40480c <malloc>
  405fdc:	4603      	mov	r3, r0
  405fde:	b1d8      	cbz	r0, 406018 <__register_exitproc+0xa8>
  405fe0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405fe4:	6002      	str	r2, [r0, #0]
  405fe6:	2100      	movs	r1, #0
  405fe8:	6041      	str	r1, [r0, #4]
  405fea:	460a      	mov	r2, r1
  405fec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405ff0:	f04f 0e01 	mov.w	lr, #1
  405ff4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405ff8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405ffc:	2e00      	cmp	r6, #0
  405ffe:	d0dc      	beq.n	405fba <__register_exitproc+0x4a>
  406000:	e7cc      	b.n	405f9c <__register_exitproc+0x2c>
  406002:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406006:	430c      	orrs	r4, r1
  406008:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40600c:	e7d5      	b.n	405fba <__register_exitproc+0x4a>
  40600e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406012:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406016:	e7bb      	b.n	405f90 <__register_exitproc+0x20>
  406018:	6828      	ldr	r0, [r5, #0]
  40601a:	f7fe fb7d 	bl	404718 <__retarget_lock_release_recursive>
  40601e:	f04f 30ff 	mov.w	r0, #4294967295
  406022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406026:	bf00      	nop
  406028:	20400438 	.word	0x20400438
  40602c:	004068c4 	.word	0x004068c4
  406030:	0040480d 	.word	0x0040480d

00406034 <_close_r>:
  406034:	b538      	push	{r3, r4, r5, lr}
  406036:	4c07      	ldr	r4, [pc, #28]	; (406054 <_close_r+0x20>)
  406038:	2300      	movs	r3, #0
  40603a:	4605      	mov	r5, r0
  40603c:	4608      	mov	r0, r1
  40603e:	6023      	str	r3, [r4, #0]
  406040:	f7fb f91a 	bl	401278 <_close>
  406044:	1c43      	adds	r3, r0, #1
  406046:	d000      	beq.n	40604a <_close_r+0x16>
  406048:	bd38      	pop	{r3, r4, r5, pc}
  40604a:	6823      	ldr	r3, [r4, #0]
  40604c:	2b00      	cmp	r3, #0
  40604e:	d0fb      	beq.n	406048 <_close_r+0x14>
  406050:	602b      	str	r3, [r5, #0]
  406052:	bd38      	pop	{r3, r4, r5, pc}
  406054:	20401690 	.word	0x20401690

00406058 <_fclose_r>:
  406058:	b570      	push	{r4, r5, r6, lr}
  40605a:	b159      	cbz	r1, 406074 <_fclose_r+0x1c>
  40605c:	4605      	mov	r5, r0
  40605e:	460c      	mov	r4, r1
  406060:	b110      	cbz	r0, 406068 <_fclose_r+0x10>
  406062:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406064:	2b00      	cmp	r3, #0
  406066:	d03c      	beq.n	4060e2 <_fclose_r+0x8a>
  406068:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40606a:	07d8      	lsls	r0, r3, #31
  40606c:	d505      	bpl.n	40607a <_fclose_r+0x22>
  40606e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406072:	b92b      	cbnz	r3, 406080 <_fclose_r+0x28>
  406074:	2600      	movs	r6, #0
  406076:	4630      	mov	r0, r6
  406078:	bd70      	pop	{r4, r5, r6, pc}
  40607a:	89a3      	ldrh	r3, [r4, #12]
  40607c:	0599      	lsls	r1, r3, #22
  40607e:	d53c      	bpl.n	4060fa <_fclose_r+0xa2>
  406080:	4621      	mov	r1, r4
  406082:	4628      	mov	r0, r5
  406084:	f7fd fd54 	bl	403b30 <__sflush_r>
  406088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40608a:	4606      	mov	r6, r0
  40608c:	b133      	cbz	r3, 40609c <_fclose_r+0x44>
  40608e:	69e1      	ldr	r1, [r4, #28]
  406090:	4628      	mov	r0, r5
  406092:	4798      	blx	r3
  406094:	2800      	cmp	r0, #0
  406096:	bfb8      	it	lt
  406098:	f04f 36ff 	movlt.w	r6, #4294967295
  40609c:	89a3      	ldrh	r3, [r4, #12]
  40609e:	061a      	lsls	r2, r3, #24
  4060a0:	d422      	bmi.n	4060e8 <_fclose_r+0x90>
  4060a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4060a4:	b141      	cbz	r1, 4060b8 <_fclose_r+0x60>
  4060a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4060aa:	4299      	cmp	r1, r3
  4060ac:	d002      	beq.n	4060b4 <_fclose_r+0x5c>
  4060ae:	4628      	mov	r0, r5
  4060b0:	f7fe f850 	bl	404154 <_free_r>
  4060b4:	2300      	movs	r3, #0
  4060b6:	6323      	str	r3, [r4, #48]	; 0x30
  4060b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4060ba:	b121      	cbz	r1, 4060c6 <_fclose_r+0x6e>
  4060bc:	4628      	mov	r0, r5
  4060be:	f7fe f849 	bl	404154 <_free_r>
  4060c2:	2300      	movs	r3, #0
  4060c4:	6463      	str	r3, [r4, #68]	; 0x44
  4060c6:	f7fd fe69 	bl	403d9c <__sfp_lock_acquire>
  4060ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4060cc:	2200      	movs	r2, #0
  4060ce:	07db      	lsls	r3, r3, #31
  4060d0:	81a2      	strh	r2, [r4, #12]
  4060d2:	d50e      	bpl.n	4060f2 <_fclose_r+0x9a>
  4060d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4060d6:	f7fe fb1b 	bl	404710 <__retarget_lock_close_recursive>
  4060da:	f7fd fe65 	bl	403da8 <__sfp_lock_release>
  4060de:	4630      	mov	r0, r6
  4060e0:	bd70      	pop	{r4, r5, r6, pc}
  4060e2:	f7fd fe2f 	bl	403d44 <__sinit>
  4060e6:	e7bf      	b.n	406068 <_fclose_r+0x10>
  4060e8:	6921      	ldr	r1, [r4, #16]
  4060ea:	4628      	mov	r0, r5
  4060ec:	f7fe f832 	bl	404154 <_free_r>
  4060f0:	e7d7      	b.n	4060a2 <_fclose_r+0x4a>
  4060f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4060f4:	f7fe fb10 	bl	404718 <__retarget_lock_release_recursive>
  4060f8:	e7ec      	b.n	4060d4 <_fclose_r+0x7c>
  4060fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4060fc:	f7fe fb0a 	bl	404714 <__retarget_lock_acquire_recursive>
  406100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406104:	2b00      	cmp	r3, #0
  406106:	d1bb      	bne.n	406080 <_fclose_r+0x28>
  406108:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40610a:	f016 0601 	ands.w	r6, r6, #1
  40610e:	d1b1      	bne.n	406074 <_fclose_r+0x1c>
  406110:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406112:	f7fe fb01 	bl	404718 <__retarget_lock_release_recursive>
  406116:	4630      	mov	r0, r6
  406118:	bd70      	pop	{r4, r5, r6, pc}
  40611a:	bf00      	nop

0040611c <_fstat_r>:
  40611c:	b538      	push	{r3, r4, r5, lr}
  40611e:	460b      	mov	r3, r1
  406120:	4c07      	ldr	r4, [pc, #28]	; (406140 <_fstat_r+0x24>)
  406122:	4605      	mov	r5, r0
  406124:	4611      	mov	r1, r2
  406126:	4618      	mov	r0, r3
  406128:	2300      	movs	r3, #0
  40612a:	6023      	str	r3, [r4, #0]
  40612c:	f7fb f8a7 	bl	40127e <_fstat>
  406130:	1c43      	adds	r3, r0, #1
  406132:	d000      	beq.n	406136 <_fstat_r+0x1a>
  406134:	bd38      	pop	{r3, r4, r5, pc}
  406136:	6823      	ldr	r3, [r4, #0]
  406138:	2b00      	cmp	r3, #0
  40613a:	d0fb      	beq.n	406134 <_fstat_r+0x18>
  40613c:	602b      	str	r3, [r5, #0]
  40613e:	bd38      	pop	{r3, r4, r5, pc}
  406140:	20401690 	.word	0x20401690

00406144 <_isatty_r>:
  406144:	b538      	push	{r3, r4, r5, lr}
  406146:	4c07      	ldr	r4, [pc, #28]	; (406164 <_isatty_r+0x20>)
  406148:	2300      	movs	r3, #0
  40614a:	4605      	mov	r5, r0
  40614c:	4608      	mov	r0, r1
  40614e:	6023      	str	r3, [r4, #0]
  406150:	f7fb f89a 	bl	401288 <_isatty>
  406154:	1c43      	adds	r3, r0, #1
  406156:	d000      	beq.n	40615a <_isatty_r+0x16>
  406158:	bd38      	pop	{r3, r4, r5, pc}
  40615a:	6823      	ldr	r3, [r4, #0]
  40615c:	2b00      	cmp	r3, #0
  40615e:	d0fb      	beq.n	406158 <_isatty_r+0x14>
  406160:	602b      	str	r3, [r5, #0]
  406162:	bd38      	pop	{r3, r4, r5, pc}
  406164:	20401690 	.word	0x20401690

00406168 <_lseek_r>:
  406168:	b570      	push	{r4, r5, r6, lr}
  40616a:	460d      	mov	r5, r1
  40616c:	4c08      	ldr	r4, [pc, #32]	; (406190 <_lseek_r+0x28>)
  40616e:	4611      	mov	r1, r2
  406170:	4606      	mov	r6, r0
  406172:	461a      	mov	r2, r3
  406174:	4628      	mov	r0, r5
  406176:	2300      	movs	r3, #0
  406178:	6023      	str	r3, [r4, #0]
  40617a:	f7fb f887 	bl	40128c <_lseek>
  40617e:	1c43      	adds	r3, r0, #1
  406180:	d000      	beq.n	406184 <_lseek_r+0x1c>
  406182:	bd70      	pop	{r4, r5, r6, pc}
  406184:	6823      	ldr	r3, [r4, #0]
  406186:	2b00      	cmp	r3, #0
  406188:	d0fb      	beq.n	406182 <_lseek_r+0x1a>
  40618a:	6033      	str	r3, [r6, #0]
  40618c:	bd70      	pop	{r4, r5, r6, pc}
  40618e:	bf00      	nop
  406190:	20401690 	.word	0x20401690

00406194 <_read_r>:
  406194:	b570      	push	{r4, r5, r6, lr}
  406196:	460d      	mov	r5, r1
  406198:	4c08      	ldr	r4, [pc, #32]	; (4061bc <_read_r+0x28>)
  40619a:	4611      	mov	r1, r2
  40619c:	4606      	mov	r6, r0
  40619e:	461a      	mov	r2, r3
  4061a0:	4628      	mov	r0, r5
  4061a2:	2300      	movs	r3, #0
  4061a4:	6023      	str	r3, [r4, #0]
  4061a6:	f7fa f815 	bl	4001d4 <_read>
  4061aa:	1c43      	adds	r3, r0, #1
  4061ac:	d000      	beq.n	4061b0 <_read_r+0x1c>
  4061ae:	bd70      	pop	{r4, r5, r6, pc}
  4061b0:	6823      	ldr	r3, [r4, #0]
  4061b2:	2b00      	cmp	r3, #0
  4061b4:	d0fb      	beq.n	4061ae <_read_r+0x1a>
  4061b6:	6033      	str	r3, [r6, #0]
  4061b8:	bd70      	pop	{r4, r5, r6, pc}
  4061ba:	bf00      	nop
  4061bc:	20401690 	.word	0x20401690

004061c0 <__aeabi_uldivmod>:
  4061c0:	b953      	cbnz	r3, 4061d8 <__aeabi_uldivmod+0x18>
  4061c2:	b94a      	cbnz	r2, 4061d8 <__aeabi_uldivmod+0x18>
  4061c4:	2900      	cmp	r1, #0
  4061c6:	bf08      	it	eq
  4061c8:	2800      	cmpeq	r0, #0
  4061ca:	bf1c      	itt	ne
  4061cc:	f04f 31ff 	movne.w	r1, #4294967295
  4061d0:	f04f 30ff 	movne.w	r0, #4294967295
  4061d4:	f000 b97a 	b.w	4064cc <__aeabi_idiv0>
  4061d8:	f1ad 0c08 	sub.w	ip, sp, #8
  4061dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4061e0:	f000 f806 	bl	4061f0 <__udivmoddi4>
  4061e4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4061e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4061ec:	b004      	add	sp, #16
  4061ee:	4770      	bx	lr

004061f0 <__udivmoddi4>:
  4061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4061f4:	468c      	mov	ip, r1
  4061f6:	460d      	mov	r5, r1
  4061f8:	4604      	mov	r4, r0
  4061fa:	9e08      	ldr	r6, [sp, #32]
  4061fc:	2b00      	cmp	r3, #0
  4061fe:	d151      	bne.n	4062a4 <__udivmoddi4+0xb4>
  406200:	428a      	cmp	r2, r1
  406202:	4617      	mov	r7, r2
  406204:	d96d      	bls.n	4062e2 <__udivmoddi4+0xf2>
  406206:	fab2 fe82 	clz	lr, r2
  40620a:	f1be 0f00 	cmp.w	lr, #0
  40620e:	d00b      	beq.n	406228 <__udivmoddi4+0x38>
  406210:	f1ce 0c20 	rsb	ip, lr, #32
  406214:	fa01 f50e 	lsl.w	r5, r1, lr
  406218:	fa20 fc0c 	lsr.w	ip, r0, ip
  40621c:	fa02 f70e 	lsl.w	r7, r2, lr
  406220:	ea4c 0c05 	orr.w	ip, ip, r5
  406224:	fa00 f40e 	lsl.w	r4, r0, lr
  406228:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40622c:	0c25      	lsrs	r5, r4, #16
  40622e:	fbbc f8fa 	udiv	r8, ip, sl
  406232:	fa1f f987 	uxth.w	r9, r7
  406236:	fb0a cc18 	mls	ip, sl, r8, ip
  40623a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40623e:	fb08 f309 	mul.w	r3, r8, r9
  406242:	42ab      	cmp	r3, r5
  406244:	d90a      	bls.n	40625c <__udivmoddi4+0x6c>
  406246:	19ed      	adds	r5, r5, r7
  406248:	f108 32ff 	add.w	r2, r8, #4294967295
  40624c:	f080 8123 	bcs.w	406496 <__udivmoddi4+0x2a6>
  406250:	42ab      	cmp	r3, r5
  406252:	f240 8120 	bls.w	406496 <__udivmoddi4+0x2a6>
  406256:	f1a8 0802 	sub.w	r8, r8, #2
  40625a:	443d      	add	r5, r7
  40625c:	1aed      	subs	r5, r5, r3
  40625e:	b2a4      	uxth	r4, r4
  406260:	fbb5 f0fa 	udiv	r0, r5, sl
  406264:	fb0a 5510 	mls	r5, sl, r0, r5
  406268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40626c:	fb00 f909 	mul.w	r9, r0, r9
  406270:	45a1      	cmp	r9, r4
  406272:	d909      	bls.n	406288 <__udivmoddi4+0x98>
  406274:	19e4      	adds	r4, r4, r7
  406276:	f100 33ff 	add.w	r3, r0, #4294967295
  40627a:	f080 810a 	bcs.w	406492 <__udivmoddi4+0x2a2>
  40627e:	45a1      	cmp	r9, r4
  406280:	f240 8107 	bls.w	406492 <__udivmoddi4+0x2a2>
  406284:	3802      	subs	r0, #2
  406286:	443c      	add	r4, r7
  406288:	eba4 0409 	sub.w	r4, r4, r9
  40628c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406290:	2100      	movs	r1, #0
  406292:	2e00      	cmp	r6, #0
  406294:	d061      	beq.n	40635a <__udivmoddi4+0x16a>
  406296:	fa24 f40e 	lsr.w	r4, r4, lr
  40629a:	2300      	movs	r3, #0
  40629c:	6034      	str	r4, [r6, #0]
  40629e:	6073      	str	r3, [r6, #4]
  4062a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4062a4:	428b      	cmp	r3, r1
  4062a6:	d907      	bls.n	4062b8 <__udivmoddi4+0xc8>
  4062a8:	2e00      	cmp	r6, #0
  4062aa:	d054      	beq.n	406356 <__udivmoddi4+0x166>
  4062ac:	2100      	movs	r1, #0
  4062ae:	e886 0021 	stmia.w	r6, {r0, r5}
  4062b2:	4608      	mov	r0, r1
  4062b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4062b8:	fab3 f183 	clz	r1, r3
  4062bc:	2900      	cmp	r1, #0
  4062be:	f040 808e 	bne.w	4063de <__udivmoddi4+0x1ee>
  4062c2:	42ab      	cmp	r3, r5
  4062c4:	d302      	bcc.n	4062cc <__udivmoddi4+0xdc>
  4062c6:	4282      	cmp	r2, r0
  4062c8:	f200 80fa 	bhi.w	4064c0 <__udivmoddi4+0x2d0>
  4062cc:	1a84      	subs	r4, r0, r2
  4062ce:	eb65 0503 	sbc.w	r5, r5, r3
  4062d2:	2001      	movs	r0, #1
  4062d4:	46ac      	mov	ip, r5
  4062d6:	2e00      	cmp	r6, #0
  4062d8:	d03f      	beq.n	40635a <__udivmoddi4+0x16a>
  4062da:	e886 1010 	stmia.w	r6, {r4, ip}
  4062de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4062e2:	b912      	cbnz	r2, 4062ea <__udivmoddi4+0xfa>
  4062e4:	2701      	movs	r7, #1
  4062e6:	fbb7 f7f2 	udiv	r7, r7, r2
  4062ea:	fab7 fe87 	clz	lr, r7
  4062ee:	f1be 0f00 	cmp.w	lr, #0
  4062f2:	d134      	bne.n	40635e <__udivmoddi4+0x16e>
  4062f4:	1beb      	subs	r3, r5, r7
  4062f6:	0c3a      	lsrs	r2, r7, #16
  4062f8:	fa1f fc87 	uxth.w	ip, r7
  4062fc:	2101      	movs	r1, #1
  4062fe:	fbb3 f8f2 	udiv	r8, r3, r2
  406302:	0c25      	lsrs	r5, r4, #16
  406304:	fb02 3318 	mls	r3, r2, r8, r3
  406308:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40630c:	fb0c f308 	mul.w	r3, ip, r8
  406310:	42ab      	cmp	r3, r5
  406312:	d907      	bls.n	406324 <__udivmoddi4+0x134>
  406314:	19ed      	adds	r5, r5, r7
  406316:	f108 30ff 	add.w	r0, r8, #4294967295
  40631a:	d202      	bcs.n	406322 <__udivmoddi4+0x132>
  40631c:	42ab      	cmp	r3, r5
  40631e:	f200 80d1 	bhi.w	4064c4 <__udivmoddi4+0x2d4>
  406322:	4680      	mov	r8, r0
  406324:	1aed      	subs	r5, r5, r3
  406326:	b2a3      	uxth	r3, r4
  406328:	fbb5 f0f2 	udiv	r0, r5, r2
  40632c:	fb02 5510 	mls	r5, r2, r0, r5
  406330:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406334:	fb0c fc00 	mul.w	ip, ip, r0
  406338:	45a4      	cmp	ip, r4
  40633a:	d907      	bls.n	40634c <__udivmoddi4+0x15c>
  40633c:	19e4      	adds	r4, r4, r7
  40633e:	f100 33ff 	add.w	r3, r0, #4294967295
  406342:	d202      	bcs.n	40634a <__udivmoddi4+0x15a>
  406344:	45a4      	cmp	ip, r4
  406346:	f200 80b8 	bhi.w	4064ba <__udivmoddi4+0x2ca>
  40634a:	4618      	mov	r0, r3
  40634c:	eba4 040c 	sub.w	r4, r4, ip
  406350:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406354:	e79d      	b.n	406292 <__udivmoddi4+0xa2>
  406356:	4631      	mov	r1, r6
  406358:	4630      	mov	r0, r6
  40635a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40635e:	f1ce 0420 	rsb	r4, lr, #32
  406362:	fa05 f30e 	lsl.w	r3, r5, lr
  406366:	fa07 f70e 	lsl.w	r7, r7, lr
  40636a:	fa20 f804 	lsr.w	r8, r0, r4
  40636e:	0c3a      	lsrs	r2, r7, #16
  406370:	fa25 f404 	lsr.w	r4, r5, r4
  406374:	ea48 0803 	orr.w	r8, r8, r3
  406378:	fbb4 f1f2 	udiv	r1, r4, r2
  40637c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406380:	fb02 4411 	mls	r4, r2, r1, r4
  406384:	fa1f fc87 	uxth.w	ip, r7
  406388:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40638c:	fb01 f30c 	mul.w	r3, r1, ip
  406390:	42ab      	cmp	r3, r5
  406392:	fa00 f40e 	lsl.w	r4, r0, lr
  406396:	d909      	bls.n	4063ac <__udivmoddi4+0x1bc>
  406398:	19ed      	adds	r5, r5, r7
  40639a:	f101 30ff 	add.w	r0, r1, #4294967295
  40639e:	f080 808a 	bcs.w	4064b6 <__udivmoddi4+0x2c6>
  4063a2:	42ab      	cmp	r3, r5
  4063a4:	f240 8087 	bls.w	4064b6 <__udivmoddi4+0x2c6>
  4063a8:	3902      	subs	r1, #2
  4063aa:	443d      	add	r5, r7
  4063ac:	1aeb      	subs	r3, r5, r3
  4063ae:	fa1f f588 	uxth.w	r5, r8
  4063b2:	fbb3 f0f2 	udiv	r0, r3, r2
  4063b6:	fb02 3310 	mls	r3, r2, r0, r3
  4063ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4063be:	fb00 f30c 	mul.w	r3, r0, ip
  4063c2:	42ab      	cmp	r3, r5
  4063c4:	d907      	bls.n	4063d6 <__udivmoddi4+0x1e6>
  4063c6:	19ed      	adds	r5, r5, r7
  4063c8:	f100 38ff 	add.w	r8, r0, #4294967295
  4063cc:	d26f      	bcs.n	4064ae <__udivmoddi4+0x2be>
  4063ce:	42ab      	cmp	r3, r5
  4063d0:	d96d      	bls.n	4064ae <__udivmoddi4+0x2be>
  4063d2:	3802      	subs	r0, #2
  4063d4:	443d      	add	r5, r7
  4063d6:	1aeb      	subs	r3, r5, r3
  4063d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4063dc:	e78f      	b.n	4062fe <__udivmoddi4+0x10e>
  4063de:	f1c1 0720 	rsb	r7, r1, #32
  4063e2:	fa22 f807 	lsr.w	r8, r2, r7
  4063e6:	408b      	lsls	r3, r1
  4063e8:	fa05 f401 	lsl.w	r4, r5, r1
  4063ec:	ea48 0303 	orr.w	r3, r8, r3
  4063f0:	fa20 fe07 	lsr.w	lr, r0, r7
  4063f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4063f8:	40fd      	lsrs	r5, r7
  4063fa:	ea4e 0e04 	orr.w	lr, lr, r4
  4063fe:	fbb5 f9fc 	udiv	r9, r5, ip
  406402:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406406:	fb0c 5519 	mls	r5, ip, r9, r5
  40640a:	fa1f f883 	uxth.w	r8, r3
  40640e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406412:	fb09 f408 	mul.w	r4, r9, r8
  406416:	42ac      	cmp	r4, r5
  406418:	fa02 f201 	lsl.w	r2, r2, r1
  40641c:	fa00 fa01 	lsl.w	sl, r0, r1
  406420:	d908      	bls.n	406434 <__udivmoddi4+0x244>
  406422:	18ed      	adds	r5, r5, r3
  406424:	f109 30ff 	add.w	r0, r9, #4294967295
  406428:	d243      	bcs.n	4064b2 <__udivmoddi4+0x2c2>
  40642a:	42ac      	cmp	r4, r5
  40642c:	d941      	bls.n	4064b2 <__udivmoddi4+0x2c2>
  40642e:	f1a9 0902 	sub.w	r9, r9, #2
  406432:	441d      	add	r5, r3
  406434:	1b2d      	subs	r5, r5, r4
  406436:	fa1f fe8e 	uxth.w	lr, lr
  40643a:	fbb5 f0fc 	udiv	r0, r5, ip
  40643e:	fb0c 5510 	mls	r5, ip, r0, r5
  406442:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406446:	fb00 f808 	mul.w	r8, r0, r8
  40644a:	45a0      	cmp	r8, r4
  40644c:	d907      	bls.n	40645e <__udivmoddi4+0x26e>
  40644e:	18e4      	adds	r4, r4, r3
  406450:	f100 35ff 	add.w	r5, r0, #4294967295
  406454:	d229      	bcs.n	4064aa <__udivmoddi4+0x2ba>
  406456:	45a0      	cmp	r8, r4
  406458:	d927      	bls.n	4064aa <__udivmoddi4+0x2ba>
  40645a:	3802      	subs	r0, #2
  40645c:	441c      	add	r4, r3
  40645e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406462:	eba4 0408 	sub.w	r4, r4, r8
  406466:	fba0 8902 	umull	r8, r9, r0, r2
  40646a:	454c      	cmp	r4, r9
  40646c:	46c6      	mov	lr, r8
  40646e:	464d      	mov	r5, r9
  406470:	d315      	bcc.n	40649e <__udivmoddi4+0x2ae>
  406472:	d012      	beq.n	40649a <__udivmoddi4+0x2aa>
  406474:	b156      	cbz	r6, 40648c <__udivmoddi4+0x29c>
  406476:	ebba 030e 	subs.w	r3, sl, lr
  40647a:	eb64 0405 	sbc.w	r4, r4, r5
  40647e:	fa04 f707 	lsl.w	r7, r4, r7
  406482:	40cb      	lsrs	r3, r1
  406484:	431f      	orrs	r7, r3
  406486:	40cc      	lsrs	r4, r1
  406488:	6037      	str	r7, [r6, #0]
  40648a:	6074      	str	r4, [r6, #4]
  40648c:	2100      	movs	r1, #0
  40648e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406492:	4618      	mov	r0, r3
  406494:	e6f8      	b.n	406288 <__udivmoddi4+0x98>
  406496:	4690      	mov	r8, r2
  406498:	e6e0      	b.n	40625c <__udivmoddi4+0x6c>
  40649a:	45c2      	cmp	sl, r8
  40649c:	d2ea      	bcs.n	406474 <__udivmoddi4+0x284>
  40649e:	ebb8 0e02 	subs.w	lr, r8, r2
  4064a2:	eb69 0503 	sbc.w	r5, r9, r3
  4064a6:	3801      	subs	r0, #1
  4064a8:	e7e4      	b.n	406474 <__udivmoddi4+0x284>
  4064aa:	4628      	mov	r0, r5
  4064ac:	e7d7      	b.n	40645e <__udivmoddi4+0x26e>
  4064ae:	4640      	mov	r0, r8
  4064b0:	e791      	b.n	4063d6 <__udivmoddi4+0x1e6>
  4064b2:	4681      	mov	r9, r0
  4064b4:	e7be      	b.n	406434 <__udivmoddi4+0x244>
  4064b6:	4601      	mov	r1, r0
  4064b8:	e778      	b.n	4063ac <__udivmoddi4+0x1bc>
  4064ba:	3802      	subs	r0, #2
  4064bc:	443c      	add	r4, r7
  4064be:	e745      	b.n	40634c <__udivmoddi4+0x15c>
  4064c0:	4608      	mov	r0, r1
  4064c2:	e708      	b.n	4062d6 <__udivmoddi4+0xe6>
  4064c4:	f1a8 0802 	sub.w	r8, r8, #2
  4064c8:	443d      	add	r5, r7
  4064ca:	e72b      	b.n	406324 <__udivmoddi4+0x134>

004064cc <__aeabi_idiv0>:
  4064cc:	4770      	bx	lr
  4064ce:	bf00      	nop
  4064d0:	00006325 	.word	0x00006325
  4064d4:	756e654d 	.word	0x756e654d
  4064d8:	0a0d3a20 	.word	0x0a0d3a20
  4064dc:	2d2d2020 	.word	0x2d2d2020
  4064e0:	6c655320 	.word	0x6c655320
  4064e4:	20746365 	.word	0x20746365
  4064e8:	20656874 	.word	0x20656874
  4064ec:	69746361 	.word	0x69746361
  4064f0:	0d3a6e6f 	.word	0x0d3a6e6f
  4064f4:	3020200a 	.word	0x3020200a
  4064f8:	6554203a 	.word	0x6554203a
  4064fc:	6d207473 	.word	0x6d207473
  406500:	206e6163 	.word	0x206e6163
  406504:	74696e69 	.word	0x74696e69
  406508:	0a0d202e 	.word	0x0a0d202e
  40650c:	3a312020 	.word	0x3a312020
  406510:	73655420 	.word	0x73655420
  406514:	69732074 	.word	0x69732074
  406518:	656c706d 	.word	0x656c706d
  40651c:	73656d20 	.word	0x73656d20
  406520:	65676173 	.word	0x65676173
  406524:	0a0d202e 	.word	0x0a0d202e
  406528:	3a322020 	.word	0x3a322020
  40652c:	73655420 	.word	0x73655420
  406530:	64612074 	.word	0x64612074
  406534:	69732064 	.word	0x69732064
  406538:	656c676e 	.word	0x656c676e
  40653c:	6c696620 	.word	0x6c696620
  406540:	73726574 	.word	0x73726574
  406544:	0a0d202e 	.word	0x0a0d202e
  406548:	3a332020 	.word	0x3a332020
  40654c:	73655420 	.word	0x73655420
  406550:	64612074 	.word	0x64612074
  406554:	61722064 	.word	0x61722064
  406558:	2065676e 	.word	0x2065676e
  40655c:	746c6966 	.word	0x746c6966
  406560:	2e737265 	.word	0x2e737265
  406564:	200a0d20 	.word	0x200a0d20
  406568:	203a3420 	.word	0x203a3420
  40656c:	74736554 	.word	0x74736554
  406570:	6e657320 	.word	0x6e657320
  406574:	6f742064 	.word	0x6f742064
  406578:	616c206f 	.word	0x616c206f
  40657c:	20656772 	.word	0x20656772
  406580:	7373656d 	.word	0x7373656d
  406584:	2e656761 	.word	0x2e656761
  406588:	200a0d20 	.word	0x200a0d20
  40658c:	203a3520 	.word	0x203a3520
  406590:	74736554 	.word	0x74736554
  406594:	6e657320 	.word	0x6e657320
  406598:	656d2064 	.word	0x656d2064
  40659c:	67617373 	.word	0x67617373
  4065a0:	69772065 	.word	0x69772065
  4065a4:	6e206874 	.word	0x6e206874
  4065a8:	6164206f 	.word	0x6164206f
  4065ac:	202e6174 	.word	0x202e6174
  4065b0:	20200a0d 	.word	0x20200a0d
  4065b4:	54203a36 	.word	0x54203a36
  4065b8:	20747365 	.word	0x20747365
  4065bc:	646e6573 	.word	0x646e6573
  4065c0:	73656d20 	.word	0x73656d20
  4065c4:	65676173 	.word	0x65676173
  4065c8:	74697720 	.word	0x74697720
  4065cc:	6f6e2068 	.word	0x6f6e2068
  4065d0:	2e444920 	.word	0x2e444920
  4065d4:	0a0d202e 	.word	0x0a0d202e
  4065d8:	3a372020 	.word	0x3a372020
  4065dc:	73655420 	.word	0x73655420
  4065e0:	65732074 	.word	0x65732074
  4065e4:	6320646e 	.word	0x6320646e
  4065e8:	6f747375 	.word	0x6f747375
  4065ec:	656d206d 	.word	0x656d206d
  4065f0:	67617373 	.word	0x67617373
  4065f4:	0a0d2065 	.word	0x0a0d2065
  4065f8:	3a382020 	.word	0x3a382020
  4065fc:	73655420 	.word	0x73655420
  406600:	75632074 	.word	0x75632074
  406604:	6d6f7473 	.word	0x6d6f7473
  406608:	6c696620 	.word	0x6c696620
  40660c:	20726574 	.word	0x20726574
  406610:	20200a0d 	.word	0x20200a0d
  406614:	44203a68 	.word	0x44203a68
  406618:	6c707369 	.word	0x6c707369
  40661c:	6d207961 	.word	0x6d207961
  406620:	20756e65 	.word	0x20756e65
  406624:	0a0d0a0d 	.word	0x0a0d0a0d
  406628:	00000000 	.word	0x00000000
  40662c:	3a302020 	.word	0x3a302020
  406630:	73655420 	.word	0x73655420
  406634:	636d2074 	.word	0x636d2074
  406638:	69206e61 	.word	0x69206e61
  40663c:	2e74696e 	.word	0x2e74696e
  406640:	000a0d20 	.word	0x000a0d20
  406644:	3a312020 	.word	0x3a312020
  406648:	73655420 	.word	0x73655420
  40664c:	69732074 	.word	0x69732074
  406650:	656c706d 	.word	0x656c706d
  406654:	73656d20 	.word	0x73656d20
  406658:	65676173 	.word	0x65676173
  40665c:	0a0d202e 	.word	0x0a0d202e
  406660:	00000000 	.word	0x00000000
  406664:	3a322020 	.word	0x3a322020
  406668:	73655420 	.word	0x73655420
  40666c:	64612074 	.word	0x64612074
  406670:	69732064 	.word	0x69732064
  406674:	656c676e 	.word	0x656c676e
  406678:	6c696620 	.word	0x6c696620
  40667c:	73726574 	.word	0x73726574
  406680:	0a0d202e 	.word	0x0a0d202e
  406684:	00000000 	.word	0x00000000
  406688:	3a332020 	.word	0x3a332020
  40668c:	73655420 	.word	0x73655420
  406690:	64612074 	.word	0x64612074
  406694:	61722064 	.word	0x61722064
  406698:	2065676e 	.word	0x2065676e
  40669c:	746c6966 	.word	0x746c6966
  4066a0:	2e737265 	.word	0x2e737265
  4066a4:	000a0d20 	.word	0x000a0d20
  4066a8:	3a342020 	.word	0x3a342020
  4066ac:	73655420 	.word	0x73655420
  4066b0:	65732074 	.word	0x65732074
  4066b4:	7420646e 	.word	0x7420646e
  4066b8:	6c206f6f 	.word	0x6c206f6f
  4066bc:	65677261 	.word	0x65677261
  4066c0:	73656d20 	.word	0x73656d20
  4066c4:	65676173 	.word	0x65676173
  4066c8:	0a0d202e 	.word	0x0a0d202e
  4066cc:	00000000 	.word	0x00000000
  4066d0:	3a352020 	.word	0x3a352020
  4066d4:	73655420 	.word	0x73655420
  4066d8:	65732074 	.word	0x65732074
  4066dc:	6d20646e 	.word	0x6d20646e
  4066e0:	61737365 	.word	0x61737365
  4066e4:	77206567 	.word	0x77206567
  4066e8:	20687469 	.word	0x20687469
  4066ec:	64206f6e 	.word	0x64206f6e
  4066f0:	2e617461 	.word	0x2e617461
  4066f4:	000a0d20 	.word	0x000a0d20
  4066f8:	3a362020 	.word	0x3a362020
  4066fc:	73655420 	.word	0x73655420
  406700:	65732074 	.word	0x65732074
  406704:	6d20646e 	.word	0x6d20646e
  406708:	61737365 	.word	0x61737365
  40670c:	77206567 	.word	0x77206567
  406710:	20687469 	.word	0x20687469
  406714:	49206f6e 	.word	0x49206f6e
  406718:	0d202e44 	.word	0x0d202e44
  40671c:	0000000a 	.word	0x0000000a
  406720:	3a372020 	.word	0x3a372020
  406724:	73655420 	.word	0x73655420
  406728:	65732074 	.word	0x65732074
  40672c:	6320646e 	.word	0x6320646e
  406730:	6f747375 	.word	0x6f747375
  406734:	656d206d 	.word	0x656d206d
  406738:	67617373 	.word	0x67617373
  40673c:	0a0d2065 	.word	0x0a0d2065
  406740:	00000000 	.word	0x00000000
  406744:	0a0d6425 	.word	0x0a0d6425
  406748:	00000000 	.word	0x00000000
  40674c:	746e6553 	.word	0x746e6553
  406750:	73656d20 	.word	0x73656d20
  406754:	65676173 	.word	0x65676173
  406758:	74697720 	.word	0x74697720
  40675c:	64692068 	.word	0x64692068
  406760:	6425203a 	.word	0x6425203a
  406764:	000a0d20 	.word	0x000a0d20
  406768:	3a382020 	.word	0x3a382020
  40676c:	73655420 	.word	0x73655420
  406770:	75632074 	.word	0x75632074
  406774:	6d6f7473 	.word	0x6d6f7473
  406778:	6c696620 	.word	0x6c696620
  40677c:	20726574 	.word	0x20726574
  406780:	00000a0d 	.word	0x00000a0d
  406784:	65646441 	.word	0x65646441
  406788:	69662064 	.word	0x69662064
  40678c:	7265746c 	.word	0x7265746c
  406790:	74697720 	.word	0x74697720
  406794:	44492068 	.word	0x44492068
  406798:	6425203a 	.word	0x6425203a
  40679c:	000a0d20 	.word	0x000a0d20
  4067a0:	7373654d 	.word	0x7373654d
  4067a4:	20656761 	.word	0x20656761
  4067a8:	65636572 	.word	0x65636572
  4067ac:	64657669 	.word	0x64657669
  4067b0:	206e6920 	.word	0x206e6920
  4067b4:	6e69616d 	.word	0x6e69616d
  4067b8:	00000a21 	.word	0x00000a21
  4067bc:	25203a58 	.word	0x25203a58
  4067c0:	59202c64 	.word	0x59202c64
  4067c4:	6425203a 	.word	0x6425203a
  4067c8:	3a5a202c 	.word	0x3a5a202c
  4067cc:	0a642520 	.word	0x0a642520
  4067d0:	00000000 	.word	0x00000000
  4067d4:	203a4449 	.word	0x203a4449
  4067d8:	000a7825 	.word	0x000a7825
  4067dc:	61746144 	.word	0x61746144
  4067e0:	7a697320 	.word	0x7a697320
  4067e4:	66612065 	.word	0x66612065
  4067e8:	3a726574 	.word	0x3a726574
  4067ec:	00642520 	.word	0x00642520
  4067f0:	65747845 	.word	0x65747845
  4067f4:	6465646e 	.word	0x6465646e
  4067f8:	20444920 	.word	0x20444920
  4067fc:	20746f6e 	.word	0x20746f6e
  406800:	70707573 	.word	0x70707573
  406804:	6574726f 	.word	0x6574726f
  406808:	0a0d2164 	.word	0x0a0d2164
  40680c:	00000000 	.word	0x00000000
  406810:	434d203a 	.word	0x434d203a
  406814:	62204e41 	.word	0x62204e41
  406818:	6f207375 	.word	0x6f207375
  40681c:	65206666 	.word	0x65206666
  406820:	726f7272 	.word	0x726f7272
  406824:	6572202c 	.word	0x6572202c
  406828:	696e692d 	.word	0x696e692d
  40682c:	6c616974 	.word	0x6c616974
  406830:	74617a69 	.word	0x74617a69
  406834:	2e6e6f69 	.word	0x2e6e6f69
  406838:	0d0a0d20 	.word	0x0d0a0d20
  40683c:	0000000a 	.word	0x0000000a
  406840:	65646e49 	.word	0x65646e49
  406844:	656e2078 	.word	0x656e2078
  406848:	20736465 	.word	0x20736465
  40684c:	62206f74 	.word	0x62206f74
  406850:	65622065 	.word	0x65622065
  406854:	65657774 	.word	0x65657774
  406858:	2d30206e 	.word	0x2d30206e
  40685c:	00213336 	.word	0x00213336
  406860:	75727453 	.word	0x75727453
  406864:	69207463 	.word	0x69207463
  406868:	696d2073 	.word	0x696d2073
  40686c:	6e697373 	.word	0x6e697373
  406870:	61642067 	.word	0x61642067
  406874:	00216174 	.word	0x00216174
  406878:	46494853 	.word	0x46494853
  40687c:	41435f54 	.word	0x41435f54
  406880:	52455f4e 	.word	0x52455f4e
  406884:	3a524f52 	.word	0x3a524f52
  406888:	0a732520 	.word	0x0a732520
  40688c:	00000000 	.word	0x00000000
  406890:	75727453 	.word	0x75727453
  406894:	69207463 	.word	0x69207463
  406898:	696d2073 	.word	0x696d2073
  40689c:	6e697373 	.word	0x6e697373
  4068a0:	61642067 	.word	0x61642067
  4068a4:	69536174 	.word	0x69536174
  4068a8:	0021657a 	.word	0x0021657a
  4068ac:	61746144 	.word	0x61746144
  4068b0:	7a697320 	.word	0x7a697320
  4068b4:	73692065 	.word	0x73692065
  4068b8:	6f6f7420 	.word	0x6f6f7420
  4068bc:	72616c20 	.word	0x72616c20
  4068c0:	00216567 	.word	0x00216567

004068c4 <_global_impure_ptr>:
  4068c4:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  4068d4:	46454443 00000000 33323130 37363534     CDEF....01234567
  4068e4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4068f4:	0000296c                                l)..

004068f8 <blanks.7217>:
  4068f8:	20202020 20202020 20202020 20202020                     

00406908 <zeroes.7218>:
  406908:	30303030 30303030 30303030 30303030     0000000000000000

00406918 <basefix.6805>:
  406918:	0001000a 00030002 00050004 00070006     ................
  406928:	00090008 000b000a 000d000c 000f000e     ................
  406938:	00000010 00000043 49534f50 00000058     ....C...POSIX...
  406948:	0000002e                                ....

0040694c <_ctype_>:
  40694c:	20202000 20202020 28282020 20282828     .         ((((( 
  40695c:	20202020 20202020 20202020 20202020                     
  40696c:	10108820 10101010 10101010 10101010      ...............
  40697c:	04040410 04040404 10040404 10101010     ................
  40698c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40699c:	01010101 01010101 01010101 10101010     ................
  4069ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4069bc:	02020202 02020202 02020202 10101010     ................
  4069cc:	00000020 00000000 00000000 00000000      ...............
	...

00406a50 <_init>:
  406a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a52:	bf00      	nop
  406a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406a56:	bc08      	pop	{r3}
  406a58:	469e      	mov	lr, r3
  406a5a:	4770      	bx	lr

00406a5c <__init_array_start>:
  406a5c:	00403b11 	.word	0x00403b11

00406a60 <__frame_dummy_init_array_entry>:
  406a60:	0040018d                                ..@.

00406a64 <_fini>:
  406a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a66:	bf00      	nop
  406a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406a6a:	bc08      	pop	{r3}
  406a6c:	469e      	mov	lr, r3
  406a6e:	4770      	bx	lr

00406a70 <__fini_array_start>:
  406a70:	00400169 	.word	0x00400169
